options:
  parameters:
    author: dev
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: scrambler_loopback
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Scrambler Loopback
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2224, 416.0]
    rotation: 0
    state: true
- name: blocks_message_strobe_0
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: pmt.intern("TEST")
    period: '1000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 156.0]
    rotation: 0
    state: disabled
- name: blocks_pack_k_bits_bb_1
  id: blocks_pack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '8'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1392, 708.0]
    rotation: 0
    state: enabled
- name: blocks_pdu_to_tagged_stream_0_1
  id: blocks_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 300.0]
    rotation: 0
    state: enabled
- name: blocks_random_pdu_0
  id: blocks_random_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length_modulo: '2'
    mask: '0xFF'
    maxoutbuf: '0'
    maxsize: '8'
    minoutbuf: '0'
    minsize: '3'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 140.0]
    rotation: 0
    state: disabled
- name: blocks_socket_pdu_0
  id: blocks_socket_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    host: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    mtu: '256'
    port: '3001'
    tcp_no_delay: 'False'
    type: UDP_SERVER
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [248, 276.0]
    rotation: 0
    state: enabled
- name: blocks_stream_to_tagged_stream_0_0
  id: blocks_stream_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    len_tag_key: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
    packet_len: '1'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1024, 140.0]
    rotation: 0
    state: enabled
- name: blocks_tagged_stream_mux_0_0
  id: blocks_tagged_stream_mux
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengthtagname: packet_len
    maxoutbuf: '0'
    minoutbuf: '0'
    ninputs: '2'
    tag_preserve_head_pos: '0'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1312, 224.0]
    rotation: 0
    state: enabled
- name: blocks_tagged_stream_to_pdu_2
  id: blocks_tagged_stream_to_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1560, 708.0]
    rotation: 0
    state: true
- name: blocks_unpack_k_bits_bb_0
  id: blocks_unpack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '8'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1616, 236.0]
    rotation: 0
    state: enabled
- name: blocks_vector_source_x_0_1
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    tags: '[]'
    type: byte
    vector: '[0x0a]*1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 132.0]
    rotation: 0
    state: enabled
- name: digital_descrambler_bb_0
  id: digital_descrambler_bb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    len: '7'
    mask: '0x8A'
    maxoutbuf: '0'
    minoutbuf: '0'
    seed: '0x7F'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1232, 692.0]
    rotation: 0
    state: enabled
- name: digital_scrambler_bb_0
  id: digital_scrambler_bb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    len: '7'
    mask: '0x8A'
    maxoutbuf: '0'
    minoutbuf: '0'
    seed: '0x7F'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1824, 196.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      import pmt\nfrom gnuradio import gr\n\n\nclass blk(gr.basic_block):\n    def\
      \ __init__(self, enabled=1, payload=[0x55, 0x55]):\n        gr.basic_block.__init__(\n\
      \            self,\n            name=\"Idle Packets\",\n            in_sig=None,\n\
      \            out_sig=None)\n        self.message_port_register_out(pmt.intern('pdus'))\n\
      \        self.message_port_register_in(pmt.intern('trig'))\n        self.set_msg_handler(pmt.intern('trig'),\
      \ self.gen_pdu)\n        \n        self.payload = payload\n        self.enabled\
      \ = enabled\n        \n    def gen_pdu(self, msg):\n    \tif self.enabled:\n\
      \           pdu = pmt.cons(pmt.make_dict(), pmt.init_u8vector(len(self.payload),\
      \ self.payload))\n           self.message_port_pub(pmt.intern('pdus'), pdu)\n"
    affinity: ''
    alias: ''
    comment: ''
    enabled: tx_0
    maxoutbuf: '0'
    minoutbuf: '0'
    payload: '[0x55]*80'
  states:
    _io_cache: ('Idle Packets', 'blk', [('enabled', '1'), ('payload', '[85, 85]')],
      [('trig', 'message', 1)], [('pdus', 'message', 1)], '', ['enabled', 'payload'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 436.0]
    rotation: 0
    state: disabled
- name: epy_block_0_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      import pmt\nfrom gnuradio import gr\n\n\nclass blk(gr.basic_block):\n    def\
      \ __init__(self):\n        gr.basic_block.__init__(\n            self,\n   \
      \         name=\"Descramble Fixer\",\n            in_sig=None,\n           \
      \ out_sig=None)\n        self.message_port_register_out(pmt.intern('out'))\n\
      \        self.message_port_register_in(pmt.intern('in'))\n        self.set_msg_handler(pmt.intern('in'),\
      \ self.fix_pdu)\n        \n    def fix_pdu(self, msg):        \n        pdu\
      \ = pmt.to_python(msg)\n        items = pdu[1]\n        items = items[1:]\n\
      \        pdu = pmt.cons(pmt.make_dict(), pmt.init_u8vector(len(items), items))\n\
      \        self.message_port_pub(pmt.intern('out'), pdu)\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Descramble Fixer', 'blk', [], [('in', 'message', 1)], [('out', 'message',
      1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1808, 712.0]
    rotation: 0
    state: enabled
- name: epy_block_0_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      import pmt\nfrom gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded\
      \ Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ pattern=[0x55]*10):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='HAS Idle Inserter',   # will show up in\
      \ GRC\n            in_sig=None,\n            out_sig=[np.byte]\n        )\n\
      \        \n        self.message_port_register_in(pmt.intern('pdu'))\n      \
      \  self.set_msg_handler(pmt.intern('pdu'), self.buffer_items)\n        self.set_min_output_buffer(len(pattern))\n\
      \        \n        self.buffer = []\n        \n        # if an attribute with\
      \ the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.pattern = pattern\n\n    def work(self,\
      \ input_items, output_items):\n        #print(self.pattern)\n        #output_items[0][0:len(self.pattern)]\
      \ = self.pattern\n        output_items[0][:] = self.pattern\n        numItems\
      \ = len(output_items[0])\n        #print(\"Output Len:\",len(output_items[0]))\n\
      \        \n        if len(self.buffer)<numItems:\n            numItems = len(self.buffer)\n\
      \        i = 0\n        #print(\"Input/Output Size:\", numItems,\"/\",len(output_items[0]))\n\
      \        while i < numItems and numItems>0:\n            #pdu = pmt.to_python(self.pdu)\n\
      \            #data = pdu[1]\n            #print(\"PDU:\",pdu)\n            #print(\"\
      Data:\",data)\n            #framesize = len(frame)\n            \n         \
      \   output_items[0][i] = self.buffer[0]\n            self.buffer.pop(0)\n  \
      \          i = i+1\n            #pmt.u8vector_ref(pdu, pmt.size(pdu)) \u2192\
      \ uint8_t\n            #self.pdu = None\n        #print(\"Buffered items:\"\
      ,len(self.frames))\n        \t\n        return len(output_items[0])\n\n    def\
      \ buffer_items(self, msg):\n        pdu = pmt.to_python(msg)\n        items\
      \ = pdu[1]\n        \n        self.buffer.extend(items)\n        #print(\"Buffer\
      \ Len:\",len(self.buffer))\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    pattern: '[0x55]'
  states:
    _io_cache: ('HAS Idle Inserter', 'blk', [('pattern', '[85, 85, 85, 85, 85, 85,
      85, 85, 85, 85]')], [('pdu', 'message', 1)], [('0', 'byte', 1)], 'Embedded Python
      Block example - a simple multiply const', ['pattern'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 692.0]
    rotation: 0
    state: disabled

connections:
- [blocks_message_strobe_0, strobe, blocks_random_pdu_0, generate]
- [blocks_pack_k_bits_bb_1, '0', blocks_tagged_stream_to_pdu_2, '0']
- [blocks_pdu_to_tagged_stream_0_1, '0', blocks_tagged_stream_mux_0_0, '0']
- [blocks_random_pdu_0, pdus, blocks_message_debug_0, print_pdu]
- [blocks_random_pdu_0, pdus, blocks_pdu_to_tagged_stream_0_1, pdus]
- [blocks_socket_pdu_0, pdus, blocks_message_debug_0, print_pdu]
- [blocks_socket_pdu_0, pdus, blocks_pdu_to_tagged_stream_0_1, pdus]
- [blocks_stream_to_tagged_stream_0_0, '0', blocks_tagged_stream_mux_0_0, '1']
- [blocks_tagged_stream_mux_0_0, '0', blocks_unpack_k_bits_bb_0, '0']
- [blocks_tagged_stream_to_pdu_2, pdus, epy_block_0_0_0, in]
- [blocks_unpack_k_bits_bb_0, '0', digital_scrambler_bb_0, '0']
- [blocks_vector_source_x_0_1, '0', blocks_stream_to_tagged_stream_0_0, '0']
- [digital_descrambler_bb_0, '0', blocks_pack_k_bits_bb_1, '0']
- [digital_scrambler_bb_0, '0', digital_descrambler_bb_0, '0']
- [epy_block_0_0_0, out, blocks_message_debug_0, print_pdu]

metadata:
  file_format: 1
