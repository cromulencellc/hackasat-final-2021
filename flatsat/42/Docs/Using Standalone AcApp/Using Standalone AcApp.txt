42 has the capability to run controller code in two architectures.  For early studies and algorithm development, it is most convenient to just call the controller directly as part of the 42 sim.  As the controller matures into flight software, or if the controller comes from an external source, it is more convenient to host the controller in a standalone app, communicating with 42 over a socket interface.  The Standalone sim case is an example that demonstrates both of these architectures.  To see it in action, follow this procedure:
 
1)  In Standalone/Inp_IPC.txt, make sure that the "IPC Mode" for both IPC channels is OFF.  Then just run "42 Standalone".  You should see two S/C in Earth orbit (click and drag on the CAM window till you see both in frame).
 
2)  In the makefile, make these lines:
STANDALONEFLAG =
#STANDALONEFLAG = -D _AC_STANDALONE_
into these lines:
#STANDALONEFLAG =
STANDALONEFLAG = -D _AC_STANDALONE_
 
3) "make clean" and "make".  Also "make AcApp".  And in Standalone/Inp_IPC.txt, set the IPC Mode for both channels to "ACS".
 
4)  You need three terminal windows, all cd'ed to the folder where the 42 and AcApp executables are.
4a)  In the first window, run "42 Standalone".  Wait till you see "Server is listening..."
4b)  In the second window, run "AcApp 0".  Look back in the first window for another "Server is listening..."
4c)  In the third window, run "AcApp 1".
 
Now you have the two S/C again.  The difference is that now AcApp is a standalone program, and you can see all the socket traffic echoed to the terminals.  Quit or ^C out of 42, and let's take a look at the socket traffic.
 
There is an initialization step that I'll discuss below.  First, the typical message from 42 to either AcApp looks like SensorMsg.txt (in the same folder as this procedure).  The typical message from AcApp back to 42 looks like ActuatorMsg.txt (also in this folder).
 
In SensorMsg.txt, we see 42 sends information about both SC's, a couple of Worlds (Earth and the Moon), and an Orbit.  Let's say we're AcApp 0.  So we ignore everything that doesn't start with "SC[0].AC".  (The rest is either meant for SC[1], or is truth data that AcApp doesn't get to know about.  The truth data is meant for another example problem, Tx/Rx.)  You'll see sensor data, which was populated by the models in 42sensors.c.  Within AcApp, AcFsw processes that data (eg. using the AC.CSS.Illum's to construct a sun vector AC.svb), constructs a commanded attitude, performs attitude control, and generates actuator commands for the wheels, MTBs, and gimbal angle.
 
In ActuatorMsg.txt, we see three FSW-derived vectors (svb is the Sun vector in the Body frame, bvb is the magfield vector in the Body frame, and Hvb is the system momentum vector in the Body frame), then the wheel torque commands, MTB dipole commands, and the gimbal angle command (G[0].Cmd.Ang).  AC.Cmd.Ang is an artifact of my autocoding process; ignore it.

** These messages are your interface.  If you have an externally-provided controller app, these are what you want to write your interface code to meet. **
 
You can pick and choose which variables show up in the messages by marking up some header files.  Take a look (if you haven't already) at the Readme in the Database folder.  You may, for example, remove the markups that make 42 send the truth data that this example didn't use.  Keep in mind, though, that by doing so you'll impact the Tx/Rx example.  More to the point, as you modify the structs in the 42 headers for your own purposes, it's easy to generate the code that brings your modifications to the socket interface.
 
A quick word about initialization.  I tried to make AcApp not need input files.  The only thing I have to hard-code is memory allocation for the data structures.  Most of the parameters get initialized from the 42 side, where the input files get read.  The rest of the parameters get initialized in the AcApp side.  That's what ParmLoadEnabled and ParmDumpEnabled are about.  See 42fsw.c, in the #ifdef _AC_STANDALONE_ code block.  The first time through, 42 sends a huge message through, and AcApp dumps its parameters to Database/AcParmDumpXX.txt.  You can use a scheme like this, or initialize your controller code in your own way.
