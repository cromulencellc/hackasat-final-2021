        -:    0:Source:../src/fm_cmd_utils.c
        -:    0:Programs:5
        -:    1:/*
        -:    2:** $Id: fm_cmd_utils.c.gcov 1.3.1.1 2017/01/25 00:20:23EST mdeschu Exp  $
        -:    3:**
        -:    4:**  Copyright (c) 2007-2014 United States Government as represented by the 
        -:    5:**  Administrator of the National Aeronautics and Space Administration. 
        -:    6:**  All Other Rights Reserved.  
        -:    7:**
        -:    8:**  This software was created at NASA's Goddard Space Flight Center.
        -:    9:**  This software is governed by the NASA Open Source Agreement and may be 
        -:   10:**  used, distributed and modified only pursuant to the terms of that 
        -:   11:**  agreement.
        -:   12:**
        -:   13:** Title: File Manager (FM) Command Utility Functions
        -:   14:**
        -:   15:** Purpose: Provides file manager utility function definitions for
        -:   16:**          processing file manager commands
        -:   17:**
        -:   18:** Author: Susanne L. Strege, Code 582 NASA GSFC
        -:   19:**
        -:   20:** Notes:
        -:   21:**
        -:   22:*/
        -:   23:
        -:   24:#include "cfe.h"
        -:   25:#include "fm_msg.h"
        -:   26:#include "fm_cmd_utils.h"
        -:   27:#include "fm_child.h"
        -:   28:#include "fm_perfids.h"
        -:   29:#include "fm_events.h"
        -:   30:#include "cfs_utils.h"
        -:   31:
        -:   32:#include <string.h>
        -:   33:#include <ctype.h>
        -:   34:
        -:   35:
        -:   36:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   37:/*                                                                 */
        -:   38:/* FM utility function -- verify command packet length             */
        -:   39:/*                                                                 */
        -:   40:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   41:
       51:   42:boolean FM_IsValidCmdPktLength(CFE_SB_MsgPtr_t CmdPacket, uint16 ExpectedLength,
        -:   43:                                uint32 EventID, char *CmdText)
        -:   44:{
       51:   45:    boolean FunctionResult = TRUE;
       51:   46:    uint16 ActualLength = CFE_SB_GetTotalMsgLength(CmdPacket);
        -:   47:
        -:   48:    /* Verify command packet length */
       51:   49:    if (ActualLength != ExpectedLength)
        -:   50:    {
        1:   51:        FunctionResult = FALSE;
        -:   52:
        1:   53:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:   54:                         "%s error: invalid command packet length: expected = %d, actual = %d",
        -:   55:                          CmdText, ExpectedLength, ActualLength);
        -:   56:    }
        -:   57:
       51:   58:    return(FunctionResult);
        -:   59:
        -:   60:} /* FM_IsValidCmdPktLength */
        -:   61:
        -:   62:
        -:   63:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   64:/*                                                                 */
        -:   65:/* FM utility function -- verify state is not invalid              */
        -:   66:/*                                                                 */
        -:   67:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   68:
        7:   69:boolean FM_VerifyOverwrite(uint16 Overwrite, uint32 EventID, char *CmdText)
        -:   70:{
        7:   71:    boolean FunctionResult = TRUE;
        -:   72:
        -:   73:    /* Acceptable values are TRUE (one) and FALSE (zero) */
        7:   74:    if ((Overwrite != TRUE) && (Overwrite != FALSE))
        -:   75:    {
        1:   76:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:   77:                         "%s error: invalid overwrite = %d", CmdText, Overwrite);
        -:   78:
        1:   79:        FunctionResult = FALSE;
        -:   80:    }
        -:   81:
        7:   82:    return(FunctionResult);
        -:   83:
        -:   84:} /* End FM_VerifyOverwrite */
        -:   85:
        -:   86:
        -:   87:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   88:/*                                                                 */
        -:   89:/* FM utility function -- get open files data                      */
        -:   90:/*                                                                 */
        -:   91:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   92:
        5:   93:uint32 FM_GetOpenFilesData(FM_OpenFilesEntry_t *OpenFilesData)
        -:   94:{
        5:   95:    uint32 OpenFilesCount = 0;
        -:   96:    int32 FDTableIndex;
        -:   97:    OS_FDTableEntry FDTableEntry;
        -:   98:    CFE_ES_TaskInfo_t TaskInfo;
        -:   99:
        -:  100:    /* Get system info for each file descriptor table entry */
      255:  101:    for (FDTableIndex = 0; FDTableIndex < OS_MAX_NUM_OPEN_FILES; FDTableIndex++)
        -:  102:    {
        -:  103:        /* If FD table entry is valid - then file is open */
      250:  104:        if (OS_FDGetInfo(FDTableIndex, &FDTableEntry) == OS_FS_SUCCESS)
        -:  105:        {
        -:  106:            /* Getting the list of filenames is optional */
      250:  107:            if (OpenFilesData != (FM_OpenFilesEntry_t *) NULL)
        -:  108:            {
        -:  109:                /* FDTableEntry.Path has logical filename saved when file was opened */
      150:  110:                strcpy(OpenFilesData[OpenFilesCount].LogicalName, FDTableEntry.Path);
        -:  111:
        -:  112:                /* Get the name of the application that opened the file */
      150:  113:                CFE_PSP_MemSet(&TaskInfo, 0, sizeof(CFE_ES_TaskInfo_t));
      150:  114:                if (CFE_ES_GetTaskInfo(&TaskInfo, FDTableEntry.User) == CFE_SUCCESS)
        -:  115:                {
      150:  116:                    strcpy(OpenFilesData[OpenFilesCount].AppName, (char *) TaskInfo.AppName);
        -:  117:                }
        -:  118:            }
        -:  119:
        -:  120:            /* File count is not optional */
      250:  121:            OpenFilesCount++;
        -:  122:        }
        -:  123:    }
        -:  124:
        5:  125:    return(OpenFilesCount);
        -:  126:
        -:  127:} /* End FM_GetOpenFilesData */
        -:  128:
        -:  129:
        -:  130:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  131:/*                                                                 */
        -:  132:/* FM utility function -- query filename state                     */
        -:  133:/*                                                                 */
        -:  134:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  135:
       81:  136:uint32 FM_GetFilenameState(char *Filename, uint32 BufferSize, boolean FileInfoCmd)
        -:  137:{
        -:  138:    OS_FDTableEntry FDTableEntry;
        -:  139:    os_fstat_t FileStatus;
       81:  140:    uint32     FilenameState = FM_NAME_IS_INVALID;
       81:  141:    boolean    FilenameIsValid = FALSE;
       81:  142:    int32      StringLength = 0;
        -:  143:    uint32     i;
        -:  144:
        -:  145:
        -:  146:    /* Search Filename for a string terminator */
      747:  147:    for (StringLength = 0; StringLength < BufferSize; StringLength++)
        -:  148:    {
      747:  149:        if (Filename[StringLength] == '\0')
        -:  150:        {
       81:  151:            break;
        -:  152:        }
        -:  153:    }
        -:  154:
        -:  155:    /* Verify that Filename is not empty and has a terminator */
       81:  156:    if ((StringLength > 0) && (StringLength < BufferSize))
        -:  157:    {
        -:  158:        /* Verify that the string characters are OK for a filename */
       65:  159:        FilenameIsValid = CFS_IsValidFilename(Filename, StringLength);
        -:  160:    }
        -:  161:
        -:  162:    /* If Filename is valid, then determine its state */
       81:  163:    if (FilenameIsValid)
        -:  164:    {
        -:  165:        /* Check to see if Filename is in use */
       58:  166:        if (OS_stat(Filename, &FileStatus) == OS_SUCCESS)
        -:  167:        {
        -:  168:            /* Filename is in use, is it also a directory? */
        -:  169:#ifdef OS_FILESTAT_ISDIR
        -:  170:            if (OS_FILESTAT_ISDIR(FileStatus))
        -:  171:#else
       44:  172:            if (S_ISDIR(FileStatus.st_mode))
        -:  173:#endif
        -:  174:            {
        -:  175:                /* Filename is a directory */
       13:  176:                FilenameState = FM_NAME_IS_DIRECTORY;
        -:  177:            }
        -:  178:            else
        -:  179:            {
        -:  180:                /* Filename is a file, but is it open? */
       31:  181:                FilenameState = FM_NAME_IS_FILE_CLOSED;
        -:  182:
        -:  183:                /* Search for Filename in current list of open files */
     1231:  184:                for (i = 0; i < OS_MAX_NUM_OPEN_FILES; i++)
        -:  185:                {
        -:  186:                    /* Get system info for each file descriptor table entry */
        -:  187:                    /* If the FD table entry is valid - then the file is open */
     1207:  188:                    if (OS_FDGetInfo(i, &FDTableEntry) == OS_FS_SUCCESS)
        -:  189:                    {
     1207:  190:                        if (strcmp(FDTableEntry.Path, Filename) == 0)
        -:  191:                        {
        7:  192:                            FilenameState = FM_NAME_IS_FILE_OPEN;
        7:  193:                            break;
        -:  194:                        }
        -:  195:                    }
        -:  196:                }
        -:  197:            }
        -:  198:
        -:  199:            /* Save the last modify time and file size for File Info commands */
       44:  200:            if (FileInfoCmd)
        -:  201:            {
        -:  202:#ifdef OS_FILESTAT_TIME
        -:  203:                FM_GlobalData.FileStatTime = OS_FILESTAT_TIME(FileStatus);
        -:  204:#else
        3:  205:                FM_GlobalData.FileStatTime = FileStatus.st_mtime;
        -:  206:#endif
        -:  207:#ifdef OS_FILESTAT_SIZE
        -:  208:                FM_GlobalData.FileStatSize = OS_FILESTAT_SIZE(FileStatus);
        -:  209:#else
        3:  210:                FM_GlobalData.FileStatSize = FileStatus.st_size;
        -:  211:#endif
        -:  212:            }
        -:  213:        }
        -:  214:        else
        -:  215:        {
        -:  216:            /* Cannot get file stat - therefore does not exist */
       14:  217:            FilenameState = FM_NAME_IS_NOT_IN_USE;
        -:  218:
        -:  219:            /* Save the last modify time and file size for File Info commands */
       14:  220:            if (FileInfoCmd)
        -:  221:            {
        1:  222:                FM_GlobalData.FileStatSize = 0;
        1:  223:                FM_GlobalData.FileStatTime = 0;
        -:  224:            }
        -:  225:        }
        -:  226:    }
        -:  227:
       81:  228:    return(FilenameState);
        -:  229:
        -:  230:} /* End FM_GetFilenameState */
        -:  231:
        -:  232:
        -:  233:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  234:/*                                                                 */
        -:  235:/* FM utility function -- verify state is not invalid              */
        -:  236:/*                                                                 */
        -:  237:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  238:
        7:  239:uint32 FM_VerifyNameValid(char *Name, uint32 BufferSize, uint32 EventID, char *CmdText)
        -:  240:{
        -:  241:    uint32  FilenameState;
        -:  242:
        -:  243:    /* Looking for filename state != FM_NAME_IS_INVALID */
        7:  244:    FilenameState = FM_GetFilenameState(Name, BufferSize, TRUE);
        -:  245:
        7:  246:    if (FilenameState == FM_NAME_IS_INVALID)
        -:  247:    {
        -:  248:        /* Insert a terminator in case the invalid string did not have one */
        5:  249:        Name[BufferSize - 1] = '\0';
        5:  250:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  251:                         "%s error: invalid name: name = %s", CmdText, Name);
        -:  252:    }
        -:  253:
        7:  254:    return(FilenameState);
        -:  255:
        -:  256:} /* End FM_VerifyNameValid */
        -:  257:
        -:  258:
        -:  259:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  260:/*                                                                 */
        -:  261:/* FM utility function -- verify state is closed file              */
        -:  262:/*                                                                 */
        -:  263:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  264:
       13:  265:boolean FM_VerifyFileClosed(char *Filename, uint32 BufferSize, uint32 EventID, char *CmdText)
        -:  266:{
       13:  267:    boolean Result = FALSE;
        -:  268:    uint32  FilenameState;
        -:  269:
        -:  270:    /* Looking for filename state = file (closed) */
       13:  271:    FilenameState = FM_GetFilenameState(Filename, BufferSize, FALSE);
        -:  272:
       13:  273:    if (FilenameState == FM_NAME_IS_INVALID)
        -:  274:    {
        -:  275:        /* Insert a terminator in case the invalid string did not have one */
        4:  276:        Filename[BufferSize - 1] = '\0';
        4:  277:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  278:                         "%s error: filename is invalid: name = %s", CmdText, Filename);
        -:  279:    }
        9:  280:    else if (FilenameState == FM_NAME_IS_NOT_IN_USE)
        -:  281:    {
        1:  282:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  283:                         "%s error: file does not exist: name = %s", CmdText, Filename);
        -:  284:    }
        8:  285:    else if (FilenameState == FM_NAME_IS_FILE_OPEN)
        -:  286:    {
        1:  287:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  288:                         "%s error: file is already open: name = %s", CmdText, Filename);
        -:  289:    }
        7:  290:    else if (FilenameState == FM_NAME_IS_FILE_CLOSED)
        -:  291:    {
        6:  292:        Result = TRUE;
        -:  293:    }
        1:  294:    else if (FilenameState == FM_NAME_IS_DIRECTORY)
        -:  295:    {
        1:  296:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  297:                         "%s error: filename is a directory: name = %s", CmdText, Filename);
        -:  298:    }
        -:  299:
       13:  300:    return(Result);
        -:  301:
        -:  302:} /* End FM_VerifyFileClosed */
        -:  303:
        -:  304:
        -:  305:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  306:/*                                                                 */
        -:  307:/* FM utility function -- verify state is open or closed file      */
        -:  308:/*                                                                 */
        -:  309:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  310:
       13:  311:boolean FM_VerifyFileExists(char *Filename, uint32 BufferSize, uint32 EventID, char *CmdText)
        -:  312:{
       13:  313:    boolean Result = FALSE;
        -:  314:    uint32  FilenameState;
        -:  315:
        -:  316:    /* Looking for filename state = file (open or closed) */
       13:  317:    FilenameState = FM_GetFilenameState(Filename, BufferSize, FALSE);
        -:  318:
       13:  319:    if (FilenameState == FM_NAME_IS_INVALID)
        -:  320:    {
        -:  321:        /* Insert a terminator in case the invalid string did not have one */
        4:  322:        Filename[BufferSize - 1] = '\0';
        4:  323:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  324:                         "%s error: filename is invalid: name = %s", CmdText, Filename);
        -:  325:    }
        9:  326:    else if (FilenameState == FM_NAME_IS_NOT_IN_USE)
        -:  327:    {
        1:  328:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  329:                         "%s error: file does not exist: name = %s", CmdText, Filename);
        -:  330:    }
       15:  331:    else if ((FilenameState == FM_NAME_IS_FILE_OPEN) ||
        -:  332:             (FilenameState == FM_NAME_IS_FILE_CLOSED))
        -:  333:    {
        7:  334:        Result = TRUE;
        -:  335:    }
        1:  336:    else if (FilenameState == FM_NAME_IS_DIRECTORY)
        -:  337:    {
        1:  338:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  339:                         "%s error: filename is a directory: name = %s", CmdText, Filename);
        -:  340:    }
        -:  341:
       13:  342:    return(Result);
        -:  343:
        -:  344:} /* End FM_VerifyFileExists */
        -:  345:
        -:  346:
        -:  347:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  348:/*                                                                 */
        -:  349:/* FM utility function -- verify state is unused                   */
        -:  350:/*                                                                 */
        -:  351:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  352:
       10:  353:boolean FM_VerifyFileNoExist(char *Filename, uint32 BufferSize, uint32 EventID, char *CmdText)
        -:  354:{
       10:  355:    boolean Result = FALSE;
        -:  356:    uint32  FilenameState;
        -:  357:
        -:  358:    /* Looking for filename state = not in use */
       10:  359:    FilenameState = FM_GetFilenameState(Filename, BufferSize, FALSE);
        -:  360:
       10:  361:    if (FilenameState == FM_NAME_IS_INVALID)
        -:  362:    {
        -:  363:        /* Insert a terminator in case the invalid string did not have one */
        1:  364:        Filename[BufferSize - 1] = '\0';
        1:  365:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  366:                         "%s error: filename is invalid: name = %s", CmdText, Filename);
        -:  367:    }
        9:  368:    else if (FilenameState == FM_NAME_IS_NOT_IN_USE)
        -:  369:    {
        6:  370:        Result = TRUE;
        -:  371:    }
        5:  372:    else if ((FilenameState == FM_NAME_IS_FILE_OPEN) ||
        -:  373:             (FilenameState == FM_NAME_IS_FILE_CLOSED))
        -:  374:    {
        2:  375:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  376:                         "%s error: file already exists: name = %s", CmdText, Filename);
        -:  377:    }
        1:  378:    else if (FilenameState == FM_NAME_IS_DIRECTORY)
        -:  379:    {
        1:  380:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  381:                         "%s error: filename is a directory: name = %s", CmdText, Filename);
        -:  382:    }
        -:  383:
       10:  384:    return(Result);
        -:  385:
        -:  386:} /* End FM_VerifyFileNoExist */
        -:  387:
        -:  388:
        -:  389:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  390:/*                                                                 */
        -:  391:/* FM utility function -- verify state is unused or closed file    */
        -:  392:/*                                                                 */
        -:  393:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  394:
        9:  395:boolean FM_VerifyFileNotOpen(char *Filename, uint32 BufferSize, uint32 EventID, char *CmdText)
        -:  396:{
        9:  397:    boolean Result = FALSE;
        -:  398:    uint32  FilenameState;
        -:  399:
        -:  400:    /* Looking for filename state = file (closed) or name not in use */
        9:  401:    FilenameState = FM_GetFilenameState(Filename, BufferSize, FALSE);
        -:  402:
        9:  403:    if (FilenameState == FM_NAME_IS_INVALID)
        -:  404:    {
        -:  405:        /* Insert a terminator in case the invalid string did not have one */
        1:  406:        Filename[BufferSize - 1] = '\0';
        1:  407:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  408:                         "%s error: filename is invalid: name = %s", CmdText, Filename);
        -:  409:    }
        8:  410:    else if (FilenameState == FM_NAME_IS_NOT_IN_USE)
        -:  411:    {
        1:  412:        Result = TRUE;
        -:  413:    }
        7:  414:    else if (FilenameState == FM_NAME_IS_FILE_OPEN)
        -:  415:    {
        1:  416:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  417:                         "%s error: file exists as an open file: name = %s", CmdText, Filename);
        -:  418:    }
        6:  419:    else if (FilenameState == FM_NAME_IS_FILE_CLOSED)
        -:  420:    {
        5:  421:        Result = TRUE;
        -:  422:    }
        1:  423:    else if (FilenameState == FM_NAME_IS_DIRECTORY)
        -:  424:    {
        1:  425:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  426:                         "%s error: filename is a directory: name = %s", CmdText, Filename);
        -:  427:    }
        -:  428:
        9:  429:    return(Result);
        -:  430:
        -:  431:} /* End FM_VerifyFileNotOpen */
        -:  432:
        -:  433:
        -:  434:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  435:/*                                                                 */
        -:  436:/* FM utility function -- verify state is directory                */
        -:  437:/*                                                                 */
        -:  438:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  439:
       14:  440:boolean FM_VerifyDirExists(char *Directory, uint32 BufferSize, uint32 EventID, char *CmdText)
        -:  441:{
       14:  442:    boolean Result = FALSE;
        -:  443:    uint32  FilenameState;
        -:  444:
        -:  445:    /* Looking for filename state = directory */
       14:  446:    FilenameState = FM_GetFilenameState(Directory, BufferSize, FALSE);
        -:  447:
       14:  448:    if (FilenameState == FM_NAME_IS_INVALID)
        -:  449:    {
        -:  450:        /* Insert a terminator in case the invalid string did not have one */
        5:  451:        Directory[BufferSize - 1] = '\0';
        5:  452:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  453:                         "%s error: directory name is invalid: name = %s", CmdText, Directory);
        -:  454:    }
        9:  455:    else if (FilenameState == FM_NAME_IS_NOT_IN_USE)
        -:  456:    {
        1:  457:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  458:                         "%s error: directory does not exist: name = %s", CmdText, Directory);
        -:  459:    }
       10:  460:    else if ((FilenameState == FM_NAME_IS_FILE_OPEN) ||
        -:  461:             (FilenameState == FM_NAME_IS_FILE_CLOSED))
        -:  462:    {
        2:  463:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  464:                         "%s error: directory name exists as a file: name %s", CmdText, Directory);
        -:  465:    }
        6:  466:    else if (FilenameState == FM_NAME_IS_DIRECTORY)
        -:  467:    {
        6:  468:        Result = TRUE;
        -:  469:    }
        -:  470:
       14:  471:    return(Result);
        -:  472:
        -:  473:} /* End FM_VerifyDirExists */
        -:  474:
        -:  475:
        -:  476:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  477:/*                                                                 */
        -:  478:/* FM utility function -- verify state is unused                   */
        -:  479:/*                                                                 */
        -:  480:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  481:
        7:  482:boolean FM_VerifyDirNoExist(char *Name, uint32 BufferSize, uint32 EventID, char *CmdText)
        -:  483:{
        7:  484:    boolean Result = FALSE;
        -:  485:    uint32  FilenameState;
        -:  486:
        -:  487:    /* Looking for filename state = unused */
        7:  488:    FilenameState = FM_GetFilenameState(Name, BufferSize, FALSE);
        -:  489:
        7:  490:    if (FilenameState == FM_NAME_IS_INVALID)
        -:  491:    {
        -:  492:        /* Insert a terminator in case the invalid string did not have one */
        2:  493:        Name[BufferSize - 1] = '\0';
        2:  494:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  495:                         "%s error: directory name is invalid: name = %s", CmdText, Name);
        -:  496:    }
        5:  497:    else if (FilenameState == FM_NAME_IS_NOT_IN_USE)
        -:  498:    {
        2:  499:        Result = TRUE;
        -:  500:    }
        5:  501:    else if ((FilenameState == FM_NAME_IS_FILE_OPEN) ||
        -:  502:             (FilenameState == FM_NAME_IS_FILE_CLOSED))
        -:  503:    {
        2:  504:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  505:                         "%s error: directory name exists as a file: name = %s", CmdText, Name);
        -:  506:    }
        1:  507:    else if (FilenameState == FM_NAME_IS_DIRECTORY)
        -:  508:    {
        1:  509:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  510:                         "%s error: directory already exists: name = %s", CmdText, Name);
        -:  511:    }
        -:  512:
        7:  513:    return(Result);
        -:  514:
        -:  515:} /* End FM_VerifyDirNoExist */
        -:  516:
        -:  517:
        -:  518:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  519:/*                                                                 */
        -:  520:/* FM utility function -- verify child task interface is alive     */
        -:  521:/*                                                                 */
        -:  522:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  523:
       22:  524:boolean FM_VerifyChildTask(uint32 EventID, char *CmdText)
        -:  525:{
       22:  526:    boolean Result = FALSE;
        -:  527:
        -:  528:    /* Copy of child queue count that child task cannot change */
       22:  529:    uint8 LocalQueueCount = FM_GlobalData.ChildQueueCount;
        -:  530:
        -:  531:    /* Verify child task is active and queue interface is healthy */
       22:  532:    if (FM_GlobalData.ChildSemaphore == FM_CHILD_SEM_INVALID)
        -:  533:    {
        1:  534:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  535:                         "%s error: child task is disabled", CmdText);
        -:  536:
        -:  537:        /* Child task disabled - cannot add another command */
        1:  538:        Result = FALSE;
        -:  539:    }
       21:  540:    else if (LocalQueueCount == FM_CHILD_QUEUE_DEPTH)
        -:  541:    {
        1:  542:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  543:                         "%s error: child task queue is full", CmdText);
        -:  544:
        -:  545:        /* Queue full - cannot add another command */
        1:  546:        Result = FALSE;
        -:  547:    }
       41:  548:    else if ((LocalQueueCount > FM_CHILD_QUEUE_DEPTH) ||
       19:  549:             (FM_GlobalData.ChildWriteIndex >= FM_CHILD_QUEUE_DEPTH))
        -:  550:    {
        2:  551:        CFE_EVS_SendEvent(EventID, CFE_EVS_ERROR,
        -:  552:                         "%s error: child task interface is broken: count = %d, index = %d",
        2:  553:                          CmdText, LocalQueueCount, FM_GlobalData.ChildWriteIndex);
        -:  554:
        -:  555:        /* Queue broken - cannot add another command */
        2:  556:        Result = FALSE;
        -:  557:    }
        -:  558:    else
        -:  559:    {
       18:  560:        CFE_PSP_MemSet(&FM_GlobalData.ChildQueue[FM_GlobalData.ChildWriteIndex],
        -:  561:                       0, sizeof(FM_ChildQueueEntry_t));
        -:  562:
        -:  563:        /* OK to add another command to the queue */
       18:  564:        Result = TRUE;
        -:  565:    }
        -:  566:
       22:  567:    return(Result);
        -:  568:
        -:  569:} /* End FM_VerifyChildTask */
        -:  570:
        -:  571:
        -:  572:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  573:/*                                                                 */
        -:  574:/* FM utility function -- invoke child task command processor      */
        -:  575:/*                                                                 */
        -:  576:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  577:
       19:  578:void FM_InvokeChildTask(void)
        -:  579:{
        -:  580:
        -:  581:    /* Update callers queue index */
       19:  582:    FM_GlobalData.ChildWriteIndex++;
        -:  583:
       19:  584:    if (FM_GlobalData.ChildWriteIndex >= FM_CHILD_QUEUE_DEPTH)
        -:  585:    {
        1:  586:        FM_GlobalData.ChildWriteIndex = 0;
        -:  587:    }
        -:  588:
        -:  589:    /* Prevent parent/child updating queue counter at same time */
       19:  590:    OS_MutSemTake(FM_GlobalData.ChildQueueCountSem);
       19:  591:    FM_GlobalData.ChildQueueCount++;
       19:  592:    OS_MutSemGive(FM_GlobalData.ChildQueueCountSem);
        -:  593:
        -:  594:    /* Does the child task still have a semaphore? */
       19:  595:    if (FM_GlobalData.ChildSemaphore != FM_CHILD_SEM_INVALID)
        -:  596:    {
        -:  597:        /* Signal child task to call command handler */
       19:  598:        OS_CountSemGive(FM_GlobalData.ChildSemaphore);
        -:  599:    }
        -:  600:
       19:  601:    return;
        -:  602:
        -:  603:} /* End of FM_InvokeChildTask */
        -:  604:
        -:  605:
        -:  606:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  607:/*                                                                 */
        -:  608:/* FM utility function -- add path separator to directory name     */
        -:  609:/*                                                                 */
        -:  610:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  611:
        5:  612:void FM_AppendPathSep(char *Directory, uint32 BufferSize)
        -:  613:{
        -:  614:    uint32 StringLength;
        -:  615:
        -:  616:    /*
        -:  617:    **  Previous verification tests ensure that the length of
        -:  618:    **   the string is both non-zero and less than the size
        -:  619:    **   of the string buffer.
        -:  620:    */
        5:  621:    StringLength = strlen(Directory);
        -:  622:
        -:  623:    /* Do nothing if string already ends with a path separator */
        5:  624:    if (Directory[StringLength - 1] != '/')
        -:  625:    {
        -:  626:        /* Verify that string buffer has room for a path separator */
        1:  627:        if (StringLength < (BufferSize - 1))
        -:  628:        {
        1:  629:            strcat(Directory, "/");
        -:  630:        }
        -:  631:    }
        -:  632:
        5:  633:    return;
        -:  634:
        -:  635:} /* End of FM_AppendPathSep */
        -:  636:
        -:  637:
        -:  638:/************************/
        -:  639:/*  End of File Comment */
        -:  640:/************************/
