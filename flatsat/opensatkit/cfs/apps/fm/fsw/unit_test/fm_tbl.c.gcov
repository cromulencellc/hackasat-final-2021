        -:    0:Source:../src/fm_tbl.c
        -:    0:Programs:5
        -:    1:/*
        -:    2:** $Id: fm_tbl.c.gcov 1.4.1.1 2017/01/25 00:20:21EST mdeschu Exp  $
        -:    3:**
        -:    4:**  Copyright (c) 2007-2014 United States Government as represented by the 
        -:    5:**  Administrator of the National Aeronautics and Space Administration. 
        -:    6:**  All Other Rights Reserved.  
        -:    7:**
        -:    8:**  This software was created at NASA's Goddard Space Flight Center.
        -:    9:**  This software is governed by the NASA Open Source Agreement and may be 
        -:   10:**  used, distributed and modified only pursuant to the terms of that 
        -:   11:**  agreement.
        -:   12:**
        -:   13:** Title: File Manager (FM) Application Table Definitions
        -:   14:**
        -:   15:** Purpose: Provides functions for the initialization, validation, and
        -:   16:**          management of the FM File System Free Space Table
        -:   17:**
        -:   18:** Author: Susanne L. Strege, Code 582 NASA GSFC
        -:   19:**
        -:   20:** Notes:
        -:   21:**
        -:   22:**
        -:   23:*/
        -:   24:
        -:   25:#include "cfe.h"
        -:   26:#include "fm_platform_cfg.h"
        -:   27:#include "fm_msg.h"
        -:   28:#include "fm_tbl.h"
        -:   29:#include "fm_events.h"
        -:   30:#include "cfs_utils.h"
        -:   31:
        -:   32:#include <string.h>
        -:   33:
        -:   34:
        -:   35:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   36:/*                                                                 */
        -:   37:/* FM table function -- startup initialization                     */
        -:   38:/*                                                                 */
        -:   39:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   40:
        5:   41:int32 FM_TableInit(void)
        -:   42:{
        -:   43:    int32 Status;
        -:   44:
        -:   45:    /* Initialize file system free space table pointer */
        5:   46:    FM_GlobalData.FreeSpaceTablePtr = (FM_FreeSpaceTable_t *) NULL;
        -:   47:
        -:   48:    /* Register the file system free space table - this must succeed! */
        5:   49:    Status = CFE_TBL_Register(&FM_GlobalData.FreeSpaceTableHandle,
        -:   50:                               FM_TABLE_CFE_NAME, sizeof(FM_FreeSpaceTable_t),
        -:   51:                             (CFE_TBL_OPT_SNGL_BUFFER | CFE_TBL_OPT_LOAD_DUMP),
        -:   52:                             (CFE_TBL_CallbackFuncPtr_t) FM_ValidateTable);
        -:   53:
        5:   54:    if (Status == CFE_SUCCESS)
        -:   55:    {
        -:   56:        /* Make an attempt to load the default table data - OK if this fails */
        4:   57:        CFE_TBL_Load(FM_GlobalData.FreeSpaceTableHandle,
        -:   58:                     CFE_TBL_SRC_FILE, FM_TABLE_DEF_NAME);
        -:   59:
        -:   60:        /* Allow cFE a chance to dump, update, etc. */
        4:   61:        FM_AcquireTablePointers();
        -:   62:    }
        -:   63:
        5:   64:    return(Status);
        -:   65:
        -:   66:} /* End FM_TableInit */
        -:   67:
        -:   68:
        -:   69:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   70:/*                                                                 */
        -:   71:/* FM table function -- table data verification                    */
        -:   72:/*                                                                 */
        -:   73:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   74:
        6:   75:int32 FM_ValidateTable(void *TableData)
        -:   76:{
        6:   77:    FM_FreeSpaceTable_t *TablePtr = (FM_FreeSpaceTable_t *) TableData;
        6:   78:    int32  Result = CFE_SUCCESS;
        -:   79:    int32  NameLength;
        -:   80:    int32  i;
        -:   81:
        6:   82:    int32 CountGood   = 0;
        6:   83:    int32 CountBad    = 0;
        6:   84:    int32 CountUnused = 0;
        -:   85:
        -:   86:    /*
        -:   87:    ** Free space table data verification
        -:   88:    **
        -:   89:    ** -- table entries must be enabled or disabled or unused
        -:   90:    **
        -:   91:    ** -- enabled table entries may be disabled by command
        -:   92:    ** -- disabled table entries may be enabled by command
        -:   93:    ** -- unused table entries cannot be modified by command
        -:   94:    **
        -:   95:    ** -- enabled or disabled entries must have a valid file system name
        -:   96:    **
        -:   97:    ** -- file system name for unused entries is ignored
        -:   98:    */
       54:   99:    for (i = 0; i < FM_TABLE_ENTRY_COUNT; i++)
        -:  100:    {
        -:  101:        /* Validate file system name if state is enabled or disabled */
       98:  102:        if ((TablePtr->FileSys[i].State == FM_TABLE_ENTRY_ENABLED) ||
       44:  103:            (TablePtr->FileSys[i].State == FM_TABLE_ENTRY_DISABLED))
        -:  104:        {
        -:  105:            /* Search file system name buffer for a string terminator */
       95:  106:            for (NameLength = 0; NameLength < OS_MAX_PATH_LEN; NameLength++)
        -:  107:            {
       94:  108:                if (TablePtr->FileSys[i].Name[NameLength] == '\0')
        -:  109:                {
        5:  110:                    break;
        -:  111:                }
        -:  112:            }
        -:  113:
        6:  114:            if (NameLength == 0)
        -:  115:            {
        -:  116:                /* Error - must have a non-zero file system name length */
        1:  117:                CountBad++;
        -:  118:
        -:  119:                /* Send event describing first error only*/
        1:  120:                if (CountBad == 1)
        -:  121:                {
        1:  122:                    CFE_EVS_SendEvent(FM_TABLE_VERIFY_ERR_EID, CFE_EVS_ERROR,
        -:  123:                       "Free Space Table verify error: index = %d, empty name string", (int)i);
        -:  124:                }
        -:  125:            }
        5:  126:            else if (NameLength == OS_MAX_PATH_LEN)
        -:  127:            {
        -:  128:                /* Error - file system name does not have a string terminator */
        1:  129:                CountBad++;
        -:  130:
        -:  131:                /* Send event describing first error only*/
        1:  132:                if (CountBad == 1)
        -:  133:                {
        1:  134:                    CFE_EVS_SendEvent(FM_TABLE_VERIFY_ERR_EID, CFE_EVS_ERROR,
        -:  135:                       "Free Space Table verify error: index = %d, name too long", (int)i);
        -:  136:                }
        -:  137:            }
        4:  138:            else if (!CFS_IsValidFilename(TablePtr->FileSys[i].Name, NameLength))
        -:  139:            {
        -:  140:                /* Error - file system name has invalid characters */
        2:  141:                CountBad++;
        -:  142:
        -:  143:                /* Send event describing first error only*/
        2:  144:                if (CountBad == 1)
        -:  145:                {
        1:  146:                    CFE_EVS_SendEvent(FM_TABLE_VERIFY_ERR_EID, CFE_EVS_ERROR,
        -:  147:                       "Free Space Table verify error: index = %d, invalid name = %s",
        -:  148:                                      (int)i, TablePtr->FileSys[i].Name);
        -:  149:                }
        -:  150:            }
        -:  151:            else
        -:  152:            {
        -:  153:                /* Maintain count of good in-use table entries */
        2:  154:                CountGood++;
        -:  155:            }
        -:  156:        }
       42:  157:        else if (TablePtr->FileSys[i].State == FM_TABLE_ENTRY_UNUSED)
        -:  158:        {
        -:  159:            /* Ignore (but count) unused table entries */
       35:  160:            CountUnused++;
        -:  161:        }
        -:  162:        else
        -:  163:        {
        -:  164:            /* Error - table entry state is invalid */
        7:  165:            CountBad++;
        -:  166:
        -:  167:            /* Send event describing first error only*/
        7:  168:            if (CountBad == 1)
        -:  169:            {
        1:  170:                CFE_EVS_SendEvent(FM_TABLE_VERIFY_ERR_EID, CFE_EVS_ERROR,
        -:  171:                   "Table verify error: index = %d, invalid state = %d",
        -:  172:                                  (int)i, (int)TablePtr->FileSys[i].State);
        -:  173:            }
        -:  174:        }
        -:  175:    }
        -:  176:
        -:  177:    /* Display verify results */
        6:  178:    CFE_EVS_SendEvent(FM_TABLE_VERIFY_EID, CFE_EVS_INFORMATION,
        -:  179:       "Free Space Table verify results: good entries = %d, bad = %d, unused = %d",
        -:  180:                      (int)CountGood, (int)CountBad, (int)CountUnused);
        -:  181:
        6:  182:    if (CountBad != 0)
        -:  183:    {
        4:  184:        Result = FM_TABLE_VALIDATION_ERR;
        -:  185:    }
        -:  186:
        6:  187:    return(Result);
        -:  188:
        -:  189:} /* End FM_ValidateTable */
        -:  190:
        -:  191:
        -:  192:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  193:/*                                                                 */
        -:  194:/* FM table function -- acquire table data pointer                 */
        -:  195:/*                                                                 */
        -:  196:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  197:
        7:  198:void FM_AcquireTablePointers(void)
        -:  199:{
        -:  200:    int32  Status;
        -:  201:
        -:  202:    /* Allow cFE an opportunity to make table updates */
        7:  203:    CFE_TBL_Manage(FM_GlobalData.FreeSpaceTableHandle);
        -:  204:
        -:  205:    /* Acquire pointer to file system free space table */
        7:  206:    Status = CFE_TBL_GetAddress((void *) &FM_GlobalData.FreeSpaceTablePtr,
        7:  207:                                          FM_GlobalData.FreeSpaceTableHandle);
        -:  208:
        7:  209:    if (Status == CFE_TBL_ERR_NEVER_LOADED)
        -:  210:    {
        -:  211:        /* Make sure we don't try to use the empty table buffer */
        1:  212:        FM_GlobalData.FreeSpaceTablePtr = (FM_FreeSpaceTable_t *) NULL;
        -:  213:    }
        -:  214:
        7:  215:    return;
        -:  216:
        -:  217:} /* End FM_AcquireTablePointers */
        -:  218:
        -:  219:
        -:  220:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  221:/*                                                                 */
        -:  222:/* FM table function -- release table data pointer                 */
        -:  223:/*                                                                 */
        -:  224:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  225:
        2:  226:void FM_ReleaseTablePointers(void)
        -:  227:{
        -:  228:    /* Release pointer to file system free space table */
        2:  229:    CFE_TBL_ReleaseAddress(FM_GlobalData.FreeSpaceTableHandle);
        -:  230:
        -:  231:    /* Prevent table pointer use while released */
        2:  232:    FM_GlobalData.FreeSpaceTablePtr = (FM_FreeSpaceTable_t *) NULL;
        -:  233:
        2:  234:    return;
        -:  235:
        -:  236:} /* End FM_ReleaseTablePointers */
        -:  237:
        -:  238:
        -:  239:/************************/
        -:  240:/*  End of File Comment */
        -:  241:/************************/
        -:  242:
