        -:    0:Source:/home/aschoening/pwned/apps/cs/fsw/src/cs_app_cmds.c
        -:    0:Graph:cs_app_cmds.gcno
        -:    0:Data:cs_app_cmds.gcda
        -:    0:Runs:1
        -:    0:Programs:2
        -:    1:/************************************************************************
        -:    2: ** File:
        -:    3: **   $Id: cs_app_cmds.c.gcov 1.6 2012/09/14 17:20:40EDT aschoeni Exp  $
        -:    4: **
        -:    5: ** Purpose: 
        -:    6: **   The CFS Checksum (CS) Application's commands for checking App
        -:    7: **
        -:    8: **   $Log: cs_app_cmds.c.gcov  $
        -:    8: **   Revision 1.6 2012/09/14 17:20:40EDT aschoeni 
        -:    8: **   Updated for fix to disable error in def table command
        -:    9: **   Revision 1.7 2011/09/06 14:47:24EDT jmdagost 
        -:   10: **   Corrected recompute event message text.
        -:   11: **   Revision 1.6 2010/03/29 16:57:35EDT jmdagost 
        -:   12: **   Modified enable/disable commands to update the definitions table as well as the results table.
        -:   13: **   Revision 1.5 2008/08/01 13:28:34EDT njyanchik 
        -:   14: **   Using Table name length instead of app name length
        -:   15: **   Revision 1.4 2008/07/30 17:19:29BST njyanchik 
        -:   16: **   Fixed more naming issues in apps
        -:   17: **   Revision 1.3 2008/07/28 19:05:29BST njyanchik 
        -:   18: **   Fix some errors with the version number update
        -:   19: **   Revision 1.2 2008/07/28 16:56:07BST njyanchik 
        -:   20: **   Fixed app/table naming issues in event messages
        -:   21: **   Revision 1.1 2008/07/23 15:27:03BST njyanchik 
        -:   22: **   Initial revision
        -:   23: **   Member added to project c:/MKSDATA/MKS-REPOSITORY/CFS-REPOSITORY/cs/fsw/src/project.pj
        -:   24: **
        -:   25: ** 
        -:   26: *************************************************************************/
        -:   27:
        -:   28:/*************************************************************************
        -:   29: **
        -:   30: ** Include section
        -:   31: **
        -:   32: **************************************************************************/
        -:   33:#include "cfe.h"
        -:   34:#include "cs_app.h"
        -:   35:#include "cs_events.h"
        -:   36:#include "cs_utils.h"
        -:   37:#include "cs_compute.h"
        -:   38:#include "cs_app_cmds.h"
        -:   39:/**************************************************************************
        -:   40: **
        -:   41: ** Functions
        -:   42: **
        -:   43: **************************************************************************/
        -:   44:
        -:   45:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   46:/*                                                                 */
        -:   47:/* CS Disable background checking of App command                   */
        -:   48:/*                                                                 */
        -:   49:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   50:void CS_DisableAppCmd(CFE_SB_MsgPtr_t MessagePtr)
function CS_DisableAppCmd called 1 returned 100% blocks executed 100%
        1:   51:{
        -:   52:    /* command verification variables */
        1:   53:    uint16              ExpectedLength = sizeof(CS_NoArgsCmd_t);
        -:   54:    
        -:   55:    /* Verify command packet length */
        1:   56:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   57:    {
        1:   58:        CS_AppData.AppCSState = CS_STATE_DISABLED;
        1:   59:        CS_ZeroAppTempValues();
call    0 returned 100%
        -:   60:        
        1:   61:        CFE_EVS_SendEvent (CS_DISABLE_APP_INF_EID,
call    0 returned 100%
        -:   62:                           CFE_EVS_INFORMATION,
        -:   63:                           "Checksumming of App is Disabled");
        1:   64:        CS_AppData.CmdCounter++;
        -:   65:    }
        -:   66:    return;
        -:   67:} /* End of CS_DisableAppCmd () */
        -:   68:
        -:   69:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   70:/*                                                                 */
        -:   71:/* CS Enable background checking of App command                    */
        -:   72:/*                                                                 */
        -:   73:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   74:void CS_EnableAppCmd(CFE_SB_MsgPtr_t MessagePtr)
function CS_EnableAppCmd called 4 returned 100% blocks executed 100%
        4:   75:{
        -:   76:    /* command verification variables */
        4:   77:    uint16              ExpectedLength = sizeof(CS_NoArgsCmd_t);
        -:   78:    
        -:   79:    /* Verify command packet length */
        4:   80:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   81:    {
        4:   82:        CS_AppData.AppCSState = CS_STATE_ENABLED;
        -:   83:        
        4:   84:        CFE_EVS_SendEvent (CS_ENABLE_APP_INF_EID,
call    0 returned 100%
        -:   85:                           CFE_EVS_INFORMATION,
        -:   86:                           "Checksumming of App is Enabled");
        4:   87:        CS_AppData.CmdCounter++;
        -:   88:    }
        -:   89:    return;
        -:   90:} /* End of CS_EnableAppCmd () */
        -:   91:
        -:   92:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   93:/*                                                                 */
        -:   94:/* CS Report the baseline checksum of an entry in the App table    */
        -:   95:/*                                                                 */
        -:   96:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   97:void CS_ReportBaselineAppCmd(CFE_SB_MsgPtr_t MessagePtr)
function CS_ReportBaselineAppCmd called 3 returned 100% blocks executed 100%
        3:   98:{
        -:   99:    /* command verification variables */
        3:  100:    uint16                                  ExpectedLength = sizeof(CS_AppNameCmd_t);
        -:  101:    
        -:  102:    CS_AppNameCmd_t                       * CmdPtr;
        -:  103:    CS_Res_App_Table_Entry_t              * ResultsEntry; 
        -:  104:    uint32                                  Baseline;
        -:  105:    
        -:  106:    /* Verify command packet length */
        3:  107:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  108:    {
        3:  109:        CmdPtr = (CS_AppNameCmd_t *) MessagePtr;
        -:  110:        
        3:  111:        CmdPtr -> Name[OS_MAX_API_NAME - 1] = '\0';
        3:  112:        if ( CS_GetAppResTblEntryByName(&ResultsEntry, CmdPtr -> Name))
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        -:  113:        {
        2:  114:            if (ResultsEntry -> ComputedYet == TRUE)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  115:            {
        1:  116:                Baseline = ResultsEntry -> ComparisonValue;
        1:  117:                CFE_EVS_SendEvent (CS_BASELINE_APP_INF_EID,
call    0 returned 100%
        -:  118:                                   CFE_EVS_INFORMATION,
        -:  119:                                   "Report baseline of app %s is 0x%08X", 
        -:  120:                                   CmdPtr -> Name,
        -:  121:                                   Baseline);
        -:  122:            }
        -:  123:            else
        -:  124:            {
        1:  125:                CFE_EVS_SendEvent (CS_NO_BASELINE_APP_INF_EID,
call    0 returned 100%
        -:  126:                                   CFE_EVS_INFORMATION,
        -:  127:                                   "Report baseline of app %s has not been computed yet", 
        -:  128:                                   CmdPtr -> Name);   
        -:  129:            }
        2:  130:            CS_AppData.CmdCounter++;
        -:  131:        }
        -:  132:        else
        -:  133:        {
        1:  134:            CFE_EVS_SendEvent (CS_BASELINE_INVALID_NAME_APP_ERR_EID,
call    0 returned 100%
        -:  135:                               CFE_EVS_ERROR,
        -:  136:                               "App report baseline failed, app %s not found",
        -:  137:                               CmdPtr -> Name);
        1:  138:            CS_AppData.CmdErrCounter++;
        -:  139:        }
        -:  140:    }
        -:  141:    return;
        -:  142:} /* End of CS_ReportBaselineAppCmd () */
        -:  143:
        -:  144:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  145:/*                                                                 */
        -:  146:/* CS Recompute the baseline of an entry in the App table cmd      */
        -:  147:/*                                                                 */
        -:  148:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  149:void CS_RecomputeBaselineAppCmd (CFE_SB_MsgPtr_t MessagePtr)
function CS_RecomputeBaselineAppCmd called 5 returned 100% blocks executed 100%
        5:  150:{
        -:  151:    /* command verification variables */
        5:  152:    uint16                                  ExpectedLength = sizeof(CS_AppNameCmd_t);
        -:  153:    
        -:  154:    uint32                                  ChildTaskID;
        -:  155:    int32                                   Status;
        -:  156:    CS_AppNameCmd_t                       * CmdPtr;
        -:  157:    CS_Res_App_Table_Entry_t              * ResultsEntry;
        -:  158:    
        -:  159:    /* Verify command packet length */
        -:  160:    
        5:  161:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  162:    {
        5:  163:        CmdPtr = (CS_AppNameCmd_t *) MessagePtr;
        -:  164:        
        5:  165:        if (CS_AppData.ChildTaskInUse == FALSE)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:  166:        {
        -:  167:            
        -:  168:            /* make sure the entry is a valid number and is defined in the table */
        -:  169:            
        3:  170:            CmdPtr -> Name[OS_MAX_API_NAME - 1] = '\0';
        -:  171:            
        3:  172:            if (CS_GetAppResTblEntryByName(&ResultsEntry, CmdPtr -> Name))
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        -:  173:            {
        -:  174:                /* There is no child task running right now, we can use it*/
        2:  175:                CS_AppData.ChildTaskInUse                = TRUE;
        2:  176:                CS_AppData.OneShotTaskInUse              = FALSE;
        -:  177:                
        -:  178:                /* fill in child task variables */
        2:  179:                CS_AppData.ChildTaskTable                = CS_APP_TABLE;
        -:  180:                                
        -:  181:                
        2:  182:                CS_AppData.RecomputeAppEntryPtr = ResultsEntry;
        -:  183:                
        2:  184:                Status= CFE_ES_CreateChildTask(&ChildTaskID,
call    0 returned 100%
        -:  185:                                               CS_RECOMP_APP_TASK_NAME,
        -:  186:                                               CS_RecomputeAppChildTask,
        -:  187:                                               NULL,
        -:  188:                                               CFE_ES_DEFAULT_STACK_SIZE,
        -:  189:                                               CS_CHILD_TASK_PRIORITY,
        -:  190:                                               0);
        2:  191:                if (Status ==CFE_SUCCESS)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  192:                {
        1:  193:                    CFE_EVS_SendEvent (CS_RECOMPUTE_APP_STARTED_DBG_EID,
call    0 returned 100%
        -:  194:                                       CFE_EVS_DEBUG,
        -:  195:                                       "Recompute baseline of app %s started", 
        -:  196:                                       CmdPtr -> Name);
        1:  197:                    CS_AppData.CmdCounter++;
        -:  198:                }
        -:  199:                else/* child task creation failed */
        -:  200:                {
        1:  201:                    CFE_EVS_SendEvent (CS_RECOMPUTE_APP_CREATE_CHDTASK_ERR_EID,
call    0 returned 100%
        -:  202:                                       CFE_EVS_ERROR,
        -:  203:                                       "Recompute baseline of app %s failed, CFE_ES_CreateChildTask returned: 0x%08X",
        -:  204:                                       CmdPtr -> Name,
        -:  205:                                       Status);
        1:  206:                    CS_AppData.CmdErrCounter++;
        1:  207:                    CS_AppData.ChildTaskInUse = FALSE;
        -:  208:                }
        -:  209:            }
        -:  210:            else
        -:  211:            {
        1:  212:                CFE_EVS_SendEvent (CS_RECOMPUTE_UNKNOWN_NAME_APP_ERR_EID,
call    0 returned 100%
        -:  213:                                   CFE_EVS_ERROR,
        -:  214:                                   "App recompute baseline failed, app %s not found",
        -:  215:                                   CmdPtr -> Name);
        1:  216:                CS_AppData.CmdErrCounter++;
        -:  217:            }
        -:  218:        }
        -:  219:        else
        -:  220:        {
        -:  221:            /*send event that we can't start another task right now */
        2:  222:            CFE_EVS_SendEvent (CS_RECOMPUTE_APP_CHDTASK_ERR_EID,
call    0 returned 100%
        -:  223:                               CFE_EVS_ERROR,
        -:  224:                                "App recompute baseline for app %s failed: a child task is in use",
        -:  225:                               CmdPtr -> Name);
        2:  226:            CS_AppData.CmdErrCounter++;
        -:  227:        }
        -:  228:    }
        -:  229:    return;
        -:  230:}/* end CS_RecomputeBaselineAppCmd */
        -:  231:
        -:  232:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  233:/*                                                                 */
        -:  234:/* CS Disable a specific entry in the App table command            */
        -:  235:/*                                                                 */
        -:  236:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  237:void CS_DisableNameAppCmd(CFE_SB_MsgPtr_t MessagePtr)
function CS_DisableNameAppCmd called 4 returned 100% blocks executed 100%
        4:  238:{
        -:  239:    /* command verification variables */
        4:  240:    uint16                                 ExpectedLength = sizeof(CS_AppNameCmd_t);
        -:  241:    CS_AppNameCmd_t                      * CmdPtr;
        -:  242:     
        -:  243:    CS_Res_App_Table_Entry_t             * ResultsEntry;
        -:  244:    CS_Def_App_Table_Entry_t             * DefinitionEntry; 
        -:  245:    
        -:  246:    /* Verify command packet length */
        4:  247:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength)  )
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  248:    {
        4:  249:        CmdPtr = (CS_AppNameCmd_t *) MessagePtr;
        -:  250:        
        4:  251:        CmdPtr -> Name[OS_MAX_API_NAME - 1] = '\0';
        -:  252:        
        4:  253:        if ( CS_GetAppResTblEntryByName( &ResultsEntry, CmdPtr -> Name))
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  254:        {
        -:  255:            
        2:  256:            ResultsEntry -> State = CS_STATE_DISABLED;
        2:  257:            ResultsEntry -> TempChecksumValue = 0;
        2:  258:            ResultsEntry -> ByteOffset = 0;
        -:  259:            
        2:  260:            CFE_EVS_SendEvent (CS_DISABLE_APP_NAME_INF_EID,
call    0 returned 100%
        -:  261:                               CFE_EVS_INFORMATION,
        -:  262:                               "Checksumming of app %s is Disabled", 
        -:  263:                               CmdPtr -> Name);
        -:  264:            
        2:  265:            if ( CS_GetAppDefTblEntryByName(&DefinitionEntry, CmdPtr -> Name))
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  266:            {
        1:  267:                DefinitionEntry -> State = CS_STATE_DISABLED;
        1:  268:                CFE_TBL_Modified(CS_AppData.DefAppTableHandle);
call    0 returned 100%
        -:  269:            }
        -:  270:            else 
        -:  271:            {
        1:  272:                CFE_EVS_SendEvent (CS_DISABLE_APP_DEF_NOT_FOUND_DBG_EID,
call    0 returned 100%
        -:  273:                                   CFE_EVS_DEBUG,
        -:  274:                                   "CS unable to update apps definition table for entry %s", 
        -:  275:                                   CmdPtr -> Name);
        -:  276:            }
        -:  277:            
        2:  278:            CS_AppData.CmdCounter++;
        -:  279:        }
        -:  280:        else
        -:  281:        {
        2:  282:            CFE_EVS_SendEvent (CS_DISABLE_APP_UNKNOWN_NAME_ERR_EID,
call    0 returned 100%
        -:  283:                               CFE_EVS_ERROR,
        -:  284:                               "App disable app command failed, app %s not found",
        -:  285:                               CmdPtr -> Name);
        2:  286:            CS_AppData.CmdErrCounter++;
        -:  287:        }
        -:  288:    }
        -:  289:    return;
        -:  290:} /* End of CS_DisableNameAppCmd () */
        -:  291:
        -:  292:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  293:/*                                                                 */
        -:  294:/* CS Enable a specific entry in the App table command             */
        -:  295:/*                                                                 */
        -:  296:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  297:void CS_EnableNameAppCmd(CFE_SB_MsgPtr_t MessagePtr)
function CS_EnableNameAppCmd called 4 returned 100% blocks executed 100%
        4:  298:{
        -:  299:    /* command verification variables */
        4:  300:    uint16                                 ExpectedLength = sizeof(CS_AppNameCmd_t);
        -:  301:    CS_AppNameCmd_t                      * CmdPtr;
        -:  302:    
        -:  303:    CS_Res_App_Table_Entry_t             * ResultsEntry; 
        -:  304:    CS_Def_App_Table_Entry_t             * DefinitionEntry; 
        -:  305:
        -:  306:    /* Verify command packet length */
        4:  307:    if ( CS_VerifyCmdLength (MessagePtr,ExpectedLength) )
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  308:    {
        4:  309:        CmdPtr = (CS_AppNameCmd_t *) MessagePtr;
        -:  310:        
        4:  311:        CmdPtr -> Name[OS_MAX_API_NAME -1 ] = '\0';
        -:  312:     
        4:  313:        if ( CS_GetAppResTblEntryByName(&ResultsEntry,CmdPtr -> Name))
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  314:        {
        2:  315:            ResultsEntry -> State = CS_STATE_ENABLED;
        -:  316:            
        2:  317:            CFE_EVS_SendEvent (CS_ENABLE_APP_NAME_INF_EID,
call    0 returned 100%
        -:  318:                               CFE_EVS_INFORMATION,
        -:  319:                               "Checksumming of app %s is Enabled", 
        -:  320:                                CmdPtr -> Name);
        -:  321:            
        2:  322:            if ( CS_GetAppDefTblEntryByName(&DefinitionEntry, CmdPtr -> Name))
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  323:            {
        1:  324:                DefinitionEntry -> State = CS_STATE_ENABLED;
        1:  325:                CFE_TBL_Modified(CS_AppData.DefAppTableHandle);
call    0 returned 100%
        -:  326:            }
        -:  327:            else 
        -:  328:            {
        1:  329:                CFE_EVS_SendEvent (CS_ENABLE_APP_DEF_NOT_FOUND_DBG_EID,
call    0 returned 100%
        -:  330:                                   CFE_EVS_DEBUG,
        -:  331:                                   "CS unable to update apps definition table for entry %s", 
        -:  332:                                   CmdPtr -> Name);
        -:  333:            }
        -:  334:            
        2:  335:            CS_AppData.CmdCounter++;
        -:  336:        }
        -:  337:        else
        -:  338:        {
        2:  339:            CFE_EVS_SendEvent (CS_ENABLE_APP_UNKNOWN_NAME_ERR_EID,
call    0 returned 100%
        -:  340:                               CFE_EVS_ERROR,
        -:  341:                               "App enable app command failed, app %s not found",
        -:  342:                               CmdPtr -> Name);
        2:  343:            CS_AppData.CmdErrCounter++;
        -:  344:        }
        -:  345:    }
        -:  346:    return;
        -:  347:} /* End of CS_EnableNameAppCmd () */
        -:  348:
        -:  349:/************************/
        -:  350:/*  End of File Comment */
        -:  351:/************************/
