        -:    0:Source:../src/mm_mem8.c
        -:    0:Programs:7
        -:    1:/*************************************************************************
        -:    2:** File:
        -:    3:**   $Id: mm_mem8.c.gcov 1.3 2016/10/31 22:10:57EDT mdeschu Exp  $
        -:    4:**
        -:    5:**   Copyright © 2007-2014 United States Government as represented by the 
        -:    6:**   Administrator of the National Aeronautics and Space Administration. 
        -:    7:**   All Other Rights Reserved.  
        -:    8:**
        -:    9:**   This software was created at NASA's Goddard Space Flight Center.
        -:   10:**   This software is governed by the NASA Open Source Agreement and may be 
        -:   11:**   used, distributed and modified only pursuant to the terms of that 
        -:   12:**   agreement.
        -:   13:**
        -:   14:** Purpose: 
        -:   15:**   Provides CFS Memory Manager functions that are used
        -:   16:**   for the conditionally compiled MM_MEM8 optional memory type.
        -:   17:**
        -:   18:**   $Log: mm_mem8.c.gcov  $
        -:   18:**   Revision 1.3 2016/10/31 22:10:57EDT mdeschu 
        -:   18:**   Update gcov results, README and log file for MM unit tests for 2.4.1
        -:   19:**   Revision 1.2 2016/10/30 00:48:50EDT mdeschu 
        -:   20:**   Use c-style casts to clean up compiler warnings in calls to CFE_EVS_SendEvent
        -:   21:**   Revision 1.1 2015/07/28 12:21:57EDT rperera 
        -:   22:**   Initial revision
        -:   23:**   Member added to project /CFS-APPs-PROJECT/mm/fsw/src/project.pj
        -:   24:**   Revision 1.15 2015/04/14 15:29:01EDT lwalling 
        -:   25:**   Removed unnecessary backslash characters from string format definitions
        -:   26:**   Revision 1.14 2015/04/06 15:41:23EDT lwalling 
        -:   27:**   Verify results of calls to PSP memory read/write/copy/set functions
        -:   28:**   Revision 1.13 2015/04/02 09:10:45EDT lwalling 
        -:   29:**   Added Valid = TRUE for MM_LoadMem8/16/32FromFile()
        -:   30:**   Revision 1.12 2015/04/01 11:41:14EDT lwalling 
        -:   31:**   Add ptr type to ioBuffer name, fix code indentation, change if (=) to if (==)
        -:   32:**   Revision 1.11 2015/03/30 17:33:59EDT lwalling 
        -:   33:**   Create common process to maintain and report last action statistics
        -:   34:**   Revision 1.10 2015/03/20 14:16:24EDT lwalling 
        -:   35:**   Add last peek/poke/fill command data value to housekeeping telemetry
        -:   36:**   Revision 1.9 2015/03/02 14:26:29EST sstrege 
        -:   37:**   Added copyright information
        -:   38:**   Revision 1.8 2011/12/05 15:17:20EST jmdagost 
        -:   39:**   Added check for zero bytes read from file load (with event message on error)
        -:   40:**   Revision 1.7 2011/06/23 12:02:37EDT jmdagost 
        -:   41:**   Corrected type for local BytesRead, initialized local variables.
        -:   42:**   Revision 1.6 2010/11/29 13:35:21EST jmdagost 
        -:   43:**   Replaced ifdef tests with if-true tests.
        -:   44:**   Revision 1.5 2009/06/12 14:37:28EDT rmcgraw 
        -:   45:**   DCR82191:1 Changed OS_Mem function calls to CFE_PSP_Mem
        -:   46:**   Revision 1.4 2008/09/05 14:24:02EDT dahardison 
        -:   47:**   Updated references to local HK variables
        -:   48:**   Revision 1.3 2008/05/19 15:23:28EDT dahardison 
        -:   49:**   Version after completion of unit testing
        -:   50:** 
        -:   51:*************************************************************************/
        -:   52:
        -:   53:/*************************************************************************
        -:   54:** Includes
        -:   55:*************************************************************************/
        -:   56:#include "mm_mem8.h"
        -:   57:#include "mm_app.h"
        -:   58:#include "mm_events.h"
        -:   59:#include "mm_utils.h"
        -:   60:#include <string.h>
        -:   61:
        -:   62:/*
        -:   63:** The code in this file is optional.
        -:   64:** See mm_platform_cfg.h to set this compiler switch.
        -:   65:*/
        -:   66:#if (MM_OPT_CODE_MEM8_MEMTYPE == TRUE)
        -:   67:
        -:   68:/*************************************************************************
        -:   69:** External Data
        -:   70:*************************************************************************/
        -:   71:extern MM_AppData_t MM_AppData; 
        -:   72:
        -:   73:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   74:/*                                                                 */
        -:   75:/* Load memory from a file using only 8 bit wide writes            */
        -:   76:/*                                                                 */
        -:   77:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */   
        6:   78:boolean MM_LoadMem8FromFile(uint32                   FileHandle, 
        -:   79:                            char                    *FileName,
        -:   80:                            MM_LoadDumpFileHeader_t *FileHeader, 
        -:   81:                            uint32                   DestAddress)
        -:   82:{
        6:   83:   uint32    i              = 0;
        6:   84:   int32     ReadLength     = 0;
        6:   85:   int32     PSP_Status     = CFE_PSP_SUCCESS;
        6:   86:   int32     BytesProcessed = 0;
        6:   87:   int32     BytesRemaining = FileHeader->NumOfBytes;
        6:   88:   uint8    *DataPointer8   = (uint8 *) DestAddress;
        6:   89:   uint8    *ioBuffer8      = (uint8 *) &MM_AppData.LoadBuffer[0];
        6:   90:   uint32    SegmentSize    = MM_MAX_LOAD_DATA_SEG;
        6:   91:   boolean   Valid          = FALSE;
        -:   92:
       19:   93:   while (BytesRemaining != 0)
        -:   94:   {
        7:   95:      if (BytesRemaining < MM_MAX_LOAD_DATA_SEG)
        -:   96:      {
        5:   97:         SegmentSize = BytesRemaining;
        -:   98:      }
        -:   99:
        -:  100:      /* Read file data into i/o buffer */
        7:  101:      if ((ReadLength = OS_read(FileHandle, ioBuffer8, SegmentSize)) != SegmentSize)
        -:  102:      {
        1:  103:         MM_AppData.ErrCounter++;
        1:  104:         BytesRemaining = 0;
        1:  105:         CFE_EVS_SendEvent(MM_OS_READ_ERR_EID, CFE_EVS_ERROR,
        -:  106:                           "OS_read error received: RC = 0x%08X Expected = %d File = '%s'", 
        -:  107:                           (unsigned int)ReadLength, (int)SegmentSize, FileName);
        -:  108:      }
        -:  109:      else
        -:  110:      {
        -:  111:         /* Load memory from i/o buffer using 8 bit wide writes */
      832:  112:         for (i = 0; i < SegmentSize; i++)
        -:  113:         {
      411:  114:            PSP_Status = CFE_PSP_MemWrite8((uint32) DataPointer8, ioBuffer8[i]);
      411:  115:            if (PSP_Status == CFE_PSP_SUCCESS)
        -:  116:            {
      410:  117:               DataPointer8++;
        -:  118:            }
        -:  119:            else
        -:  120:            {
        -:  121:               /* CFE_PSP_MemWrite8 error */
        1:  122:               BytesRemaining = 0;
        1:  123:               MM_AppData.ErrCounter++;
        1:  124:               CFE_EVS_SendEvent(MM_PSP_WRITE_ERR_EID, CFE_EVS_ERROR,
        -:  125:                                "PSP write memory error: RC=0x%08X, Address=0x%08X, MemType=MEM8", 
        -:  126:                                 (unsigned int)PSP_Status, (unsigned int) DataPointer8);
        -:  127:               /* Stop load segment loop */
        1:  128:               break;
        -:  129:            }
        -:  130:         }
        -:  131:
        6:  132:         if (PSP_Status == CFE_PSP_SUCCESS)
        -:  133:         {
        5:  134:            BytesProcessed += SegmentSize;
        5:  135:            BytesRemaining -= SegmentSize;
        -:  136:               
        -:  137:            /* Prevent CPU hogging between load segments */
        5:  138:            if (BytesRemaining != 0)
        -:  139:            {
        1:  140:               MM_SegmentBreak();
        -:  141:            }
        -:  142:         }
        -:  143:      }      
        -:  144:   }
        -:  145:   
        -:  146:   /* Update last action statistics */
        6:  147:   if (BytesProcessed == FileHeader->NumOfBytes)
        -:  148:   {
        4:  149:      Valid = TRUE;
        4:  150:      MM_AppData.LastAction = MM_LOAD_FROM_FILE;
        4:  151:      MM_AppData.MemType    = MM_MEM8;
        4:  152:      MM_AppData.Address    = DestAddress;
        4:  153:      MM_AppData.BytesProcessed = BytesProcessed;
        4:  154:      strncpy(MM_AppData.FileName, FileName, OS_MAX_PATH_LEN);
        -:  155:   }      
        -:  156:
        6:  157:   return(Valid);   
        -:  158:    
        -:  159:} /* end MM_LoadMem8FromFile */
        -:  160:
        -:  161:
        -:  162:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  163:/*                                                                 */
        -:  164:/* Dump the requested number of bytes from memory to a file using  */
        -:  165:/* only 8 bit wide reads                                           */
        -:  166:/*                                                                 */
        -:  167:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */   
        7:  168:boolean MM_DumpMem8ToFile(uint32                    FileHandle, 
        -:  169:                          char                     *FileName, 
        -:  170:                          MM_LoadDumpFileHeader_t  *FileHeader)
        -:  171:{
        7:  172:   boolean   Valid          = TRUE;
        7:  173:   int32     OS_Status      = OS_ERROR;
        7:  174:   int32     PSP_Status     = CFE_PSP_SUCCESS;
        7:  175:   uint32    i              = 0;
        7:  176:   uint32    BytesProcessed = 0;
        7:  177:   uint32    BytesRemaining = FileHeader->NumOfBytes;
        7:  178:   uint8    *DataPointer8   = (uint8 *) FileHeader->SymAddress.Offset;
        7:  179:   uint8    *ioBuffer8      = (uint8 *) &MM_AppData.DumpBuffer[0];
        7:  180:   uint32    SegmentSize    = MM_MAX_DUMP_DATA_SEG;
        -:  181:   
       22:  182:   while (BytesRemaining != 0)
        -:  183:   {
        8:  184:      if (BytesRemaining < MM_MAX_DUMP_DATA_SEG)
        -:  185:      {
        6:  186:         SegmentSize = BytesRemaining;
        -:  187:      }
        -:  188:
        -:  189:      /* Load RAM data into i/o buffer */
      830:  190:      for (i = 0; i < SegmentSize; i++)
        -:  191:      {
      408:  192:         if ((PSP_Status = CFE_PSP_MemRead8((uint32) DataPointer8, &ioBuffer8[i])) == CFE_PSP_SUCCESS)
        -:  193:         {
      407:  194:            DataPointer8++;
        -:  195:         }
        -:  196:         else
        -:  197:         {
        -:  198:            /* CFE_PSP_MemRead8 error */
        1:  199:            Valid = FALSE;
        1:  200:            BytesRemaining = 0;
        1:  201:            MM_AppData.ErrCounter++;
        1:  202:            CFE_EVS_SendEvent(MM_PSP_READ_ERR_EID, CFE_EVS_ERROR,
        -:  203:               "PSP read memory error: RC=0x%08X, Src=0x%08X, Tgt=0x%08X, Type=MEM8", 
        1:  204:                (unsigned int)PSP_Status, (unsigned int) DataPointer8, (unsigned int) &ioBuffer8[i]);
        -:  205:            /* Stop load i/o buffer loop */
        1:  206:            break;
        -:  207:         }
        -:  208:      }
        -:  209:
        -:  210:      /* Check for error loading i/o buffer */
        8:  211:      if (PSP_Status == CFE_PSP_SUCCESS)
        -:  212:      {
        -:  213:         /* Write i/o buffer contents to file */
        7:  214:         if ((OS_Status = OS_write(FileHandle, ioBuffer8, SegmentSize)) == SegmentSize)
        -:  215:         {
        -:  216:            /* Update process counters */
        6:  217:            BytesRemaining -= SegmentSize;         
        6:  218:            BytesProcessed += SegmentSize;         
        -:  219:
        -:  220:            /* Prevent CPU hogging between dump segments */
        6:  221:            if (BytesRemaining != 0)
        -:  222:            {
        1:  223:               MM_SegmentBreak();
        -:  224:            }
        -:  225:         }
        -:  226:         else
        -:  227:         {
        -:  228:            /* OS_write error */
        1:  229:            Valid = FALSE;
        1:  230:            BytesRemaining = 0;
        1:  231:            MM_AppData.ErrCounter++;
        1:  232:            CFE_EVS_SendEvent(MM_OS_WRITE_EXP_ERR_EID, CFE_EVS_ERROR,
        -:  233:                              "OS_write error received: RC = 0x%08X Expected = %d File = '%s'", 
        -:  234:                               (unsigned int)OS_Status, (int)SegmentSize, FileName);
        -:  235:         }
        -:  236:      }
        -:  237:   }
        -:  238:
        7:  239:   if (Valid)
        -:  240:   {
        -:  241:       /* Update last action statistics */
        5:  242:       MM_AppData.LastAction = MM_DUMP_TO_FILE;
        5:  243:       MM_AppData.MemType    = MM_MEM8;
        5:  244:       MM_AppData.Address    = FileHeader->SymAddress.Offset;
        5:  245:       strncpy(MM_AppData.FileName, FileName, OS_MAX_PATH_LEN);
        5:  246:       MM_AppData.BytesProcessed = BytesProcessed;
        -:  247:   }    
        -:  248:
        7:  249:   return(Valid);
        -:  250:
        -:  251:} /* end MM_DumpMem8ToFile */
        -:  252:
        -:  253:
        -:  254:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  255:/*                                                                 */
        -:  256:/* Fill memory with the command specified fill pattern using only  */
        -:  257:/* 8 bit wide writes                                               */
        -:  258:/*                                                                 */
        -:  259:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */   
        4:  260:void MM_FillMem8(uint32           DestAddress, 
        -:  261:                 MM_FillMemCmd_t *CmdPtr)
        -:  262:{
        4:  263:   uint32    i              = 0;
        4:  264:   int32     PSP_Status     = CFE_PSP_SUCCESS;
        4:  265:   uint32    BytesProcessed = 0;
        4:  266:   uint32    BytesRemaining = CmdPtr->NumOfBytes;
        4:  267:   uint8     FillPattern8   = (uint8) CmdPtr->FillPattern;
        4:  268:   uint8    *DataPointer8   = (uint8 *) DestAddress;
        4:  269:   uint32    SegmentSize    = MM_MAX_FILL_DATA_SEG;
        -:  270:
       13:  271:   while (BytesRemaining != 0)
        -:  272:   {
        -:  273:      /* Set size of next segment */
        5:  274:      if (BytesRemaining < MM_MAX_FILL_DATA_SEG)
        -:  275:      {
        3:  276:         SegmentSize = BytesRemaining;
        -:  277:      }
        -:  278:
        -:  279:      /* Fill next segment */
      816:  280:      for (i = 0; i < SegmentSize; i++)
        -:  281:      {
      404:  282:         PSP_Status = CFE_PSP_MemWrite8((uint32) DataPointer8, FillPattern8);
      404:  283:         if (PSP_Status == CFE_PSP_SUCCESS)
        -:  284:         {
      403:  285:            DataPointer8++;
        -:  286:         }
        -:  287:         else
        -:  288:         {
        -:  289:            /* CFE_PSP_MemWrite8 error */
        1:  290:            BytesRemaining = 0;
        1:  291:            MM_AppData.ErrCounter++;
        1:  292:            CFE_EVS_SendEvent(MM_PSP_WRITE_ERR_EID, CFE_EVS_ERROR,
        -:  293:                             "PSP write memory error: RC=0x%08X, Address=0x%08X, MemType=MEM8", 
        -:  294:                              (unsigned int)PSP_Status, (unsigned int)DataPointer8);
        -:  295:            /* Stop fill segment loop */
        1:  296:            break;
        -:  297:         }
        -:  298:      }
        -:  299:
        5:  300:      if (PSP_Status == CFE_PSP_SUCCESS)
        -:  301:      {
        -:  302:         /* Update process counters */
        4:  303:         BytesRemaining -= SegmentSize;         
        4:  304:         BytesProcessed += SegmentSize;         
        -:  305:
        -:  306:         /* Prevent CPU hogging between fill segments */
        4:  307:         if (BytesRemaining != 0)
        -:  308:         {
        1:  309:            MM_SegmentBreak();
        -:  310:         }
        -:  311:      }
        -:  312:   }
        -:  313:
        -:  314:   /* Update last action statistics */
        4:  315:   if (BytesProcessed == CmdPtr->NumOfBytes)
        -:  316:   {
        3:  317:      MM_AppData.LastAction = MM_FILL;
        3:  318:      MM_AppData.MemType    = MM_MEM8;
        3:  319:      MM_AppData.Address    = DestAddress;
        3:  320:      MM_AppData.DataValue  = (uint32) FillPattern8;
        3:  321:      MM_AppData.BytesProcessed = BytesProcessed;
        -:  322:   }
        -:  323:
        4:  324:   return;
        -:  325:   
        -:  326:}/* End MM_FillMem8 */
        -:  327:
        -:  328:
        -:  329:#endif /* MM_OPT_CODE_MEM8_MEMTYPE */
        -:  330:
        -:  331:/************************/
        -:  332:/*  End of File Comment */
        -:  333:/************************/
