		/*************************************************************************
		** File:
		**   $Id: md_cmds.c.gcov 1.3 2012/01/09 19:28:01EST aschoeni Exp  $
		**
		** Purpose: 
		**   Functions for processing individual CFS Memory Dwell commands
		**
		**   $Log: md_cmds.c.gcov  $
		**   Revision 1.3 2012/01/09 19:28:01EST aschoeni 
		**   Updated to support newest versions
		**   Revision 1.8 2012/01/09 18:01:10EST aschoeni 
		**   Added ability to not force 32 bit alignment
		**   Revision 1.7 2009/09/30 17:31:07EDT aschoeni 
		**   Added message if a dwell is jammed to zero in an enabled table
		**   Revision 1.6 2009/09/30 15:53:32EDT aschoeni 
		**   Updated Enable command to output event if table with a delay of 0 is enabled.
		**   Revision 1.5 2009/09/30 14:13:40EDT aschoeni 
		**   Added check to make sure signature is null terminated.
		**   Revision 1.4 2009/01/12 14:33:23EST nschweis 
		**   Removed debug statements from source code.  CPID 4688:1.
		**   Revision 1.3 2008/12/10 14:59:57EST nschweis 
		**   Modified to test changes in DCR #2624: Keep Memory Dwell in sync with Table Services buffer.
		**   Modified code so that state changes triggered by Start, Stop, Jam, and Set Signature commands are
		**   copied to the Table Services buffer.
		**   CPID 2624:1.
		**   Revision 1.2 2008/08/07 16:55:08EDT nsschweiss 
		**   Changed name of included file from cfs_lib.h to cfs_utils.h.
		**   Revision 1.1 2008/07/02 13:47:00EDT nsschweiss 
		**   Initial revision
		**   Member added to project c:/MKSDATA/MKS-REPOSITORY/CFS-REPOSITORY/md/fsw/src/project.pj
		** 
		*************************************************************************/
		
		/*************************************************************************
		** Includes
		*************************************************************************/
		#include "md_cmds.h"
		#include "md_utils.h"
		/* Need to include md_msg.h for command type definitions */
		#include "md_msg.h"
		#include "md_platform_cfg.h"
		#include <string.h>
		#include "md_app.h"
		#include "md_events.h"
		#include "cfs_utils.h"
		#include "md_dwell_tbl.h"
		
		/* Global Data */
		extern MD_AppData_t MD_AppData;
		
		/******************************************************************************/
		
		void MD_ProcessStartCmd(CFE_SB_MsgPtr_t MessagePtr)
          11    {
          11        uint16              TableId;
          11        uint16              TableIndex;
          11        MD_CmdStartStop_t  *Start;
          11        boolean             AnyTablesInMask;
		    
          11        AnyTablesInMask         = FALSE;
		    
          11        Start = (MD_CmdStartStop_t *  ) MessagePtr;
		
		    /*  Preview tables specified by command:                   */
		    /*  Check that there's at least one valid table specified. */
          55        for (TableId=1; TableId <= MD_NUM_DWELL_TABLES; TableId++)
		    {
          44            if (MD_TableIsInMask(TableId, Start->TableMask))
		        {
		            /* At least one valid Table Id is in Mask */
          15                AnyTablesInMask=TRUE;
		        }
		    }
		    
		    /* 
		    ** Handle specified operation.
		    ** If nominal, start each of the specified tables.
		    ** If error case was encountered, issue error message. 
		    */
          11        if (AnyTablesInMask)
		    {  /* Handle Nominal Case */
		            
          50            for (TableId=1; TableId <= MD_NUM_DWELL_TABLES; TableId++)
		        {
          40               if (MD_TableIsInMask(TableId, Start->TableMask))
		           {
		              /* Setting Countdown to 1 causes a dwell packet to be issued */
		              /* on first wakeup call received. */
          15                  TableIndex = TableId-1;
          15                  MD_AppData.MD_DwellTables[ TableIndex ].Enabled = MD_DWELL_STREAM_ENABLED;
          15                  MD_AppData.MD_DwellTables[ TableIndex ].Countdown = 1;
          15                  MD_AppData.MD_DwellTables[ TableIndex ].CurrentEntry = 0;
          15                  MD_AppData.MD_DwellTables[ TableIndex ].PktOffset = 0;
		                          
		              /* Change value in Table Services managed buffer */
          15                  MD_UpdateTableEnabledField (TableIndex, MD_DWELL_STREAM_ENABLED);
		
		              /* If table contains a rate of zero, report that no processing will occur */
          15                  if (MD_AppData.MD_DwellTables[ TableIndex ].Rate == 0)
		              {
           8                      CFE_EVS_SendEvent(MD_ZERO_RATE_CMD_INF_EID, CFE_EVS_INFORMATION, 
		                  "Dwell Table %d is enabled with a delay of zero so no processing will occur", TableId); 
		              }       
		           }
		        }
		        
          10            MD_AppData.CmdCounter++;
		
          10            CFE_EVS_SendEvent(MD_START_DWELL_INF_EID,  CFE_EVS_INFORMATION,
		        "Start Dwell Table command processed successfully for table mask 0x%04X",
		                                                      Start->TableMask);
		    }
		    else /* No valid table id's specified in mask */
		    {
           1            MD_AppData.ErrCounter++;
           1            CFE_EVS_SendEvent(MD_EMPTY_TBLMASK_ERR_EID,  CFE_EVS_ERROR,
		       "%s command rejected because no tables were specified in table mask (0x%04X)",
		        "Start Dwell", Start->TableMask );
		    }
          11        return;
		    
		}  /* End of MD_ProcessStartCmd */
		 
		/******************************************************************************/
		
		void MD_ProcessStopCmd(CFE_SB_MsgPtr_t MessagePtr)
           5    {
           5        MD_CmdStartStop_t  *Stop;
           5        uint16              TableId;
           5        uint16              TableIndex;
           5        boolean             AnyTablesInMask;
		    
           5        AnyTablesInMask   =  FALSE;
           5        Stop              = (MD_CmdStartStop_t *  ) MessagePtr;
		
		    
          25        for (TableId=1; TableId <= MD_NUM_DWELL_TABLES; TableId++)
		    {
          20            if (MD_TableIsInMask(TableId, Stop->TableMask))
		        {
          10                TableIndex = TableId-1;
          10                MD_AppData.MD_DwellTables[ TableIndex ].Enabled = MD_DWELL_STREAM_DISABLED;
          10                MD_AppData.MD_DwellTables[ TableIndex ].Countdown = 0;
          10                MD_AppData.MD_DwellTables[ TableIndex ].CurrentEntry = 0;
          10                MD_AppData.MD_DwellTables[ TableIndex ].PktOffset = 0;
		            
          10                AnyTablesInMask=TRUE;
		            
		            /* Change value in Table Services managed buffer */
          10                MD_UpdateTableEnabledField (TableIndex, MD_DWELL_STREAM_DISABLED);
		            
		        }
		    }
		    
           5        if (AnyTablesInMask)
		    {
           4            CFE_EVS_SendEvent(MD_STOP_DWELL_INF_EID,  CFE_EVS_INFORMATION,
		            "Stop Dwell Table command processed successfully for table mask 0x%04X",
		             Stop->TableMask );
		
           4            MD_AppData.CmdCounter++;
		    }
		    else
		    {
           1            CFE_EVS_SendEvent(MD_EMPTY_TBLMASK_ERR_EID,  CFE_EVS_ERROR,
		       "%s command rejected because no tables were specified in table mask (0x%04X)",
		        "Stop Dwell", Stop->TableMask );
           1            MD_AppData.ErrCounter++;
		    }
           5        return;
		}  /* End of MD_ProcessStopCmd */
		 
		/******************************************************************************/
		
		void MD_ProcessJamCmd(CFE_SB_MsgPtr_t MessagePtr)
          22    {
		    /* Local variables */
          22        MD_CmdJam_t            *Jam = 0;
          22        boolean                 AllInputsValid = TRUE;
          22        uint32                  ResolvedAddr=0;
          22        MD_DwellControlEntry_t *DwellEntryPtr = 0; /* points to local task data */
          22        uint16                  EntryIndex = 0;
          22        uint8                   TableIndex = 0;
          22        CFS_SymAddr_t           NewDwellAddress;
		            
		    /*
		    **  Cast message to Jam Command.
		    */
          22        Jam         = (MD_CmdJam_t * ) MessagePtr;
		    
		    /* In case Dwell Address sym name isn't null terminated, do it now. */
          22        Jam->DwellAddress.SymName[OS_MAX_SYM_LEN - 1] = '\0';
		    
		    /*
		    **  Check that TableId and EntryId command arguments,
		    **  which are used as array indexes, are valid.
		    */
          22        if (  !MD_ValidTableId ( Jam->TableId) )
		    {        
           1            CFE_EVS_SendEvent(MD_INVALID_JAM_TABLE_ERR_EID, CFE_EVS_ERROR,
		         "Jam Cmd rejected due to invalid Tbl Id arg = %d (Expect 1.. %d)",
		          Jam->TableId, MD_NUM_DWELL_TABLES);
		
           1            AllInputsValid = FALSE;
		    }
          21        else if ( !MD_ValidEntryId ( Jam->EntryId))
		    {        
           1            CFE_EVS_SendEvent(MD_INVALID_ENTRY_ARG_ERR_EID, CFE_EVS_ERROR,
		         "Jam Cmd rejected due to invalid Entry Id arg = %d (Expect 1.. %d)",
		          Jam->EntryId, MD_DWELL_TABLE_SIZE);
		
           1            AllInputsValid = FALSE;
		    }
		    
		    /*
		    **  If all inputs checked so far are valid, continue.
		    */    
          22        if (AllInputsValid == TRUE)
		    {
          20            TableIndex  = Jam->TableId-1;
          20            EntryIndex  = Jam->EntryId-1;
		                
          20            DwellEntryPtr   = (MD_DwellControlEntry_t *) &MD_AppData.MD_DwellTables[TableIndex].Entry[EntryIndex];
		
          20            if (Jam->FieldLength == 0)
		        /*
		        **  Jam a null entry.  Set all entry fields to zero.
		        */    
		        {
		            /* Assign local values */
           1                DwellEntryPtr->ResolvedAddress = 0;
           1                DwellEntryPtr->Length          = 0;
           1                DwellEntryPtr->Delay           = 0;
		            
		            /* Update Table Services buffer */
           1                NewDwellAddress.Offset = 0;
           1                NewDwellAddress.SymName[0] = '\0';
           1                MD_UpdateTableDwellEntry (TableIndex, EntryIndex, 0, 0, NewDwellAddress);
		
		            /* Issue event */
           1                CFE_EVS_SendEvent(MD_JAM_NULL_DWELL_INF_EID, CFE_EVS_INFORMATION,
		            "Successful Jam of a Null Dwell Entry to Dwell Tbl#%d Entry #%d", 
		                           Jam->TableId, Jam->EntryId  );
		        } 
		        else
		        /*
		        **  Process non-null entry.
		        */   
		        { 
		            /*
		            **  Check that address and field length arguments pass all validity checks.
		            */    
		
		            /* Resolve and Validate Dwell Address */
          19                if (CFS_ResolveSymAddr(&Jam->DwellAddress,&ResolvedAddr) == FALSE)
		            {
		                /* If DwellAddress argument couldn't be resolved, issue error event */
           1                    CFE_EVS_SendEvent(MD_CANT_RESOLVE_JAM_ADDR_ERR_EID, 
		                                  CFE_EVS_ERROR,
		                                 "Jam Cmd rejected because symbolic address '%s' couldn't be resolved",
		                                  Jam->DwellAddress.SymName);
           1                    AllInputsValid = FALSE;
		            }
          18                else if (!MD_ValidFieldLength(Jam->FieldLength))
		            {        
           1                    CFE_EVS_SendEvent(MD_INVALID_LEN_ARG_ERR_EID, CFE_EVS_ERROR,
		                                 "Jam Cmd rejected due to invalid Field Length arg = %d (Expect 0,1,2,or 4)",
		                                  Jam->FieldLength);
           1                    AllInputsValid = FALSE;
		            }
          17                else if (!MD_ValidAddrRange(ResolvedAddr, Jam->FieldLength))
		            {
		                /* Issue event message that ResolvedAddr is invalid */
           1                    CFE_EVS_SendEvent(MD_INVALID_JAM_ADDR_ERR_EID, CFE_EVS_ERROR,
		                                 "Jam Cmd rejected because address 0x%08X is not in a valid range", 
		                                  ResolvedAddr);
           1                    AllInputsValid = FALSE;
		            }
		#if MD_ENFORCE_DWORD_ALIGN == 0
          16                else  if ((Jam->FieldLength == 4) && 
		                      CFS_Verify16Aligned(ResolvedAddr, (uint32)Jam->FieldLength) != TRUE)
		            {
           1                    CFE_EVS_SendEvent(MD_JAM_ADDR_NOT_16BIT_ERR_EID, CFE_EVS_ERROR,
		                                 "Jam Cmd rejected because address 0x%08X is not 16-bit aligned", 
		                                  ResolvedAddr);
           1                    AllInputsValid = FALSE;
		            }
		#else    
		            else  if ((Jam->FieldLength == 4) && 
		                      CFS_Verify32Aligned(ResolvedAddr, (uint32)Jam->FieldLength) != TRUE)
		            {
		                CFE_EVS_SendEvent(MD_JAM_ADDR_NOT_32BIT_ERR_EID, CFE_EVS_ERROR,
		                                 "Jam Cmd rejected because address 0x%08X is not 32-bit aligned", 
		                                  ResolvedAddr);
		                AllInputsValid = FALSE;
		            }
		#endif
          15                else  if ((Jam->FieldLength == 2) && CFS_Verify16Aligned(ResolvedAddr, (uint32)Jam->FieldLength) != TRUE)
		            {
           1                    CFE_EVS_SendEvent(MD_JAM_ADDR_NOT_16BIT_ERR_EID, CFE_EVS_ERROR,
		                                 "Jam Cmd rejected because address 0x%08X is not 16-bit aligned", 
		                                  ResolvedAddr);
           1                    AllInputsValid = FALSE;
		            }
		
		
          19                if (AllInputsValid == TRUE)
		            /* 
		            ** Perform Jam Operation : Copy Resolved DwellAddress, Length, and Delay to
		            ** local control structure.
		            */
		            {
		                /* Jam the new values into Application control structure */
          14                    DwellEntryPtr->ResolvedAddress = ResolvedAddr;
          14                    DwellEntryPtr->Length          = Jam->FieldLength;
          14                    DwellEntryPtr->Delay           = Jam->DwellDelay;
		                
		                /* Update values in Table Services buffer */
          14                    NewDwellAddress.Offset = Jam->DwellAddress.Offset;
		                
          14                    strncpy (NewDwellAddress.SymName, Jam->DwellAddress.SymName, OS_MAX_SYM_LEN);
		                
          14                    MD_UpdateTableDwellEntry (TableIndex, EntryIndex, Jam->FieldLength, Jam->DwellDelay, NewDwellAddress);
		            
		                /* Issue event */
          14                    CFE_EVS_SendEvent(MD_JAM_DWELL_INF_EID, CFE_EVS_INFORMATION,
		                          "Successful Jam to Dwell Tbl#%d Entry #%d", 
		                           Jam->TableId, Jam->EntryId  );
		            }
		            
		        } /* end else Process non-null entry */  
		          
		    } /* end if AllInputsValid */    
		    
		    /*
		    **  Handle bookkeeping.
		    */
          22        if (AllInputsValid == TRUE)
		    {
          15            MD_AppData.CmdCounter++;   
		                    
		        /* Update Dwell Table Control Info, including rate */
          15            MD_UpdateDwellControlInfo(TableIndex);
		
		        /* If table contains a rate of zero, and it enabled report that no processing will occur */
          15            if ((MD_AppData.MD_DwellTables[ TableIndex ].Rate == 0) &&
		            (MD_AppData.MD_DwellTables[ TableIndex ].Enabled == MD_DWELL_STREAM_ENABLED))
		        {
           1                CFE_EVS_SendEvent(MD_ZERO_RATE_CMD_INF_EID, CFE_EVS_INFORMATION, 
		            "Dwell Table %d is enabled with a delay of zero so no processing will occur", Jam->TableId); 
		        }
		    }
		    else
		    {
           7            MD_AppData.ErrCounter++;
		    }
		            
          22        return;
		    
		} /* End of MD_ProcessJamCmd */
		
		
		
		/******************************************************************************/
		#if MD_SIGNATURE_OPTION == 1   
		
		void MD_ProcessSignatureCmd(CFE_SB_MsgPtr_t MessagePtr)
		{
		    MD_CmdSetSignature_t  *SignatureCmd;
		    uint16                 TblId;
		    uint16                 StringLength;
		    
		    /*
		    **  Cast message to Set Signature Command.
		    */
		    SignatureCmd         = (MD_CmdSetSignature_t * ) MessagePtr;
		
		    TblId = SignatureCmd->TableId;
		
		    /*
		    **  Check for Null Termination of string
		    */
		    for(StringLength = 0; StringLength < MD_SIGNATURE_FIELD_LENGTH; StringLength++)
		    {
		       if(SignatureCmd->Signature[StringLength] == '\0')
		          break;
		    }
		
		    if (StringLength >= MD_SIGNATURE_FIELD_LENGTH)
		    {      
		        CFE_EVS_SendEvent(MD_INVALID_SIGNATURE_LENGTH_ERR_EID, CFE_EVS_ERROR,
		         "Set Signature cmd rejected due to invalid Signature length");
		          
		        MD_AppData.ErrCounter++;
		    }
		
		    /*
		    ** Check for valid TableId argument
		    */
		    else if (  !MD_ValidTableId ( TblId) )
		    {      
		        CFE_EVS_SendEvent(MD_INVALID_SIGNATURE_TABLE_ERR_EID, CFE_EVS_ERROR,
		         "Set Signature cmd rejected due to invalid Tbl Id arg = %d (Expect 1.. %d)",
		          TblId, MD_NUM_DWELL_TABLES);
		          
		        MD_AppData.ErrCounter++;
		    }
		
		    else
		    
		    /*
		    **  Handle nominal case.
		    */
		    {
		       /* Copy signature field to local dwell control structure */
		       strncpy(MD_AppData.MD_DwellTables[TblId-1].Signature, 
		             SignatureCmd->Signature, MD_SIGNATURE_FIELD_LENGTH);
		
		       /* Update signature in Table Services buffer */
		       MD_UpdateTableSignature(TblId-1,SignatureCmd->Signature);
		       
		       CFE_EVS_SendEvent(MD_SET_SIGNATURE_INF_EID, CFE_EVS_INFORMATION,
		                          "Successfully set signature for Dwell Tbl#%d to '%s'", 
		                           TblId, SignatureCmd->Signature  );
		
		       MD_AppData.CmdCounter++;
		    }
		    return;
		
		}
		
		#endif
		
		/************************/
		/*  End of File Comment */
		/************************/
