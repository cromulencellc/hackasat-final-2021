        -:    0:Source:../src/sc_utils.c
        -:    0:Programs:7
        -:    1: /*************************************************************************
        -:    2: ** File:
        -:    3: **   $Id: sc_utils.c.gcov 1.3 2016/10/15 16:18:09EDT mdeschu Exp  $
        -:    4: **
        -:    5: **  Copyright © 2007-2014 United States Government as represented by the 
        -:    6: **  Administrator of the National Aeronautics and Space Administration. 
        -:    7: **  All Other Rights Reserved.  
        -:    8: **
        -:    9: **  This software was created at NASA's Goddard Space Flight Center.
        -:   10: **  This software is governed by the NASA Open Source Agreement and may be 
        -:   11: **  used, distributed and modified only pursuant to the terms of that 
        -:   12: **  agreement. 
        -:   13: **
        -:   14: ** Purpose: 
        -:   15: **   This file contains the utilty functions for Stored Command
        -:   16: **
        -:   17: ** References:
        -:   18: **   Flight Software Branch C Coding Standard Version 1.2
        -:   19: **   CFS Development Standards Document
        -:   20: ** Notes:
        -:   21: **
        -:   22: **   $Log: sc_utils.c.gcov  $
        -:   22: **   Revision 1.3 2016/10/15 16:18:09EDT mdeschu 
        -:   22: **   Update gcov files with results from SC 2.5.0 unit testing.
        -:   23: **   Revision 1.2 2015/10/08 15:21:09EDT sstrege 
        -:   24: **   Restoration from MKS 2009 Trunk
        -:   25: **   Revision 1.11 2015/05/04 17:35:36EDT lwalling 
        -:   26: **   Include sc_msgids.h in sc_utils.c, fix compiler warning in SC_GetCurrentTime()
        -:   27: **   Revision 1.10 2015/05/04 16:43:34EDT lwalling 
        -:   28: **   Increment command error counter only for ground commands
        -:   29: **   Revision 1.9 2015/03/02 12:59:04EST sstrege 
        -:   30: **   Added copyright information
        -:   31: **   Revision 1.8 2011/05/25 16:43:06EDT lwalling 
        -:   32: **   Remove spurious non-printable character from function SC_ComputeAbsTime()
        -:   33: **   Revision 1.7 2011/05/19 15:27:54EDT lwalling 
        -:   34: **   Replace absolute time assignment with call to CFE_PSP_MemCpy()
        -:   35: **   Revision 1.6 2011/05/16 17:20:24EDT lwalling 
        -:   36: **   Add support for all endian types when extracting ATS time tags
        -:   37: **   Revision 1.5 2011/04/25 17:02:26EDT lwalling 
        -:   38: **   Re-wrote function SC_GetAtsEntryTime() without use of pointers that break strict-aliasing rules
        -:   39: **   Revision 1.4 2010/09/28 10:32:30EDT lwalling 
        -:   40: **   Update list of included header files
        -:   41: **   Revision 1.3 2010/03/26 18:03:49EDT lwalling 
        -:   42: **   Remove pad from ATS and RTS structures, change 32 bit ATS time to two 16 bit values
        -:   43: **   Revision 1.2 2009/01/05 08:26:59EST nyanchik 
        -:   44: **   Check in after code review changes
        -:   45: *************************************************************************/
        -:   46:
        -:   47:
        -:   48:/**************************************************************************
        -:   49: **
        -:   50: ** Include section
        -:   51: **
        -:   52: **************************************************************************/
        -:   53:
        -:   54:#include "cfe.h"
        -:   55:#include "sc_utils.h"
        -:   56:#include "sc_events.h"
        -:   57:#include "sc_msgids.h"
        -:   58:
        -:   59:/**************************************************************************
        -:   60: **
        -:   61: ** Functions
        -:   62: **
        -:   63: **************************************************************************/
        -:   64:
        -:   65:
        -:   66:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   67:/*                                                                 */
        -:   68:/* Get the Current time from CFE TIME                              */
        -:   69:/*                                                                 */
        -:   70:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        8:   71:void SC_GetCurrentTime(void)
        -:   72:{
        -:   73:    CFE_TIME_SysTime_t TempTime;
        -:   74:
        -:   75:    /* Use SC defined time */
        -:   76:    #if (SC_TIME_TO_USE == SC_USE_UTC)
        -:   77:        TempTime = CFE_TIME_GetUTC();
        -:   78:    #elif (SC_TIME_TO_USE == SC_USE_TAI)
        -:   79:        TempTime = CFE_TIME_GetTAI();
        -:   80:    #else
        -:   81:        /* Use cFE configured time */
        8:   82:        TempTime = CFE_TIME_GetTime();
        -:   83:    #endif
        -:   84:
        -:   85:    /* We don't care about subseconds */
        8:   86:    SC_AppData.CurrentTime = TempTime.Seconds;
        -:   87:    
        8:   88:} /* end of SC_GetCurrentTime */
        -:   89:
        -:   90:
     4137:   91:SC_AbsTimeTag_t SC_GetAtsEntryTime(SC_AtsEntryHeader_t *Entry)
        -:   92:{
        -:   93:    /*
        -:   94:    ** ATS Entry Header looks like this...
        -:   95:    **
        -:   96:    **    uint16 CmdNumber;
        -:   97:    **
        -:   98:    **    uint16 TimeTag1;
        -:   99:    **    uint16 TimeTag2;
        -:  100:    **
        -:  101:    **    uint8  CmdHeader[CFE_SB_CMD_HDR_SIZE];
        -:  102:    **
        -:  103:    ** The command packet data is variable length,
        -:  104:    **    only the command packet header is shown here.
        -:  105:    */
     4137:  106:    SC_AbsTimeTag_t AbsTimeTag = 0;
        -:  107:
        -:  108:    /* Store as bytes to avoid boundary, endian and strict-aliasing issues */
     4137:  109:    CFE_PSP_MemCpy(&AbsTimeTag, &Entry->TimeTag1, sizeof(SC_AbsTimeTag_t));
        -:  110:
     4137:  111:    return(AbsTimeTag);
        -:  112:
        -:  113:} /* End of SC_GetAtsEntryTime() */
        -:  114:
        -:  115:
        -:  116:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  117:/*                                                                 */
        -:  118:/* Compute Absolute time from relative time                       */
        -:  119:/*                                                                 */
        -:  120:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
       14:  121:SC_AbsTimeTag_t SC_ComputeAbsTime(uint16 RelTime)
        -:  122:{
        -:  123:    CFE_TIME_SysTime_t  AbsoluteTimeWSubs;
        -:  124:    CFE_TIME_SysTime_t  RelTimeWSubs;
        -:  125:    CFE_TIME_SysTime_t  ResultTimeWSubs;       
        -:  126:    /*
        -:  127:     ** get the current time
        -:  128:     */
       14:  129:    AbsoluteTimeWSubs.Seconds    = SC_AppData.CurrentTime;
       14:  130:    AbsoluteTimeWSubs.Subseconds = 0;
        -:  131:    
       14:  132:    RelTimeWSubs.Seconds    = RelTime;
       14:  133:    RelTimeWSubs.Subseconds = 0;    
        -:  134:    /*
        -:  135:     ** add the relative time the current time
        -:  136:     */
       14:  137:    ResultTimeWSubs = CFE_TIME_Add ( AbsoluteTimeWSubs, RelTimeWSubs);
        -:  138:    
        -:  139:    /* We don't need subseconds */
       14:  140:    return (ResultTimeWSubs.Seconds);
        -:  141:    
        -:  142:} /* end of SC_ComputeAbsTime */
        -:  143:
        -:  144:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  145:/*                                                                 */
        -:  146:/*  Compare absolute times                                         */
        -:  147:/*                                                                 */
        -:  148:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
     2091:  149:boolean SC_CompareAbsTime(SC_AbsTimeTag_t AbsTime1,
        -:  150:                          SC_AbsTimeTag_t AbsTime2)
        -:  151:{    
        -:  152:    boolean Status;
        -:  153:    CFE_TIME_SysTime_t Time1WSubs;
        -:  154:    CFE_TIME_SysTime_t Time2WSubs; 
        -:  155:    CFE_TIME_Compare_t Result;   
        -:  156:    
     2091:  157:    Time1WSubs.Seconds = AbsTime1;
     2091:  158:    Time1WSubs.Subseconds = 0;
        -:  159:
     2091:  160:    Time2WSubs.Seconds = AbsTime2;
     2091:  161:    Time2WSubs.Subseconds = 0;    
        -:  162:    
     2091:  163:    Result = CFE_TIME_Compare( Time1WSubs, Time2WSubs);
        -:  164:    
     2091:  165:   if ( Result == CFE_TIME_A_GT_B)
        -:  166:   {
       11:  167:        Status = TRUE;
        -:  168:   }
        -:  169:   else
        -:  170:   {
     2080:  171:        Status = FALSE;
        -:  172:   }
        -:  173:
     2091:  174:    return Status;
        -:  175:    
        -:  176:}/* end of SC_CompareAbsTime */
        -:  177:
        -:  178:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  179:/*                                                                 */
        -:  180:/* SC Verify the length of the command                             */
        -:  181:/*                                                                 */
        -:  182:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
       61:  183:boolean SC_VerifyCmdLength(CFE_SB_MsgPtr_t msg, 
        -:  184:                           uint16          ExpectedLength)
        -:  185:{
        -:  186:    CFE_SB_MsgId_t MessageID;
        -:  187:    uint16  CommandCode;
       61:  188:    boolean Result = TRUE;
       61:  189:    uint16  ActualLength = CFE_SB_GetTotalMsgLength(msg);
        -:  190:    
        -:  191:    /* Verify the command packet length */
       61:  192:    if (ExpectedLength !=  ActualLength)
        -:  193:    {
       12:  194:        CommandCode = CFE_SB_GetCmdCode(msg);
       12:  195:        MessageID =  CFE_SB_GetMsgId(msg);
        -:  196:        
       12:  197:        CFE_EVS_SendEvent(SC_LEN_ERR_EID,
        -:  198:                          CFE_EVS_ERROR,
        -:  199:                          "Invalid msg length: ID = 0x%04X, CC = %d, Len = %d, Expected = %d",
        -:  200:                          MessageID,
        -:  201:                          CommandCode,
        -:  202:                          ActualLength,
        -:  203:                          ExpectedLength);
       12:  204:        Result = FALSE;
       12:  205:        if (MessageID == SC_CMD_MID)
        -:  206:        {
       12:  207:            SC_AppData.CmdErrCtr++;
        -:  208:        }
        -:  209:    }    
       61:  210:    return(Result);
        -:  211:} /* End of SC_VerifyCmdLength */
        -:  212:
        -:  213:/************************/
        -:  214:/*  End of File Comment */
        -:  215:/************************/
