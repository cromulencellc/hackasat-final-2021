/**
  \mainpage
  <UL>
    <LI> \subpage cfscfrevhist
    <LI> \subpage cfscfintro
    <LI> \subpage cfscfovr
    <LI> \subpage cfscfopr
    <LI> \subpage cfscfcmds
    <LI> \subpage cfscftlm
    <LI> \subpage cfscftbl
    <LI> \subpage cfscfcfg
    <LI> \subpage cfscfcons
    <LI> \subpage cfscffaqs
  </UL>

**/

/**
  \page cfscfrevhist CFS CF User's Guide Revision History

  Filename:         cfs_cf.dox
  File version:     1.0
  Date:             October 14, 2010  
  History:          Initial Release
  
  Prev: \ref index "CF Table of Contents" <BR>
  Next: \ref cfscfintro
**/

/**
  \page cfscfintro CFS CF Introduction

  <H2> Scope </H2>

  This document provides a complete specification for the commands and telemetry
  associated with the CFS CFDP (CF) flight software application.  The document
  is intended primarily for users of the software (operations personnel, test
  engineers, and maintenance personnel).

  <H2> Acronyms </H2>

  <TABLE BORDER="1" CELLPADDING="2" WIDTH="60%">
  <TR><TD WIDTH="20%"> <B>Acronym</B> </TD> <TD WIDTH="40%"> <B>Description</B>                       </TD>
  <TR><TD WIDTH="20%"> API     </TD> <TD WIDTH="40%"> Application Programming Interface               </TD>
  <TR><TD WIDTH="20%"> App     </TD> <TD WIDTH="40%"> Flight Software Application                     </TD>
  <TR><TD WIDTH="20%"> ASIST   </TD> <TD WIDTH="40%"> Advanced Spacecraft Integration and System Test software </TD>
  <TR><TD WIDTH="20%"> CCSDS   </TD> <TD WIDTH="40%"> Consultative Committee for Space Data Systems   </TD>
  <TR><TD WIDTH="20%"> CFDP    </TD> <TD WIDTH="40%"> CCSDS File Delivery Protocol                    </TD>
  <TR><TD WIDTH="20%"> CF      </TD> <TD WIDTH="40%"> CFdp FSW Application                            </TD>
  <TR><TD WIDTH="20%"> CFE     </TD> <TD WIDTH="40%"> Core Flight Executive                           </TD>
  <TR><TD WIDTH="20%"> CFS     </TD> <TD WIDTH="40%"> Core Flight System                              </TD>
  <TR><TD WIDTH="20%"> Cmd     </TD> <TD WIDTH="40%"> Command                                         </TD>
  <TR><TD WIDTH="20%"> EOF     </TD> <TD WIDTH="40%"> End Of File                                     </TD>
  <TR><TD WIDTH="20%"> ES      </TD> <TD WIDTH="40%"> cFE Executive Services                          </TD>
  <TR><TD WIDTH="20%"> FSW     </TD> <TD WIDTH="40%"> Flight Software                                 </TD>
  <TR><TD WIDTH="20%"> GSFC    </TD> <TD WIDTH="40%"> Goddard Space Flight Center                     </TD>
  <TR><TD WIDTH="20%"> HK      </TD> <TD WIDTH="40%"> Housekeeping                                    </TD>
  <TR><TD WIDTH="20%"> HW, H/W </TD> <TD WIDTH="40%"> Hardware                                        </TD>
  <TR><TD WIDTH="20%"> ID      </TD> <TD WIDTH="40%"> Identifier/Identification                       </TD>
  <TR><TD WIDTH="20%"> ITOS    </TD> <TD WIDTH="40%"> Integrated Test and Operations System           </TD>
  <TR><TD WIDTH="20%"> Mbps    </TD> <TD WIDTH="40%"> Mega bits per second                            </TD> 
  <TR><TD WIDTH="20%"> MBytes  </TD> <TD WIDTH="40%"> Mega bytes                                      </TD> 
  <TR><TD WIDTH="20%"> MD      </TD> <TD WIDTH="40%"> Meta Data                                       </TD>
  <TR><TD WIDTH="20%"> MIB     </TD> <TD WIDTH="40%"> Message Information Base                        </TD>   
  <TR><TD WIDTH="20%"> OS      </TD> <TD WIDTH="40%"> Operating System                                </TD>
  <TR><TD WIDTH="20%"> OSAL    </TD> <TD WIDTH="40%"> Operating System Abstraction Layer              </TD>
  <TR><TD WIDTH="20%"> PDU     </TD> <TD WIDTH="40%"> Protocol Data Unit                              </TD>
  <TR><TD WIDTH="20%"> Pkts    </TD> <TD WIDTH="40%"> Packets                                         </TD>
  <TR><TD WIDTH="20%"> SB      </TD> <TD WIDTH="40%"> Software Bus Service                            </TD>
  <TR><TD WIDTH="20%"> SC      </TD> <TD WIDTH="40%"> Stored Commands task                            </TD>
  <TR><TD WIDTH="20%"> SW, S/W </TD> <TD WIDTH="40%"> Software                                        </TD>
  <TR><TD WIDTH="20%"> TBD     </TD> <TD WIDTH="40%"> To Be Determined                                </TD>
  <TR><TD WIDTH="20%"> TBL     </TD> <TD WIDTH="40%"> Table                                           </TD>
  <TR><TD WIDTH="20%"> TCP     </TD> <TD WIDTH="40%"> Transmission Control Protocol                   </TD>
  <TR><TD WIDTH="20%"> TLM     </TD> <TD WIDTH="40%"> Telemetry                                       </TD>
  <TR><TD WIDTH="20%"> TO      </TD> <TD WIDTH="40%"> Telemetry Output Task                           </TD>
  <TR><TD WIDTH="20%"> UDP     </TD> <TD WIDTH="40%"> User Datagram Protocol                          </TD>
  </TABLE>

  Prev: \ref cfscfrevhist <BR>
  Next: \ref cfscfovr
**/

/**
  \page cfscfovr CFS CF Overview
  
  The CF application is a flight software application that is responsible for 
  transmitting and receiving files. It is a CFS application which is designed to
  interface to the Core Flight Executive (cFE).
    
  CF is a highly configurable application that is designed to be used on a wide
  range of flight missions. CF obtains its initial configuration through a
  configuration table and its platform and mission configuration files. The
  table contains default configuration settings and is loaded during CF
  initialization. The platform and mission configuration files are compile-time
  configuration parameters.

  To transfer files using CFDP, the CF application must communicate with a CFDP
  compliant peer. CF may be configured to have any number of peers.The ASIST and 
  ITOS ground systems contain a compliant peer that may be used for flight to 
  ground (and ground to flight) transfers. 

  CF sends and receives file information and file-data in Protocol Data Units
  (PDUs) that are compliant with the CFDP standard protocol defined in the CCSDS
  727.0-B-4 Blue Book. The PDUs are transferred to and from the CF application
  via CCSDS packets on the software bus. The system must be configured to get 
  the PDU packets from the peer to the software bus (and vice-versa). 
  
  On a typical spacecraft using the cFE, science files and engineering files are
  continuously being created and queued for downlink. When transmission begins,
  the files are converted into a series of PDUs by CF, one after another
  essentially creating a continuous stream of file-data PDUs.
  
  There are special features listed in the CFDP standard that are not applicable
  to flight software and are therefore not supported by this version of CF. See 
  the constraints section of this document for more information.
  
     
  \section cfscfovrdsn CF Design Overview 
  
  CF is an event driven, single threaded application that wakes up when one of
  the following four messages are received on its software bus pipe. Ground
  command, Housekeeping Request command, Incoming PDU or the Wake-up command.
  The Wake-up command tells CF to do file transaction processing. This command
  is typically sent periodically by the scheduler. The amount of
  file-transaction processing that is executed when this command is received, is
  configurable through the table parameter engine-cycles per wake-up.
  
  For simplicity, the examples through-out this document refer to a typical
  operational scenario whereby the peer to the CF application is located on the
  ground. The CF applications knows only of incoming file transactions and
  outgoing file transactions. The terms uplink, downlink and playback are
  often used, but only apply when the peer is located on the ground. CF may be
  configured to have more than one peer. One peer may be located onboard the 
  spacecraft while another is located on the ground.
  
  
  \section cfscfovreng Engine
  
  The CF application has a single internal core referred to as the engine. The
  engine is capable of transmitting and receiving a configurable number of
  transactions simultaneously.The engine builds outgoing Protocol Data Units
  (PDUs) and interprets the incoming PDUs. It handles all details regarding the
  CFDP standard protocol which is defined in the CCSDS 727.0-B-4 Blue Book. The
  engine processes the file transactions when it is 'cycled'. The number of
  engine cycles per wake up is a configuration parameter defined in the table.
  At most one PDU will be sent on a single engine cycle. 
  Typically, the peer node also has an engine. When CF is transferring files to 
  and from the ground, the peer is sometimes referred to as the ground engine. 
  When faults and timeouts occur, it is important to indicate which engine
  detected the event.
  

  \section cfscfovrstr Starting a Transaction
  
  To transfer a file from the ground to the spacecraft, a 'put' request is given
  to the ground engine. There is no ground command telling CF to 'get' a file.
  The first indication to CF that an uplink transaction has started, is the
  receipt of the first PDU sent by the ground and received by CF. 
  
  To transfer a file from the spacecraft to the ground, a playback file, ground
  command is sent to CF. This ground command translates into a 'put' request to
  the flight engine.

  The CFDP protocol does not support the concept of a 'get' request. The request
  to transfer a file is always made with a 'put' request at the source peer
  (i.e. where the file is located).  
  

  \section cfscfovrtrc Transaction Class

  All transfers are sent and received in one of two modes, class 1 or class 2.
  The CF application is capable of sending and receiving in class 1 and class 2.
  Class 1 transfers are similar to UDP in that they send the data once and
  expect no feedback from the peer. Class 2 transfers are more reliable and
  attempt to fill in data that may have been dropped on the first attempt. 
  Class 2 transfers are analogous to TCP. 


  \section cfscfovrqen Queue Entries

  The CF application keeps track of files in queue entries. There is one queue
  entry per transaction. The queue entries contain information such as filename
  and path, priority, class, channel etc. about each transaction. For incoming
  file transactions, the queue entry starts on the incoming active queue and is
  moved to the incoming history queue when the transaction is complete. For
  outgoing transactions, all queue entries start out on the pending queue (in
  response to a playback file command for example). The queue entry is then
  moved to the outgoing active queue when the transaction begins and to the
  history queue when complete.
  

  \section cfscfovrque Queues
  
  The CF application tracks pending transactions, active transactions and
  completed transactions in its queues. For downlink (or outgoing) transactions
  there are three queues per channel, a pending queue, an active queue and a
  history queue. All queues hold queue entries that are described in the 'Queue
  Entries' section of this document. When a request to downlink a file is
  received, a queue entry is created and placed on the pending queue. When the
  transaction begins, the corresponding queue entry is moved from the pending
  queue to the active queue. After the transaction completes, (whether
  successful or not) the queue entry is moved from the active queue to the
  history queue. The history queue has a fixed depth, defined by the user in the
  CF configuration table. If a transaction is added when the history queue is
  full, the oldest queue entry is deleted.
  
  For uplink (or incoming) transactions there are two queues, an active queue
  and a history queue. Uplink transactions do not have a pending queue as with
  outgoing transactions. When an uplink transaction begins, a queue entry is
  added to the active queue. When the transaction completes, the queue entry is
  moved from the active queue to the history queue. The history queue depth is
  specified by the user in the CF configuration table. When the history queue is
  full and an active transaction finishes, the oldest entry on the history queue
  is deleted.


  \section cfscfovrift Incoming File Transactions
  
  When files are transferred in the uplink direction, the ground peer receives 
  the initial request to send the file. This action causes the ground peer to
  send a series of PDUs that are routed to the CF application. The CF
  application does not get a request to receive a file. The first indication to
  the CF application that an uplink transaction has started, is the receipt of
  the first PDU of the transaction. 
  
  The CF application is capable of receiving files in class 1 or class 2 mode on
  a per-file basis. The class mode is embedded in the PDUs received.

  The message ID for incoming PDUs is defined in the CF configuration table.
    
  When a file is uploaded to the spacecraft in class 2 mode, the CF app must
  acknowledge the receipt of the file by sending an acknowledgment PDU to the
  ground. This response must be sent on a specified output channel (output
  channels are described later). The channel number for this response is defined
  by the user in the configuration table.
  
  The CF application keeps a list of all incoming transactions in its internal
  queues. There are two queues designated for incoming transfers. The incoming
  active queue holds information about all incoming transactions that are
  currently active. The incoming history queue holds information about all
  incoming transactions that are complete. The full contents of either queue can
  be viewed on command. The depth of the history queue is defined in the table.

  
  \section cfscfovroft Outgoing File Transactions
  
  All outgoing file transactions are initiated by the CF application in response
  to a playback file command, a playback directory command or a file found in a
  polling directory. The peer entity does not request to receive a file. All
  outgoing file transactions are inserted into a pending queue by CF before they
  are actually sent. The CF application reads the pending queue (if reading is
  enabled) and starts the next transaction immediately after the data from the
  previous file has been sent. This process of queueing files and sending them
  sequentially, prevents the engine from being inundated when the user requests
  to send multiple files. Once the transactions begins, the queue entry is moved
  to the outgoing active queue and then to the outgoing history queue when it's
  complete. The engine processes the outgoing file transactions when it is
  'cycled'. The number of engine cycles per wake up is defined in the table. At
  most one PDU will be sent on a single engine cycle.

      
  \section cfscfovroc Output Channels

  The CF application supports sending files to a configurable number of
  destinations. The output channels are configured through table parameters.
  Each channel has a pending queue, active queue and history queue.  All queue
  entries for outgoing transactions start out on the pending queue, then get
  moved to the active queue when the transaction begins. After the transaction
  is complete the queue entry is moved to the history queue. The queues may be
  viewed by command at any time. The pending queue reads may be enabled or
  disabled at anytime. Each channel has a dedicated throttling semaphore, peer
  entity ID, message ID for outgoing PDUs and a configurable number of polling
  directories. File output transactions may occur simultaneously on different
  channels. The engine processes all active outgoing transactions in a
  round-robin fashion so as not to starve any one transaction. CF is not 
  capable of prioritizing across channels.


  \section cfscfovrqfo Queueing Files for Output

  There are three ways to request a file (or files) to be sent. The file
  playback command, the directory playback command or through poll directory
  processing. The CF polling directory feature continually checks a directory
  for files and after detecting a new file in the directory, inserts a queue
  entry containing the file name (and other info) on the pending queue.
  

  \section cfscfovrpri Priority
  
  Each file-send transaction has an associated priority which is specified by
  the user. The priority of the transaction determines where it is inserted in
  the pending queue. High priority transactions get inserted toward the front of
  the queue. There are 256 levels of priority, zero being the highest. Priority
  is given as a command parameter for the playback file command and the playback
  directory command. For poll directory processing, each polling directory has
  an associated priority given as a table parameter. Please note that this
  priority applies only within a channel. CF does not support prioritization
  across channels. Prioritization across channels (if needed) would typically be 
  implemented by the application receiving the PDUs.


  \section cfscfovrprs Preserve Setting

  When an outgoing file transaction is successfully complete, the user may want
  the file to be deleted by CF. The preserve setting allows the user to specify
  whether the file is deleted or not. The preserve setting gives two choices,
  delete or keep. This setting is specified as a parameter in the playback file
  command, the playback directory command and on each polling directory. If a
  file transaction is not successful, the file cannot be deleted by CF.


  \section cfscfovrts Throttling Semaphore

  Throttling outgoing PDUs may be necessary when the application that receives
  the outgoing PDUs (typically TO) needs to control the flow of packets. The
  throttling semaphore is a counting semaphore that is shared between another
  application and CF. Throttling may be configured as in-use or not-in-use on a
  per-channel basis. To configure as in-use, the receiving app must create a
  counting semaphore during initialization, using the name defined in the CF
  table. After creation, the receiving app must 'give' the semaphore each time
  it is ready to receive a PDU. On the CF side, CF attempts to get the semaphore
  ID by calling an OSAL function to Get-SemaphoreID-by-Name during CF
  initialization. The name defined in the table is given as a parameter to this
  call. CF has code to ensure that this call is executed after the receiving app
  initializes. If the attempt to Get-SemaphoreID-by-Name fails, then throttling
  on that channel is not-in-use and PDUs are sent whenever the engine has a PDU
  ready to output. If successful, each time the engine has a PDU to output, CF
  will attempt a non-blocking 'take' on the throttling semaphore. If the 'take'
  is successful, the green light counter in telemetry is incremented and the PDU
  is sent on the software bus. If the 'take' is not successful, the PDU is held
  by the engine, the red-light counter is incremented and the 'take' is called
  again on the next engine cycle.
  
  
  \section cfscfovrpd Polling Directories
  
  A polling directory is a directory that is polled by CF periodically. CF does 
  not create these directories. They must be created before they can be enabled. 
  When files are found in a polling directory that is enabled, the files are
  automatically queued by CF for output. The polling rate is configurable and
  each channel has a configurable number of polling directories.  Each polling
  directory has an enable, a class setting, a priority setting, a preserve
  setting and a destination directory. When enabled, CF will periodically check
  the polling directories for files. When a file is found, CF will place the
  file information on the pending queue if it is closed and not already on the
  queue and not currently active. All polling directories are checked at the
  same frequency which is defined by the table parameter
  NumWakeupsPerPollDirChk. Setting this parameter to one will cause CF to check
  the polling directories at the fastest possible rate, every time it receives a
  'wake-up' command. Checking polling directories is a processor-intensive
  effort, it is best to keep the polling rate as low as possible. 

    
  \section cfscfovreff Efficiency
  
  The CF application can be a processor intensive application.  Some operating
  systems have significant overhead associated with file system operations.
  Opening and closing a file, querying the file system for file size, deleting
  the file, opening directories, looping through a directory list can consume a
  considerable amount of processor time. For this reason, transmitting small
  files at a high rate for long periods of time may be a worst-case-timing
  scenario. File system overhead is less of an issue when file sizes are large.
  The terms 'large' and 'small' used here are relative to the downlink rate.
  With a downlink rate of 1 Mbps for example, a good file size would be 1 MByte
  or larger.
  
  Also, it is best to keep the number of files on the pending queue to a
  minimum. When the number of files on the pending queue is high, (such as
  hundreds) prioritization and standard checking causes CF processing to be
  significant each time a file is added to the queue.
  
  Polling directory processing is also subject to file system overhead.  It is
  recommended that the rate of poll processing be kept low and unused polling
  directories should be disabled.


  \section CF cfscfovrmu Memory-Use
  
  CF uses the CFE ES memory pool to manage a statically allocated heap of the
  size defined by the CF_MEMORY_POOL_BYTES configuration parameter. This heap is
  used to hold memory for queue entries. The life cycle of a queue entry begins
  when a request to queue a file for downlink is received. Or in the case of
  incoming transactions, the queue entry is allocated when the meta-data PDU is
  received by CF. For the incoming transaction case, the queue entry starts out
  on the incoming active queue, then the entry is moved to the history queue
  when the transaction completes. For outgoing transactions, the queue entry
  starts out on the pending queue, then moves to the active queue when the
  transaction begins, then moves to the history queue when the transaction is
  complete.
  
  The history queue has a sliding window affect. When the queue is full and a
  new transaction needs to be added, the oldest transaction will be removed,
  making room for the new transaction.
  
  The history queue depth is a configuration parameter and specified in the CF
  configuration table. When the queue entry is 'pushed-off' the history queue,
  the memory for the queue will be returned to the heap.
    
  For incoming-file-transactions, CF statically allocates an incoming pdu buffer.
  The size of this buffer is defined by the platform configuration parameter, 
  CF_INCOMING_PDU_BUF_SIZE. The incoming PDU's are copied from the Software Bus 
  into this buffer and then passed to the engine.  

  For outgoing-file-transactions, the engine statically allocates a buffer for
  PDUs. The size of this buffer is defined by platform configuration parameter,
  CF_OUTGOING_PDU_BUF_SIZE. The engine informs the CF app when it has a PDU
  ready to go out. In response to this, the CF app checks with the downlink app
  (e.g. TO) to see if it is ready to receive a PDU. This is done by the CF app
  trying to 'take' the throttling semaphore defined in the CF configuration
  table. If the CF app successfully 'takes' the semaphore, it gives a green
  light to the engine and the PDU is then released by the engine and sent to the
  software bus via the zero-copy delivery mode. There is a green light counter
  and a red light counter for each output channel in telemetry. 

  
  Prev: \ref cfscfintro <BR>
  Next: \ref cfscfopr
**/

/**
  \page cfscfopr CFS CF Operation
  
  The CF Application has an operational interface consisting of one table, four
  different telemetry messages and twenty five commands.
  
  Prev: \ref cfscfovr <BR>
  Next: \ref cfscfcmds
**/



/**
  \page cfscfcmds CFS CF Commands
  
  \section cfscfcmdsnoop Noop Command 
  
  The CF Noop command is sent to CF using message ID CF_CMD_MID with command
  code #CF_NOOP_CC. This command is useful for verifying that the command
  interface to the CF Application is working.  It also causes an \link
  #CF_NOOP_CMD_EID Event Message \endlink to be generated that contains the CF
  Application's version information.  It should be noted that the version
  information can also be obtained when the Application starts up.  After CF has
  successfully initialized itself, an \link #CF_INIT_EID Event Message \endlink
  is generated that indicates successful initialization and also includes the
  Application's version information.  Both of these event messages are
  'Informational' and are NOT filtered by default.
  

  \section cfscfcmdsrstctr Reset Counters Command
  
  The CF Reset counters command is sent to CF using message ID #CF_CMD_MID with
  command code #CF_RESET_CC. This command is used to reset the counters in the
  housekeeping telemetry packet. All counters can be reset or they can be reset
  by category. The categories are command counters, fault counters, incoming
  file counters and outgoing file counters. 
  
  When the command is executed successfully, the command counter will be zero
  and \link #CF_RESET_CMD_EID Event Message \endlink will be generated that
  displays the value of the parameter received. This event message is a 'Debug'
  type and is filtered by default. 
  
  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.

  \verbatim
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
      uint8   Value;
      uint8   Spare[3];
  
  } CF_ResetCtrsCmd_t;
  \endverbatim

  The first parameter, \c Value, identifies which category of counters to reset
  or if Value is set to zero, all counters will be reset. Value should be one to
  reset command counters only. Value should be set to two to reset fault
  counters only. Value should be set to three to reset incoming transaction
  counters. Value should be set to four to reset all outgoing transaction
  counters.



  \section cfscfcmdspbf Playback File Command
    
  The CF Playback File command is sent to CF using message ID #CF_CMD_MID with
  command code #CF_PLAYBACK_FILE_CC.  
  
  This command is used to queue a file to be sent by the CF application. To
  'playback' a file means to output, or send a file.  
  
  When the command is executed successfully, the command counter will increment
  and \link #CF_PLAYBACK_FILE_EID Event Message \endlink will be generated that
  displays the value of the parameters received. This event message is a 'Debug'
  type and is filtered by default. 
  
  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.
    
  \verbatim
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE]; /* CCSDS Command Header 8 bytes */ 
      uint8   Class;                          /* CFDP Class 1 or 2 */
      uint8   Channel;                        /* Zero based channel number */
      uint8   Priority;                       /* Zero based priority, max 255 */
      uint8   Preserve;                       /* Delete(0) or Keep(1) file */
      char    SrcFilename[OS_MAX_PATH_LEN];   /* Path/Filename to send */ 
      char    DstFilename[OS_MAX_PATH_LEN];   /* Path/Filename at destination */ 
  
  }CF_PlaybackFileCmd_t;
  \endverbatim
  
  The first parameter, \c Class, identifies whether the file will be transferred
  using #CF_CLASS_1 or #CF_CLASS_2. For Class 1 transfers, CF will send the data
  once and expect no feedback from the peer. Class 2 transfers are more reliable
  and attempt to fill in data that may have been dropped on the first attempt.
  
  The second parameter, \c Channel, specifies the output channel in which the
  file will be sent. The value range for this parameter is 0 to
  (#CF_MAX_PLAYBACK_CHANNELS - 1). #CF_MAX_PLAYBACK_CHANNELS is specified in the
  CF platform configuration file and can be viewed by sending the
  #CF_SEND_CFG_PARAMS_CC command.
    
  The third parameter, \c Priority, specifies where the file is placed on the
  pending queue. High priority files are placed at the front of the queue. A 
  value of zero is the highest priority. A value of 255 is the lowest priority.
  
  The fourth parameter, \c Preserve, specifies whether the file will be deleted
  or preserved by CF after the transfer successfully completes. To have the file
  deleted by CF, set this parameter to zero. If this parameter is set to one,
  the file will not be deleted. Regardless of the setting, if the file-transfer
  is not successful the file will not be deleted. 
  
  The fifth parameter, \c SrcFilename, specifies the path name and filename to
  send. This parameter is a string with max size equal to #OS_MAX_PATH_LEN
  bytes. Although OS_MAX_PATH_LEN is a configuration parameter the default
  setting is 64. The SrcFilename must be an existing file. The string must begin
  with a forward slash, have no spaces and be properly terminated.
  
  The last parameter, \c DstFilename, specifies the destination path name and
  filename. This parameter is a string with max size equal to #OS_MAX_PATH_LEN
  bytes. Although OS_MAX_PATH_LEN is a configuration parameter the default
  setting is 64. This parameter is delivered to the peer so that the peer knows
  where to store the file. The peer engine dictates the requirements of this
  string. The CF application allows this string to be NULL in which case the
  peer engine will store the incoming file in the default directory. If the
  string is not NULL, CF requires that it is properly terminated and contains no
  spaces. This parameter can be used to rename the file after it's received at
  the destination.
  
  
  
  \section cfscfcmdspbd Playback Directory Command
  
  The CF Playback Directory command is sent to CF using message ID #CF_CMD_MID
  with command code #CF_PLAYBACK_DIR_CC.  The command causes an \link
  #CF_PLAYBACK_DIR_EID Event Message \endlink to be generated that displays the
  value of the parameters received. This event message is a 'Debug' type and is
  filtered by default. This command is used to queue the files that are located
  in the specified directory at the time the command is received.
  
  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.
  
  To 'playback' a directory means to send all files in that directory. To queue
  the files for sending, the class must be 1 or 2, the channel must be in-use,
  the files must be closed and not be active or pending, the preserve parameter
  must be 0 (Delete) or 1 (Keep), the path names must include no spaces and be
  properly terminated. The SrcPath must begin and end with a forward slash. All
  possible values for Priority are valid. A priority value of zero is the
  highest priority.
      
  \verbatim  
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
      uint8   Class;
      uint8   Chan;
      uint8   Priority;
      uint8   Preserve;
      char    SrcPath[OS_MAX_PATH_LEN];
      char    DstPath[OS_MAX_PATH_LEN];
      
  }CF_PlaybackDirCmd_t;
  \endverbatim
    
  The first parameter, \c Class, identifies whether the files will be
  transferred using #CF_CLASS_1 or #CF_CLASS_2. For Class 1 transfers, CF will
  send the data once and expect no feedback from the peer. Class 2 transfers are
  more reliable and attempt to fill in data that may have been dropped on the
  first attempt.

  The second parameter, \c Chan, specifies the output channel in which the files
  will be sent. All files in the directory will be sent on the specified
  channel. The value range for this parameter is 0 to (#CF_MAX_PLAYBACK_CHANNELS
  - 1). #CF_MAX_PLAYBACK_CHANNELS is specified in the CF platform configuration
  file and can be viewed by sending the #CF_SEND_CFG_PARAMS_CC command.
  
  The third parameter, \c Priority, specifies where the files are placed on the
  pending queue. All files in the directory will be queued with the given
  priority. High priority files are placed at the front of the queue. A value of
  zero is the highest priority. A value of 255 is the lowest priority.
  
  The fourth parameter, \c Preserve, specifies whether the files will be deleted
  or preserved by CF after the transfer successfully completes. To have the
  files deleted by CF, set this parameter to zero. If this parameter is set to
  one, the file will not be deleted. Regardless of the setting, if the
  file-transfer is not successful the file will not be deleted. 
  
  The fifth parameter, \c SrcPath, specifies the path name where the files are
  located. The string must have no spaces, be properly terminated and have a
  forward slash as the last character. This parameter is a string with max size
  equal to #OS_MAX_PATH_LEN characters. Although OS_MAX_PATH_LEN is a
  configuration parameter, the default setting delivered with the OSAL is 64. 
  
  The last parameter, \c DstPath, specifies where the files are to be stored
  after they are received by the peer. This parameter is a string with max size
  equal to #OS_MAX_PATH_LEN bytes. Although OS_MAX_PATH_LEN is a configuration
  parameter the default setting delivered with the OSAL is 64. This parameter is
  delivered to the peer so that the peer knows where to store the file.The peer
  engine dictates the requirements of this string. The CF application allows
  this string to be NULL in which case the peer engine will store the incoming
  files in the default directory. If the string is not NULL, CF requires that it
  is properly terminated, contains no spaces and ends with a forward slash.
  There is no way to rename the files at the destination as in the Playback File
  command.

  
  \section cfscfcmdsfrz Freeze Command
  
  The CF Freeze command is sent to CF using message ID #CF_CMD_MID with command
  code #CF_FREEZE_CC. The freeze command has no command parameters. This command
  is used to freeze all transactions. The freeze command should be applied to
  both the source and destination peers at nearly the same time.  When
  transactions are frozen, internal timers are paused. When the command is
  executed successfully, the command counter is incremented and the \link
  #CF_FREEZE_CMD_EID Event Message \endlink will be generated. This event
  message is an 'Informational' type and is NOT filtered by default. To filter
  this event, send the EVS command #CFE_EVS_ADD_EVENT_FILTER_CC with the
  following parameters, Appname - CF, EventID - #CF_FREEZE_CMD_EID, Mask -
  0xFFFF. When transactions are frozen, bit zero of the CF telemetry point
  'Engine Flags' will be set to one.  If the command is not successful, the
  command error counter will increment and an error event will be generated
  indicating the reason for failure. 
   
 
  \section cfscfcmdsthw Thaw Command
  
  The CF Thaw command is sent to CF using message ID #CF_CMD_MID with command
  code #CF_THAW_CC. The thaw command has no command parameters. This command is
  used to thaw all transactions that were commanded to 'freeze' earlier. The
  thaw command should be applied to both the source and destination peers at
  nearly the same time.  When the command is executed successfully, the command
  counter is incremented and the \link #CF_THAW_CMD_EID Event Message \endlink
  will be generated. This event message is an 'Informational' type and is NOT
  filtered by default. To filter this event, send the EVS command
  #CFE_EVS_ADD_EVENT_FILTER_CC with the following parameters, Appname - CF,
  EventID - #CF_THAW_CMD_EID, Mask - 0xFFFF. When transactions are thawed, bit
  zero of the CF telemetry point 'Engine Flags' will be set to zero.  If the
  command is not successful, the command error counter will increment and an
  error event will be generated indicating the reason for failure.

  
  \section cfscfcmdssus Suspend Command
  
  The CF Suspend command is sent to CF using message ID #CF_CMD_MID with command
  code #CF_SUSPEND_CC. This command is used to suspend one or all transactions.
  The suspend command has one command parameter that indicates what transaction
  to suspend. See details below.  The suspend command should be applied to both
  the source and destination peers at nearly the same time.  When the command is
  executed successfully, the command counter is incremented and the \link
  #CF_CARS_CMD_EID Event Message \endlink will be generated displaying the
  parameter value received. This event message is an 'Informational' type and is
  NOT filtered by default. To filter this event, send the EVS command
  #CFE_EVS_ADD_EVENT_FILTER_CC with the following parameters, Appname - CF,
  EventID - #CF_CARS_CMD_EID, Mask - 0xFFFF. Also, the 'Suspended
  Transactions' count on the Engine Housekeeping telemetry page will increment
  when the command is executed successfully. If the command is not successful,
  the command error counter will increment and an error event will be generated
  indicating the reason for failure. Use the #CF_SEND_TRANS_DIAG_DATA_CC command
  to verify that a transaction is suspended. 
  
  NOTE: Suspending an outgoing transaction before EOF is sent, will pause the
  flow of PDUs on that channel. This happens because the next file is started
  when the current file EOF is sent. See the CF_KICKSTART_CC command
  description for more detail. If a user wishes to stop the current transaction
  (before the EOF is sent) and still allow the next pending file to begin, the
  current transaction should be cancelled (or abandoned) in lieu of being
  suspended. Canceling is always a better option than abandoning. 
  
  NOTE: When a suspended transaction is cancelled, the cancel does not take 
  affect until the transaction is resumed.

  \verbatim 
  /* Cancel,Abandon,Resume,Suspend (CARS) Cmds */
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
      char    Trans[OS_MAX_PATH_LEN];
  
  }CF_CARSCmd_t;
  \endverbatim

  The \c Trans parameter is a string with max size equal to #OS_MAX_PATH_LEN
  characters and specifies the transaction to suspend. Although OS_MAX_PATH_LEN
  is a configuration parameter, the default setting delivered with the OSAL is
  64. The fsw will accept this string if given one of three formats. The first
  format is the transaction ID. This format has the form of Source Entity ID,
  underscore, Transaction Number. (Example 0.24_5) The fsw will also accept a
  source filename. This format must include the path and begin with a forward
  slash. (Example /ssr/science009.dat) The final possible string format would be
  'All' (without the single quotes) and used to suspend all transactions. The
  lettering of the word 'All' is not case sensitive.
  
  
  \section cfscfcmdsres Resume Command
  
  The CF Resume command is sent to CF using message ID #CF_CMD_MID with command
  code #CF_RESUME_CC. This command is used to resume a suspended transaction or
  all transactions. The resume command has one command parameter that indicates
  what transaction to resume. See details below.  The resume command should be
  applied to both the source and destination peers at nearly the same time. When
  the command is executed successfully, the command counter is incremented and
  the \link #CF_CARS_CMD_EID Event Message \endlink will be generated
  displaying the parameter value received. This event message is an
  'Informational' type and is NOT filtered by default. To filter this event,
  send the EVS command #CFE_EVS_ADD_EVENT_FILTER_CC with the following
  parameters, Appname - CF, EventID - #CF_CARS_CMD_EID, Mask - 0xFFFF. Also,
  the 'Suspended Transactions' count on the Engine Housekeeping telemetry page
  will decrement when the command is executed successfully. If the command is
  not successful, the command error counter will increment and an error event
  will be generated indicating the reason for failure. Use the
  #CF_SEND_TRANS_DIAG_DATA_CC command to verify that a transaction is suspended 
  or not. 

  \verbatim 
  /* Cancel,Abandon,Resume,Suspend (CARS) Cmds */
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
      char    Trans[OS_MAX_PATH_LEN];
  
  }CF_CARSCmd_t;
  \endverbatim

  The \c Trans parameter is a string with max size equal to #OS_MAX_PATH_LEN
  characters and specifies the transaction to resume. Although OS_MAX_PATH_LEN
  is a configuration parameter, the default setting delivered with the OSAL is
  64.  The fsw will accept this string if given one of three formats. The first
  format is the transaction ID. This format has the form of Source Entity ID,
  underscore, Transaction Number. (Example 0.24_5) The fsw will also accept a
  source filename. This format must include the path and begin with a forward
  slash. (Example /ssr/science009.dat) The final possible string format would be
  'All' (without the single quotes) and used to resume all transactions. The
  lettering of the word 'All' is not case sensitive.
    
  
  \section cfscfcmdscan Cancel Command

  The CF Cancel command is sent to CF using message ID #CF_CMD_MID with command
  code #CF_CANCEL_CC. This command is used to cancel a transaction or all
  transactions. The cancel command has one command parameter that indicates what
  transaction to cancel. See details below.  The cancel command should be sent
  to the source entity only. For example, uplink transactions should be
  cancelled at the ground engine. The CF application should not receive a cancel
  command in this case. The CF application will learn of the cancel request
  through the protocol messages. Downlink transactions and outgoing transactions 
  (with respect to CF)  should be cancelled by sending this CF cancel command.

  When the command is executed successfully, the command counter is incremented
  and the \link #CF_CARS_CMD_EID Event Message \endlink will be generated
  displaying the parameter value received. This event message is an
  'Informational' type and is NOT filtered by default. To filter this event,
  send the EVS command #CFE_EVS_ADD_EVENT_FILTER_CC with the following
  parameters, Appname - CF, EventID - #CF_CARS_CMD_EID, Mask - 0xFFFF. Also,
  the 'Cancel Request' count on the Fault Counter Housekeeping telemetry page
  and the 'Total Failed Transactions' count on the main HK page will increment
  when the command is executed successfully. If the command is not successful,
  the command error counter will increment and an error event will be generated
  indicating the reason for failure. Use the #CF_SEND_TRANS_DIAG_DATA_CC command
  or the #CF_QUICKSTATUS_CC command to verify if a transaction has been 
  cancelled.
  
  NOTE: If a Cancel command is received by CF on an outgoing transaction that 
  is suspended, the cancel does not take affect until the transaction is 
  resumed.  

  \verbatim 
  /* Cancel,Abandon,Resume,Suspend (CARS) Cmds */
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
      char    Trans[OS_MAX_PATH_LEN];
  
  }CF_CARSCmd_t;
  \endverbatim

  The \c Trans parameter is a string with max size equal to #OS_MAX_PATH_LEN
  characters and specifies the transaction to cancel. Although OS_MAX_PATH_LEN
  is a configuration parameter, the default setting delivered with the OSAL is
  64. The fsw will accept this string if given one of three formats. The first
  format is the transaction ID. This format has the form of Source Entity ID,
  underscore, Transaction Number. (Example 0.24_5) The fsw will also accept a
  source filename. This format must include the path and begin with a forward
  slash. (Example /ssr/science009.dat) The final possible string format would be
  'All' (without the single quotes) and used to cancel all transactions. The
  lettering of the word 'All' is not case sensitive.

  
  \section cfscfcmdsabd Abandon Command
  
  The CF Abandon command is sent to CF using message ID #CF_CMD_MID with command
  code #CF_ABANDON_CC. This command is used to abandon a transaction or all
  transactions. The abandon command has one command parameter that indicates
  what transaction to abandon. See details below.  The abandon command should be
  applied to both the source and destination peers at nearly the same time. 

  When the command is executed successfully, the command counter is incremented
  and the \link #CF_CARS_CMD_EID Event Message \endlink will be generated
  displaying the parameter value received. This event message is an
  'Informational' type and is NOT filtered by default. To filter this event,
  send the EVS command #CFE_EVS_ADD_EVENT_FILTER_CC with the following
  parameters, Appname - CF, EventID - #CF_CARS_CMD_EID, Mask - 0xFFFF. 
  
  The 'Total Failed Transactions' count on the main HK page will increment when
  the command is executed successfully. If the command is not successful, the
  command error counter will increment and an error event will be generated
  indicating the reason for failure. Use the #CF_SEND_TRANS_DIAG_DATA_CC command
  or the #CF_QUICKSTATUS_CC command to verify if a transaction has been canceled.
  
  NOTE: Unlike the cancel command, if a suspended transaction is abandoned, the
  transaction will be abandoned at the time the abandon command is received.
  Likewise, if a frozen transaction is abandoned, the transaction will be
  abandoned when the abandoned cmd is received.
    
  \verbatim 
  /* Cancel,Abandon,Resume,Suspend (CARS) Cmds */
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
      char    Trans[OS_MAX_PATH_LEN];
  
  }CF_CARSCmd_t;
  \endverbatim

  The \c Trans parameter is a string with max size equal to #OS_MAX_PATH_LEN
  characters and specifies the transaction to cancel. Although OS_MAX_PATH_LEN
  is a configuration parameter, the default setting delivered with the OSAL is
  64. The fsw will accept this string if given one of three formats. The first
  format is the transaction ID. This format has the form of Source Entity ID,
  underscore, Transaction Number. (Example 0.24_5) The fsw will also accept a
  source filename. This format must include the path and begin with a forward
  slash. (Example /ssr/science009.dat) The final possible string format would be
  'All' (without the single quotes) and used to abandon all transactions. The
  lettering of the word 'All' is not case sensitive.
  
  
  
  \section cfscfcmdssmp Set MIB Parameter Command
  
  The CF Set MIB Parameter command is sent to CF using message ID #CF_CMD_MID
  with command code #CF_SET_MIB_PARAM_CC. This command is used to change the
  flight engine Message Information Base (MIB). The MIB is a term used in the
  CCSDS blue book that can be interpreted as the engine configuration
  parameters. The command has two command parameters, Param indicates which
  parameter to change, and Value indicates the new setting. 
  
  When the command is executed successfully, the command counter is incremented
  and the \link #CF_SET_MIB_CMD_EID Event Message \endlink will be generated
  displaying the parameter values received. This event message is an
  'Informational' type and is NOT filtered by default. To filter this event,
  send the EVS command #CFE_EVS_ADD_EVENT_FILTER_CC with the following
  parameters, Appname - CF, EventID - #CF_SET_MIB_CMD_EID, Mask - 0xFFFF.
  
  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure. To verify
  successful execution, send the #CF_GET_MIB_PARAM_CC command and verify
  displayed value matches the new setting.
    
  This command may be used to change any flight MIB parameter. The Param string
  must match the flight engine-defined string. When using this command through
  the Asist command browser, only the Value parameter is needed to change some
  settings. The reason is the Asist command database is setup to fill-in the
  engine-defined strings that are most often changed. These parameters include
  ACK_LIMIT, ACK_TIMEOUT, INACTIVITY_TIMEOUT, NAK_LIMIT, NAK_TIMEOUT,
  SAVE_INCOMPLETE_FILES, OUTGOING_FILE_CHUNK_SIZE.
  
  NOTE: Changing these parameters will change the actual table values, thereby 
  changing the checksum of the CF configuration table.
      
  \verbatim 
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
      char    Param [CF_MAX_CFG_PARAM_CHARS];
      char    Value [CF_MAX_CFG_VALUE_CHARS]; 
  }CF_SetMibParam_t;
  \endverbatim

  The \c Param parameter is a string with max size equal to
  #CF_MAX_CFG_PARAM_CHARS characters and specifies which engine parameter to
  set. CF_MAX_CFG_PARAM_CHARS is set to a value of 32. 
  
  The \c Value parameter is a string with max size equal to
  #CF_MAX_CFG_VALUE_CHARS characters and specifies the new value of the engine
  parameter. CF_MAX_CFG_VALUE_CHARS is set to a value of 16.
    
  
  \section cfscfcmdsgmp Get MIB Parameter Command
  
  The CF Set MIB Parameter command is sent to CF using message ID #CF_CMD_MID
  with command code #CF_GET_MIB_PARAM_CC. This command is used to view a single
  Message Information Base (MIB) parameter. The MIB is a term used in the CCSDS
  blue book that can be interpreted as the engine configuration parameters. 
    
  The command has one command parameter, Param indicates which parameter to
  view. The parameter given and its current setting will be displayed in the
  #CF_GET_MIB_CMD_EID event.
  
  When the command is executed successfully, the command counter is incremented
  and the \link #CF_GET_MIB_CMD_EID Event Message \endlink will be generated
  displaying the given parameter value and the current setting for that
  parameter. This event message is an 'Informational' type and is NOT filtered
  by default. 
  
  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.
      
  This command may be used to view any flight MIB parameter. The Param string
  must match the flight engine-defined string. The Asist command browser
  fills-in the one and only command parameter (Param) string for the following
  MIB parameters: ACK_LIMIT, ACK_TIMEOUT, INACTIVITY_TIMEOUT, NAK_LIMIT,
  NAK_TIMEOUT, SAVE_INCOMPLETE_FILES, OUTGOING_FILE_CHUNK_SIZE. 
  
     
  \verbatim 
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];    
      char    Param [CF_MAX_CFG_PARAM_CHARS];
  }CF_GetMibParam_t;  
  \endverbatim

  The \c Param parameter is a string with max size equal to
  #CF_MAX_CFG_PARAM_CHARS characters and specifies which engine parameter to
  set. CF_MAX_CFG_PARAM_CHARS is set to a value of 32. 
    
  
    
  \section cfscfcmdstdc Transaction Diagnostics Command
  
  The CF Transaction Diagnostics command is sent to CF using message ID 
  #CF_CMD_MID with command code #CF_SEND_TRANS_DIAG_DATA_CC. 
  
  This command is used to obtain information about a single transaction. This
  command has one command parameter that indicates the transaction of interest.
  
  When the command is executed successfully, the command counter is incremented
  and the \link #CF_SND_TRANS_CMD_EID Event Message \endlink will be generated
  displaying the parameter value received. This event message is a
  'Debug' type and is filtered by default. To unfilter CF debug events,
  send the EVS command #CFE_EVS_ENABLE_APP_EVENT_TYPE_CC with the following
  parameters, Appname - CF, Mask - 0x1. To filter CF debug events, send the 
  EVS command #CFE_EVS_DISABLE_APP_EVENT_TYPE_CC with the following
  parameters, Appname - CF, Mask - 0x1.
  
  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.
  
  The data sent in response to this command has two sections, engine-held 
  transaction data and application-held transaction data. The engine-held 
  transaction data is valid for active transactions only. 
    
  \verbatim 
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];    
      char    Trans[OS_MAX_PATH_LEN];
  
  }CF_SendTransCmd_t;
  \endverbatim

  The \c Trans parameter is a string with max size equal to #OS_MAX_PATH_LEN
  characters and specifies the transaction data to send. Although
  OS_MAX_PATH_LEN is a configuration parameter, the default setting delivered
  with the OSAL is 64. The fsw will accept this string if given one of two
  formats. The first format is the transaction ID. This format has the form of
  Source Entity ID, underscore, Transaction Number. (Example 0.24_5) The second
  format is the source filename. This format must include the path and begin
  with a forward slash. (Example /ssr/science009.dat) The string 'All' is not
  valid for this command.
  
  
  \section cfscfcmdsspp Set Poll Directory Parameters Command
  
  The CF Set Poll Directory Parameters command is sent to CF using message ID
  #CF_CMD_MID with command code #CF_SET_POLL_DIR_PATH_CC.  
  
  This command is used to change one or more polling directory parameters. It is
  required for the operator to provide all the parameters. For example, to
  change the priority of a polling directory, one would set the new priority
  value in the Priority parameter and the unchanged values for Class, Preserve,
  SrcPath and DstPath.

  When the command is executed successfully, the command counter is incremented
  and the \link #CF_SET_POLL_PARAM1_EID Event Message \endlink will be generated
  displaying the parameter value received. This event message is a 'Debug' type
  and is filtered by default. To unfilter CF debug events, send the EVS command
  #CFE_EVS_ENABLE_APP_EVENT_TYPE_CC with the following parameters, Appname - CF,
  Mask - 0x1. To filter CF debug events, send the EVS command
  #CFE_EVS_DISABLE_APP_EVENT_TYPE_CC with the following parameters, Appname -
  CF, Mask - 0x1.  

  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.  
    
  \verbatim
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
      uint8   Chan;   /* 0 to (CF_MAX_PLAYBACK_CHANNELS - 1) */
      uint8   Dir;    /* 0 to (CF_MAX_POLLING_DIRS_PER_CHAN - 1) */
      uint8   Class;
      uint8   Priority;
      uint8   Preserve;
      uint8   Spare[3];
      char    SrcPath[OS_MAX_PATH_LEN];
      char    DstPath[OS_MAX_PATH_LEN];
  
  } CF_SetPollParamCmd_t;
  \endverbatim
  
  The first parameter, \c Chan, specifies the output channel which contains the 
  polling directory. Every polling directory belongs to one and only one output 
  channel. The value range for this parameter is 0 to 
  (#CF_MAX_PLAYBACK_CHANNELS - 1). #CF_MAX_PLAYBACK_CHANNELS is specified in the 
  CF platform configuration file and can be viewed by sending the 
  #CF_SEND_CFG_PARAMS_CC command.
  
  The second parameter, \c Dir, identifies the polling directory to change. Each
  polling directory is numbered from 0 to (#CF_MAX_POLLING_DIRS_PER_CHAN - 1).
  #CF_MAX_POLLING_DIRS_PER_CHAN is specified in the CF platform configuration
  file and can be viewed by sending the #CF_SEND_CFG_PARAMS_CC command. The 
  polling directory number may be obtained by viewing the contents of the CF 
  configuration table.
      
  The third parameter, \c Class, can be set to a value of one or two. For Class
  1 transfers, CF will send the data once and expect no feedback from the peer.
  Class 2 transfers are more reliable and attempt to fill in data that may have
  been dropped on the first attempt.

  The fourth parameter, \c Priority, specifies where the files from this
  directory will be placed on the pending queue. High priority files are placed
  at the front of the queue. A value of zero is the highest priority. A value of
  255 is the lowest priority.
  
  The fifth parameter, \c Preserve, specifies whether the file will be deleted
  or preserved by CF after the transfer successfully completes. To have the file
  deleted by CF, set this parameter to zero. If this parameter is set to one,
  the file will not be deleted. Regardless of the setting, if the file-transfer
  is not successful the file will not be deleted. 
  
  The sixth parameter, \c SrcPath, specifies the path name of the polling
  directory. This parameter is a string with max size equal to #OS_MAX_PATH_LEN
  bytes. Although OS_MAX_PATH_LEN is a configuration parameter the default
  setting is 64. The SrcPath must be an existing directory. The string must
  begin with a forward slash, have no spaces and be properly terminated.

  The last parameter, \c DstPath, specifies the destination path name. This
  parameter is a string with max size equal to #OS_MAX_PATH_LEN bytes. Although
  OS_MAX_PATH_LEN is a configuration parameter the default setting delivered
  with the OSAL is 64. This parameter is delivered to the peer so that the peer
  knows where to store the file. The peer engine dictates the requirements of
  this string. The CF application allows this string to be NULL in which case
  the peer engine will store the incoming file in the default directory.  If the
  string is not NULL, CF requires that it is properly terminated and contains no
  spaces. 
    
  
  \section cfscfcmdsscp Send Configuration Parameters Command
  
    The CF Send Configuration Parameters command is sent to CF using message ID
  #CF_CMD_MID with command code #CF_SEND_CFG_PARAMS_CC. The Send Configuration
  Parameters command has no command parameters. This command is used to view the
  compile-time configuration parameters or the engine timer values. The packet
  generated includes compile-time configuration parameters from the platform
  configuration header file (cf_platform_cfg.h). It also queries the engine to
  get the timer values. The packet sent does not include the run-time 
  configuration parameters. The run-time configuration parameters can be viewed
  by dumping the CF configuration  table. 
  
  When the command is executed successfully, the command counter is incremented
  and the \link #CF_SND_CFG_CMD_EID Event Message \endlink will be generated.
  This event message is a 'Debug' type and is filtered by default. To unfilter
  CF debug events, send the EVS command #CFE_EVS_ENABLE_APP_EVENT_TYPE_CC with
  the following parameters, Appname - CF, Mask - 0x1. To filter CF debug events,
  send the EVS command #CFE_EVS_DISABLE_APP_EVENT_TYPE_CC with the following
  parameters, Appname - CF, Mask - 0x1.
  
  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.

  
  \section cfscfcmdswqi Write Queue Information Command
  

  The CF Write Queue Information command is sent to CF using message ID
  #CF_CMD_MID with command code #CF_WRITE_QUEUE_INFO_CC.  
  
  This command is used to write the contents of a single queue to a file. CF has
  a pending, queue, an active queue and a history queue for each output channel.
  CF also has an active queue and a history queue for incoming transactions.
  After the file is written successfully, steps must be taken to transfer the
  file to Asist so that the information can be viewed on the page.

  When the command is executed successfully, the command counter is incremented
  and the \link #CF_SND_Q_INFO_EID Event Message \endlink will be generated
  displaying the filename that contains the queue information as well as the
  number of queue entries written to the file and the size of the file created.
  This event message is a 'Debug' type
  and is filtered by default. To unfilter CF debug events, send the EVS command
  #CFE_EVS_ENABLE_APP_EVENT_TYPE_CC with the following parameters, Appname - CF,
  Mask - 0x1. To filter CF debug events, send the EVS command
  #CFE_EVS_DISABLE_APP_EVENT_TYPE_CC with the following parameters, Appname -
  CF, Mask - 0x1.  

  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.  
    
  \verbatim
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];    
      uint8   Type;
      uint8   Chan;
      uint8   Queue;
      uint8   Spare;
      char    Filename[OS_MAX_PATH_LEN];
  
  }CF_WriteQueueCmd_t;
  \endverbatim
  
  The first parameter, \c Type, specifies the queue type. The queue type may be 
  uplink (incoming) or downlink (outgoing)
  or incoming queue (value of one) or a downlink or outgoing queue (value of 
  two).

  The second parameter, \c Chan, is necessary only if the Type parameter is set
  to a value of two (downlink). If the Type parameter is set to a value of one
  (uplink), the code does not read this parameter. Chan specifies the downlink 
  channel that owns the queue. The value range for this parameter is 0 to 
  (#CF_MAX_PLAYBACK_CHANNELS - 1). #CF_MAX_PLAYBACK_CHANNELS is specified in the 
  CF platform configuration file and can be viewed by sending the 
  #CF_SEND_CFG_PARAMS_CC command.
  
  The third parameter, \c Queue, identifies which queue contents will be written 
  to the file. A value of 0 for pending queue, 1 for active and 2 for history.  
  Because there is no uplink pending queue, a value of zero is not valid when 
  the Type parameter is set to one (uplink). 

  The fourth parameter, \c Filename, specifies the name of the file that will
  receive the queue data. If this parameter contains a NULL string, the CF
  application will use the default filename which is defined by
  #CF_DEFAULT_QUEUE_INFO_FILENAME  in the CF platform configuration file. This
  parameter is a string with max size equal to #OS_MAX_PATH_LEN bytes. Although
  OS_MAX_PATH_LEN is a configuration parameter, the default setting delivered
  with the OSAL is 64.  

  
  
  \section cfscfcmdsed Enable Dequeue Command
  
  The CF Enable Dequeue command is sent to CF using message ID #CF_CMD_MID with
  command code #CF_ENABLE_DEQUEUE_CC. 
  
  This command is used to enable reading from the pending queue on a particular
  channel. It has one parameter (channel) and is sent when the pending queue
  reads are disabled for that channel. The pending queue holds the names of the
  files that are waiting to be sent out by CF. This command has no affect on
  incoming file transactions.

  When the command is executed successfully, the command counter is incremented
  and the \link #CF_ENA_DQ_CMD_EID Event Message \endlink will be generated
  indicating that the given channel pending queue is enabled. This event message
  is a 'Debug' type and is filtered by default. To unfilter CF debug events,
  send the EVS command #CFE_EVS_ENABLE_APP_EVENT_TYPE_CC with the following
  parameters, Appname - CF, Mask - 0x1. To filter CF debug events, send the EVS
  command #CFE_EVS_DISABLE_APP_EVENT_TYPE_CC with the following parameters,
  Appname - CF, Mask - 0x1.  

  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.  
  
  \verbatim
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
      uint8   Chan;
      uint8   Spare[3];
  
  } CF_EnDisDequeueCmd_t;
  \endverbatim  

  The first and only parameter, \c Chan, specifies which pending queue to enable.
  Each channel has one pending queue. The value range for this parameter is 0 to 
  (#CF_MAX_PLAYBACK_CHANNELS - 1). #CF_MAX_PLAYBACK_CHANNELS is specified in the 
  CF platform configuration file and can be viewed by sending the 
  #CF_SEND_CFG_PARAMS_CC command.


  \section cfscfcmdsdd Disable Dequeue Command
 
  The CF Enable Dequeue command is sent to CF using message ID #CF_CMD_MID with
  command code #CF_DISABLE_DEQUEUE_CC. 
  
  This command is used to disable reading from the pending queue on a particular
  channel. It has one parameter (channel) and sent when the user would like to 
  stop sending files on a particular channel. 
  
  NOTE: This command does not stop a file transaction that is in progress on the 
  specified channel. Use the cancel command to stop a file transaction that is 
  in progress.
  

  When the command is executed successfully, the command counter is incremented
  and the \link #CF_DIS_DQ_CMD_EID Event Message \endlink will be generated
  indicating that the pending queue on the given channel is disabled. This event
  message is a 'Debug' type and is filtered by default. To unfilter CF debug
  events, send the EVS command #CFE_EVS_ENABLE_APP_EVENT_TYPE_CC with the
  following parameters, Appname - CF, Mask - 0x1. To filter CF debug events,
  send the EVS command #CFE_EVS_DISABLE_APP_EVENT_TYPE_CC with the following
  parameters, Appname - CF, Mask - 0x1.  

  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.  
  
  \verbatim
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
      uint8   Chan;
      uint8   Spare[3];
  
  } CF_EnDisDequeueCmd_t;
  \endverbatim  

  The first and only parameter, \c Chan, specifies which pending queue to
  disable. Each channel has one pending queue. The value range for this
  parameter is 0 to (#CF_MAX_PLAYBACK_CHANNELS - 1). #CF_MAX_PLAYBACK_CHANNELS
  is specified in the CF platform configuration file and can be viewed by
  sending the #CF_SEND_CFG_PARAMS_CC command.
  
  


  \section cfscfcmdsedp Enable Directory Polling Command
  
  The CF Enable Directory Polling command is sent to CF using message ID 
  #CF_CMD_MID with command code #CF_ENABLE_DIR_POLLING_CC. 
  
  This command is used to enable one or all polling directories on a particular
  channel. CF will check polling directories for filenames and queue them for
  output, only if the polling directory is enabled. Polling directory processing
  consumes a fair amount of CPU utilization. Opening directories periodically
  and looping through hidden files, closed files and files that have already
  been queued can take a substantial amount of CPU time. It is recommended to
  keep polling directories disabled when they are not actively receiving files.
  
  When the command is executed successfully, the command counter is incremented
  and either \link #CF_ENA_POLL_CMD1_EID Event Message \endlink (for a single
  poll directory) or \link #CF_ENA_POLL_CMD2_EID Event Message \endlink (for all
  poll directories on the channel) will be generated indicating that the polling
  directory is enabled. These event messages are 'Debug' type and are filtered 
  by default. To unfilter CF debug events, send the EVS command
  #CFE_EVS_ENABLE_APP_EVENT_TYPE_CC with the following parameters, Appname - CF,
  Mask - 0x1. To filter CF debug events, send the EVS command
  #CFE_EVS_DISABLE_APP_EVENT_TYPE_CC with the following parameters, Appname -
  CF, Mask - 0x1.  

  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.  
  
  \verbatim
  typedef struct
  {
    uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE]; 
    uint8   Chan;
    uint8   Dir;
    uint8   Spare[2];

  } CF_EnDisPollCmd_t;
  \endverbatim  

  The first parameter, \c Chan, specifies which channel contains the polling 
  directory to enable. The value range for this
  parameter is 0 to (#CF_MAX_PLAYBACK_CHANNELS - 1). #CF_MAX_PLAYBACK_CHANNELS
  is specified in the CF platform configuration file and can be viewed by
  sending the #CF_SEND_CFG_PARAMS_CC command.
  
  The second parameter, \c Dir, specifies which polling directory to enable. To
  enable all polling directories on a specific channel, set this parameter to
  0xFF. The polling directories are numbered from zero to
  (CF_MAX_POLLING_DIRS_PER_CHAN - 1). CF_MAX_POLLING_DIRS_PER_CHAN is specified
  in the CF platform configuration file and can be viewed by sending the
  #CF_SEND_CFG_PARAMS_CC command. The polling directory number may be obtained
  by viewing the contents of the CF configuration table.
  

  \section cfscfcmdsddp Disable Directory Polling Command
  
  The CF Enable Directory Polling command is sent to CF using message ID 
  #CF_CMD_MID with command code #CF_DISABLE_DIR_POLLING_CC. 
  
  This command is used to disable one or all polling directories on a particular
  channel. CF will check polling directories for filenames and queue them for
  output, only if the polling directory is enabled. Polling directory processing
  consumes a fair amount of CPU utilization. Opening directories periodically
  and looping through hidden files, closed files and files that have already
  been queued can take a substantial amount of CPU time. It is recommended to
  keep polling directories disabled when they are not actively receiving files.
  
  When the command is executed successfully, the command counter is incremented
  and either \link #CF_DIS_POLL_CMD1_EID Event Message \endlink (for a single
  poll directory) or \link #CF_DIS_POLL_CMD2_EID Event Message \endlink (for all
  poll directories on the channel) will be generated indicating that the polling
  directory is enabled. These event messages are 'Debug' type and are filtered 
  by default. To unfilter CF debug events, send the EVS command
  #CFE_EVS_ENABLE_APP_EVENT_TYPE_CC with the following parameters, Appname - CF,
  Mask - 0x1. To filter CF debug events, send the EVS command
  #CFE_EVS_DISABLE_APP_EVENT_TYPE_CC with the following parameters, Appname -
  CF, Mask - 0x1.  

  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.  
  
  \verbatim
  typedef struct
  {
    uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE]; 
    uint8   Chan;
    uint8   Dir;
    uint8   Spare[2];

  } CF_EnDisPollCmd_t;
  \endverbatim  

  The first parameter, \c Chan, specifies which channel contains the polling 
  directory to disable. The value range for this
  parameter is 0 to (#CF_MAX_PLAYBACK_CHANNELS - 1). #CF_MAX_PLAYBACK_CHANNELS
  is specified in the CF platform configuration file and can be viewed by
  sending the #CF_SEND_CFG_PARAMS_CC command.
  
  The second parameter, \c Dir, specifies which polling directory to disable. To
  disable all polling directories on a specific channel, set this parameter to
  0xFF. The polling directories are numbered from zero to
  (CF_MAX_POLLING_DIRS_PER_CHAN - 1). CF_MAX_POLLING_DIRS_PER_CHAN is specified
  in the CF platform configuration file and can be viewed by sending the
  #CF_SEND_CFG_PARAMS_CC command. The polling directory number may be obtained
  by viewing the contents of the CF configuration table.  



  \section cfscfcmdsdqn Delete Queue Node Command
  
  The CF Delete Queue Node command is sent to CF using message ID 
  #CF_CMD_MID with command code #CF_DELETE_QUEUE_NODE_CC. 
  
  This command is used to remove a node from a queue. A queue node is also known
  as a queue entry. This command is most often used to remove queue entries for
  files that are pending. This command may also be used to free memory by
  removing queue entries from the history queue. See the section named 'CF
  Memory Use' for more detail about the life cycle of a queue entry.

  In the unlikely case that a transaction gets stuck on an active queue, this
  command may be used to remove the node from the active queue. This is not an
  expected scenario. Using this command to remove a queue entry from an active
  queue may result in an adverse affect of unknown consequences. The CF
  application has protection against accidentally removing a queue node from an
  active queue. If the transaction specified in the command is found to be on
  the active queue, a warning event message will be sent, indicating that the
  transaction is active and the command must be sent again to take affect. See
  sections named 'Queue Entries' and 'Queues' in this document for more detail.  
    
  When the command is executed successfully, the command counter is incremented
  and either \link #CF_DEQ_NODE1_EID Event Message \endlink (for incoming
  transactions) or \link #CF_DEQ_NODE2_EID Event Message \endlink (for outgoing
  transactions) will be generated indicating that the node has been removed.
  These event messages are 'Debug' type and are filtered by default. To unfilter
  CF debug events, send the EVS command #CFE_EVS_ENABLE_APP_EVENT_TYPE_CC with
  the following parameters, Appname - CF, Mask - 0x1. To filter CF debug events,
  send the EVS command #CFE_EVS_DISABLE_APP_EVENT_TYPE_CC with the following
  parameters, Appname - CF, Mask - 0x1. 
  
  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.
    
  \verbatim 
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
      char    Trans[OS_MAX_PATH_LEN];
  
  }CF_DequeueNodeCmd_t;
  \endverbatim

  The \c Trans parameter is a string with max size equal to #OS_MAX_PATH_LEN
  characters and specifies the transaction data to send. Although
  OS_MAX_PATH_LEN is a configuration parameter, the default setting delivered
  with the OSAL is 64. The fsw will accept this string if given one of two
  formats. The first format is the transaction ID. This format has the form of
  Source Entity ID, underscore, Transaction Number. (Example 0.24_5) The second
  format is the source filename. This format must include the path and begin
  with a forward slash. (Example /ssr/science009.dat) The string 'All' is not
  valid for this command. Use the purge queue command to remove all nodes on a
  particular queue. 


  \section cfscfcmdspq Purge Queue Command
  
  The CF Write Queue Information command is sent to CF using message ID
  #CF_CMD_MID with command code #CF_PURGE_QUEUE_CC.  
  
  This command is used to remove all entries on a single queue. CF has a
  pending, queue, an active queue and a history queue for each output channel.
  CF also has an active queue and a history queue for incoming transactions.

  When the command is executed successfully, the command counter is incremented
  and either \link #CF_PURGEQ1_EID Event Message \endlink (for incoming
  history queue) or \link #CF_PURGEQ2_EID Event Message \endlink (for outgoing
  transactions) will be generated indicating that the node has been removed.
  This event message is a 'Debug' type and is filtered by default. To unfilter
  CF debug events, send the EVS command #CFE_EVS_ENABLE_APP_EVENT_TYPE_CC with
  the following parameters, Appname - CF, Mask - 0x1. To filter CF debug events,
  send the EVS command #CFE_EVS_DISABLE_APP_EVENT_TYPE_CC with the following
  parameters, Appname - CF, Mask - 0x1. 

  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.  
    
  \verbatim
  typedef struct
  {
    uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
    uint8   Type;
    uint8   Chan;
    uint8   Queue;
    uint8   Spare;
  }CF_PurgeQueueCmd_t;
  \endverbatim
  
  The first parameter, \c Type, specifies the queue type. The queue type may be 
  uplink/incoming (value of one) or downlink/outgoing (value of two).

  The second parameter, \c Chan, is necessary only if the Type parameter is set
  to a value of two (downlink). If the Type parameter is set to a value of one
  (uplink), the code does not read this parameter. Chan specifies the output 
  channel that owns the queue. The value range for this parameter is 0 to 
  (#CF_MAX_PLAYBACK_CHANNELS - 1). #CF_MAX_PLAYBACK_CHANNELS is specified in the 
  CF platform configuration file and can be viewed by sending the 
  #CF_SEND_CFG_PARAMS_CC command.
  
  The third parameter, \c Queue, identifies which queue will be purged. 
  A value of 0 for pending queue, 1 for active and 2 for history.  
  Because there is no uplink pending queue, a value of zero is not valid when 
  the Type parameter is set to one (uplink). 

 
  \section cfscfcmdswat Write Active Transactions Command
  
  The CF Write Active Transactions command is sent to CF using message ID
  #CF_CMD_MID with command code #CF_WR_ACTIVE_TRANS_CC. The command has two
  command parameters and is used to view all transactions that are currently
  active.
  
  This command will write the contents of one or more active queues to a file.
  CF has an active queue for each output channel and one active queue for
  incoming transactions. After the file is written successfully, steps must be
  taken to transfer the file to the ground system so that the information can be
  viewed on the page.

  When the command is executed successfully, the command counter is incremented
  and the \link #CF_WRACT_TRANS_EID Event Message \endlink will be generated
  indicating that file was written successfully. This event message is a 'Debug'
  type and is filtered by default. To unfilter CF debug events, send the EVS
  command #CFE_EVS_ENABLE_APP_EVENT_TYPE_CC with the following parameters,
  Appname - CF, Mask - 0x1. To filter CF debug events, send the EVS command
  #CFE_EVS_DISABLE_APP_EVENT_TYPE_CC with the following parameters, Appname -
  CF, Mask - 0x1. 

  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure. 

  \verbatim
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];    
      uint8   Type;
      char    Filename[OS_MAX_PATH_LEN];
  
  }CF_WriteActiveTransCmd_t;
  \endverbatim


  The first parameter, \c Type, specifies the queue type. The queue type may be 
  uplink/incoming (value of one) or downlink/outgoing (value of two).

  The second parameter, \c Filename, specifies the name of the file that will
  receive the queue data. If this parameter contains a NULL string, the CF
  application will use the default filename which is defined by
  #CF_DEFAULT_QUEUE_INFO_FILENAME  in the CF platform configuration file. This
  parameter is a string with max size equal to #OS_MAX_PATH_LEN bytes. Although
  OS_MAX_PATH_LEN is a configuration parameter, the default setting delivered
  with the OSAL is 64.  

 
  \section cfscfcmdskck Kickstart Command

  The CF Kickstart command is sent to CF using message ID #CF_CMD_MID with
  command code #CF_KICKSTART_CC. The command has one command parameter and is
  used to start the transmission of the next file on the pending queue when
  other attempts have failed.
  
  This command can be used in the unlikely event that PDUs stop flowing on an
  output channel that is enabled and has files waiting to be sent. Once a
  transaction begins and other files are pending, the CF design attempts to
  maintain a steady flow of outgoing PDUs on each channel. The CF application
  will start the next file on the pending queue, immediately after the EOF PDU
  on the current transaction is sent out. In the unlikely scenario that the
  engine does not output the EOF PDU of a transaction, the next file on the
  pending queue will not begin.

  CAUTION: This command is not needed under normal conditions and should be used 
  only when cancel/abandon/resume/channel-enable commands fail to start the next 
  pending file. 
      
  NOTE: Suspending an outgoing transaction before EOF is sent, will pause the
  flow of PDUs on that channel. If a user wishes to stop the current transaction
  (before the EOF is sent) and still allow the next pending file to begin, the
  current transaction should be cancelled (or abandoned) in lieu of being
  suspended. In most cases, canceling is a better option than abandoning a 
  transaction.
  
  WARNING: It is not recommended that this command be used when a suspended
  transaction has paused the flow of PDUs on a channel. Instead, resume the
  suspended transaction to re-establish the flow of PDUs.
  
  When the command is executed successfully, the command counter is incremented
  and the \link #CF_KICKSTART_CMD_EID Event Message \endlink will be generated
  indicating the channel that has been restarted. This event message is a
  'Debug' type and is filtered by default. To unfilter CF debug events, send the
  EVS command #CFE_EVS_ENABLE_APP_EVENT_TYPE_CC with the following parameters,
  Appname - CF, Mask - 0x1. To filter CF debug events, send the EVS command
  #CFE_EVS_DISABLE_APP_EVENT_TYPE_CC with the following parameters, Appname -
  CF, Mask - 0x1. 

  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure. 

  \verbatim
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
      uint8   Chan;
      uint8   Spare[3];
  
  } CF_KickstartCmd_t;
  \endverbatim

  The \c Chan parameter specifies the output channel that needs to be started.
  The value range for this parameter is 0 to (#CF_MAX_PLAYBACK_CHANNELS - 1).
  #CF_MAX_PLAYBACK_CHANNELS is specified in the CF platform configuration file
  and can be viewed by sending the #CF_SEND_CFG_PARAMS_CC command.



  \section cfscfcmdsqs Quick Status Command
  
  The CF Quick Status command is sent to CF using message ID #CF_CMD_MID with
  command code #CF_QUICKSTATUS_CC. 
  
  This command is used to display high level status of the specified transaction
  in an event message. High level status may include Pending, Active, Success,
  Failed or Suspended. If a file transaction has failed, the condition code will 
  also be displayed indicating the reason for failure. 
      
  When the command is executed successfully, the command counter is incremented
  and \link #CF_QUICK_CMD_EID Event Message \endlink will be generated
  indicating the transaction ID, filename and status. This event message is an
  'Informational' type and is NOT filtered by default. 
  
  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.
    
  \verbatim 
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
      char    Trans[OS_MAX_PATH_LEN];
  
  }CF_QuickStatCmd_t;
  \endverbatim

  The \c Trans parameter is a string with max size equal to #OS_MAX_PATH_LEN
  characters and specifies which transaction will have its status displayed in
  the event. Although OS_MAX_PATH_LEN is a configuration parameter, the default
  setting delivered with the OSAL is 64. The fsw will accept this string if
  given one of two formats. The first format is the transaction ID. This format
  has the form of Source Entity ID, underscore, Transaction Number. (Example
  0.24_5) The second format is the source filename. This format must include the
  path and begin with a forward slash. (Example /ssr/science009.dat) The string
  'All' is not valid for this command.
  
  
  \section cfscfcmdsgt GiveTake Command
  
  The CF GiveTake command is sent to CF using message ID #CF_CMD_MID with
  command code #CF_GIVETAKE_CC. 
  
  This command is used to adjust the handshake semaphore in the unexpected case
  that the semaphore value lost or gained a count when viewed during idle time.
  Typically the Telemetry Output (TO) application will create the semaphore with
  an inital number of 'gives' equal to the depth of TO's input pipe. The
  semaphore value represents the number of empty buffers on TO's pipe. This
  value can get askew for example, if CF cannot deliver a PDU after taking the
  semaphore. In this case the user would be able to send this cmd to 'give' the
  semaphore to correct the value.
  
  This command will have no affect if throttling is not used on the specified 
  channel. 
      
  CAUTION: This command is not needed under normal conditions and should be used 
  only when it is known that the semphore value does not equal the expected 
  count when the throttled channel is in an idle state. 
  
  When the command is executed successfully, the command counter is incremented
  and \link #CF_GIVETAKE_CMD_EID Event Message \endlink will be generated
  indicating the output channel number and whether the semaphore give or take
  was successful. This event message is an 'Informational' type and is NOT
  filtered by default. 
  
  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.
    
  \verbatim 
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE];
      uint8   Chan;
      uint8   GiveOrTakeSemaphore;
  
  }CF_GiveTakeCmd_t;
  \endverbatim

  The \c Chan parameter specifies the output channel that needs to be adjusted.
  The value range for this parameter is 0 to (#CF_MAX_PLAYBACK_CHANNELS - 1).
  #CF_MAX_PLAYBACK_CHANNELS is specified in the CF platform configuration file
  and can be viewed by sending the #CF_SEND_CFG_PARAMS_CC command.
  
  The \c GiveOrTakeSemaphore parameter specifies whether a semaphore-give (0) or
  a semaphore-take(1) will be executed.
  
  

  \section cfscfcmdsas Auto Suspend Enable Command
  
  The CF Auto Suspend Enable command is sent to CF using message ID #CF_CMD_MID
  with command code #CF_ENADIS_AUTO_SUSPEND_CC. 
  
  This command is used to enable or disable auto suspend mode. When auto
  suspend is enabled, CF will suspend every outgoing transaction after the EOF
  is sent. This is a global mode that applies to all output channels. After a
  processor or power-on reset, the auto suspend mode defaults to disabled.
      
  When the command is executed successfully, the command counter is incremented
  and \link #CF_ENDIS_AUTO_SUS_CMD_EID Event Message \endlink will be generated
  indicating the auto enable state (0-Disabled, 1-Enabled).
  
  If the command is not successful, the command error counter will increment and
  an error event will be generated indicating the reason for failure.
    
  \verbatim 
  typedef struct
  {
      uint8   CmdHeader[CFE_SB_CMD_HDR_SIZE]; 
      uint32  EnableDisable;/* 0 to disable, 1 to enable */
  
  }CF_AutoSuspendEnCmd_t;
  \endverbatim

  The \c EnableDisable parameter is used to specify the desired state, 0 to
  disable and 1 to enable.
  

  
  Prev: \ref cfscfopr <BR>
  Next: \ref cfscftlm
**/


/**
  \page cfscftlm CFS CF Telemetry
  
  \section cfscftlmhk CF Housekeeping Telemetry Packet
  
  The Housekeeping Telemetry packet is sent by CF to the software bus on
  command. When CF receives the CF_SEND_HK_MID command, a packet is constructed
  and sent by CF. CF typically receives this command every four or five seconds.
  
  
  \section cfscftlmtrans CF Transaction Diagnostic Packet
  
  The Transaction Diagnostic packet is sent to the software bus on command. When
  CF receives the CF_CMD_MID command, with command code
  CF_SEND_TRANS_DIAG_DATA_CC, a packet with message ID CF_TRANS_TLM_MID is
  constructed and sent by CF. There are two categories of information in this
  packet. The information held by the outer layer and the information held by
  the engine. The information held by the engine is available only if the
  transaction is active. 
  

  \section cfscftlmcfgpkt CF Configuration Packet
  
  The Configuration Packet is sent to the software bus on command. When CF
  receives the CF_CMD_MID command, with command code CF_SEND_CFG_PARAMS_CC, a
  packet with message ID CF_CONFIG_TLM_MID is constructed and sent by CF. The
  configuration packet contains both compile time parameters from the platform
  configuration file and run-time parameters from the table.
  

  \section cfscftlmque CF Queue Information File
  
  The CF Queue Information is written to a file on command. When CF receives the
  CF_CMD_MID command, with command code CF_WRITE_QUEUE_INFO_CC, the queue
  information written to a file. The filename and path is specified in the
  command. If the first character of the filename parameter in the command is a
  null terminator (or zero), then the default filename is used. The default
  filename is specified by the parameter CF_DEFAULT_QUEUE_INFO_FILENAME in the
  platform configuration file. The queue information contains an entry for each
  item on the specified queue. A queue entry consists of a filename, the source
  entity ID, transaction number and transaction status.
  
  Prev: \ref cfscfcmds <BR>
  Next: \ref cfscftbl
**/


/**
  \page cfscftbl CFS CF Tables
   
  The CF application has one table used for configuration. This table is
  accessed during initialization and updated by CF when changes to the table
  parameters are made through CF commands. 
  
  The table contains default configuration settings. Many table configuration
  settings can be adjusted by command. These adjustments will modify the table
  and are therefore reflected if the table is dumped. These adjustments will
  also change the table checksum. The configuration table is loaded at the time
  the application is started. CF does not check for table updates during 
  runtime.
      
  CF does not allow the table to be loaded after CF initialization. If the
  operator attempts to do a table load after CF initializes, they must abort the
  attempt (via table cmd) or table services will be waiting forever to get the
  'Update' call from CF. If the abort is not executed, the operator will have
  trouble trying to dump or validate the table.
  
  Prev: \ref cfscftlm <BR>
  Next: \ref cfscfcfg
**/


/**
  \page cfscfopr CFS CF Configuration Parameters
  
  The CF application provides the user with a set of compile-time configuration
  parameters as well as a set of run-time configuration parameters. All
  compile-time configuration parameters are specified in headers files. There
  are three header files used by the CF application, cf_platform_cfg.h,
  cf_perfids.h and cf_msgids.h. For details regarding the compile-time 
  configuration parameters, refer to the header files. 
  
  All run-time configuration parameters are specified in the CF configuration 
  table. 
  
    char        TableIdString[OS_MAX_API_NAME];
    uint32      TableVersion;
    uint32      NumEngCyclesPerWakeup;
    uint32      NumWakeupsPerQueueChk;
    uint32      NumWakeupsPerPollDirChk;
    uint16      IncomingPduMsgId;
    uint16      Spare;
    uint32      UplinkHistoryQDepth;
    uint32      Class2UplinkResponseChan;
    uint32      Reserved1;
    uint32      Reserved2;

    char        AckTimeout[CF_MAX_CFG_VALUE_CHARS];
    char        AckLimit[CF_MAX_CFG_VALUE_CHARS];
    char        NakTimeout[CF_MAX_CFG_VALUE_CHARS];
    char        NakLimit[CF_MAX_CFG_VALUE_CHARS];
    char        InactivityTimeout[CF_MAX_CFG_VALUE_CHARS];
    char        OutgoingFileChunkSize[CF_MAX_CFG_VALUE_CHARS];
    char        SaveIncompleteFiles[CF_MAX_CFG_VALUE_CHARS];
    char        FlightEntityId[CF_MAX_CFG_VALUE_CHARS];/* 2 byte dotted-decimal string eg. "0.24"*/
    
    cf_channel_entry_t  Ch[CF_MAX_PLAYBACK_CHANNELS];


    uint8   EntryInUse;
    uint8   DequeueEnable; 
    uint16  OutgoingPduMsgId;/**< \brief MsgId of the output PDU packet */
    uint32  PendingQDepth; /**< \brief Pending Queue Depth */      
    uint32  HistoryQDepth; /**< \brief History Queue Depth */      
    char    PeerEntityId[CF_MAX_CFG_VALUE_CHARS];   /**< \brief Decimal Entity ID of Gnd Engine in quotes (1-255) */
    char    ChanName[OS_MAX_API_NAME]; /**< \brief Playback Channel Name */
    char    SemName[OS_MAX_API_NAME];/**< \brief Handshake Semaphore Name */

    cf_polling_dir_entry_t  PollDir[CF_MAX_POLLING_DIRS_PER_CHAN];
  
    uint8   EntryInUse;
    uint8   EnableState;    
    uint8   Class;
    uint8   Priority;
    uint8   Preserve;
    uint8   Spare1;
    uint8   Spare2;
    uint8   Spare3;
    char    SrcPath[OS_MAX_PATH_LEN];/* no spaces,fwd slash at end */
    char    DstPath[OS_MAX_PATH_LEN];/* no spaces */
  

  
  Prev: \ref cfscftbl <BR>
  Next: \ref cfscfcons
**/


/**
  \page cfscfcon CFS CF Constraints
  
  All Entity ID's must be formatted as two-byte, dotted-decimal notation. Asist,
  ITOS and CF use a similar engine designed by GSFC Code 583. One factor that
  dictates the size of the outgoing PDU Header size, is the Entity ID format. It
  is necessary to set the CF application entity ID to the format specified above
  so that the PDU header size of outgoing PDUs is 12 bytes. Entity ID formats
  other than what is specified will likely produce compiler packing that may
  shift bytes in the outgoing packets. An example of a two-byte, dotted-decimal
  format is 2.25 or 0.24. The limits are 0.0 to 255.255.
  
  The CFDP standard CCSDS 727.0-B-4 allows a variety of data-type sizes for
  Source and Destination Entity ID's, Transaction ID and PDU Header length.
  Currently, this application does not support the following:
  1. an Entity ID length other than 2 bytes 
  2. a transaction ID length other than 4 bytes 
  3. a PDU header size other than 12 bytes. 

  The stack size for the CF application must be monitored and must be no less
  than 16384 bytes. Depending on the CF configuration, the stack size may need
  to be set higher than 16384. The stack size is specified in one of two places.   
  1.The cfe_es_startup.scr file that is located in the /mission/build/xxx/exe 
  area.
  2. The CFE ES command CFE_ES_START_APP_CC which is used to start the 
  application.
  
  Poll directories must not have subdirectories, otherwise errors will occur
  at put request time.

  All files in polling directories must be closed. 

  The same file cannot be sent on two channels at same time. 

  Spaces are not allowed in filenames.

  Segmentation control as described in the blue book is not supported by this
  version of CFS CF application. All outgoing transactions will have the
  segmentation control bit in the meta-data PDU set to - 'Recorded Boundaries
  Not Respected'.
  
  This version of CF does not support keep alive procedures that are detailed in
  section 4.1.6.5 of CFDP CCSDS 727.0-B-4 Blue Book.
  
  Invalid file structures are not supported by this version of the CF
  application. Invalid file structures are described in 4.1.6.1.1.8 of CFDP
  CCSDS 727.0-B-4 Blue Book and apply only when record boundaries are respected
  (see segmentation control above).

  The CF application will not issue an invalid transmission mode fault. Both
  transmission modes, unacknowledged (class 1) and acknowledged (class 2) are
  supported by the CF application.

  
  The CFDP Application will fail on startup if the following conditions are not met: <BR>
  
  <UL>
    <LI> Unable to create a Software Bus Pipe  <BR>
    <LI> Unable to subscribe to the CF Command Message  <BR>
    <LI> Unable to subscribe to the CF Housekeeping Request Message  <BR>
    <LI> Unable to register for cFE Event Services  <BR>
    <LI> Unable to register the CF Configuration Table with cFE Table Services  <BR>
    <LI> Unable to load the CF Configuration Table with a defaut table file  <BR>
    <LI> Unable to acquire a pointer to the CF Configuration Table  <BR>
  </UL>
  
  Each one of these conditions will generate a unique event message and will cause the CF
  Application to terminate before processing any CF command pipe messages.
  
  Prev: \ref cfscfcfg <BR>
  Next: \ref cfscffaqs
**/


/**
  \page cfscffaqs CFS CF Frequently Asked Questions
  
    <B> (Q)
      How would a user turn on/off CF debug event messages? 
    </B> <BR> <BR> <I>
      Debug Messages
      Event Messages of the 'Debug' type are filtered by default. To unfilter
      CF debug events, send the EVS command #CFE_EVS_ENABLE_APP_EVENT_TYPE_CC with
      the following parameters, Appname - CF, Mask - 0x1. To filter CF debug events,
      send the EVS command #CFE_EVS_DISABLE_APP_EVENT_TYPE_CC with the following
      parameters, Appname - CF, Mask - 0x1.
    </I>
  
  Prev: \ref cfscfcons <BR>
**/

