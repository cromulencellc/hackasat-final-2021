        -:    0:Source:../src/ds_table.c
        -:    0:Graph:ds_table.gcno
        -:    0:Data:ds_table.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************************************
        -:    2:**   $Id: ds_table.c.gcov 1.1 2009/12/07 13:43:52EST lwalling Exp  $
        -:    3:**
        -:    4:**  CFS Data Storage (DS) table management functions
        -:    5:**
        -:    6:** $Log: ds_table.c.gcov  $
        -:    6:** Revision 1.1 2009/12/07 13:43:52EST lwalling 
        -:    6:** Initial revision
        -:    6:** Member added to project c:/MKSDATA/MKS-REPOSITORY/CFS-REPOSITORY/ds/fsw/unit_test/project.pj
        -:    7:** Revision 1.12 2009/10/05 16:29:07EDT lwalling 
        -:    8:** Fix typo in result of call to get table status
        -:    9:** Revision 1.11 2009/10/05 16:16:49EDT lwalling 
        -:   10:** Provide distinction for local changes to table data from new table loads
        -:   11:** Revision 1.10 2009/10/05 13:33:52EDT lwalling 
        -:   12:** Change basename string contents from required to optional
        -:   13:** Revision 1.9 2009/10/05 10:16:39EDT lwalling 
        -:   14:** Allow DS table load after initial table load fails
        -:   15:** Revision 1.8 2009/08/31 17:51:38EDT lwalling 
        -:   16:** Convert calls from DS_TableVerifyString() to CFS_VerifyString() with descriptive arg names
        -:   17:** Revision 1.7 2009/08/31 16:47:48EDT lwalling 
        -:   18:** Remove references to DS_1HZ_MID and process file age tests during housekeeping request
        -:   19:** Revision 1.6 2009/08/28 16:47:57EDT lwalling 
        -:   20:** Add support for storing sequence counts in CDS
        -:   21:** Revision 1.5 2009/08/27 16:32:28EDT lwalling 
        -:   22:** Updates from source code review
        -:   23:** Revision 1.4 2009/08/07 16:22:39EDT lwalling 
        -:   24:** Fix verify parms to allow 0,0,0 - Fix return type tests for entry unused and verify string
        -:   25:** Revision 1.3 2009/07/20 13:57:05EDT lwalling 
        -:   26:** Event text changes
        -:   27:** Revision 1.2 2009/06/12 11:47:59EDT lwalling 
        -:   28:** Moved function prototypes to header file, make local changes for file enable state and sequence counters.
        -:   29:** Revision 1.1 2009/05/26 14:30:41EDT lwalling 
        -:   30:** Initial revision
        -:   31:** Member added to project c:/MKSDATA/MKS-REPOSITORY/CFS-REPOSITORY/ds/fsw/src/project.pj
        -:   32:*************************************************************************/
        -:   33:
        -:   34:#include "cfe.h"
        -:   35:
        -:   36:#include "cfs_utils.h"
        -:   37:
        -:   38:#include "ds_msgids.h"
        -:   39:
        -:   40:#include "ds_platform_cfg.h"
        -:   41:#include "ds_verify.h"
        -:   42:
        -:   43:#include "ds_appdefs.h"
        -:   44:
        -:   45:#include "ds_app.h"
        -:   46:#include "ds_table.h"
        -:   47:#include "ds_msg.h"
        -:   48:#include "ds_events.h"
        -:   49:
        -:   50:
        -:   51:#define DS_CDS_NAME  "DS_CDS"
        -:   52:
        -:   53:
        -:   54:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   55:/*                                                                 */
        -:   56:/* DS_TableInit() - DS application table initialization            */
        -:   57:/*                                                                 */
        -:   58:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   59:
        -:   60:int32 DS_TableInit(void)
function DS_TableInit called 7 returned 100% blocks executed 100%
        7:   61:{
        7:   62:    int32 Result1;
        7:   63:    int32 Result2;
        7:   64:    boolean NeedToLoadDestTable = FALSE;
        7:   65:    boolean NeedToLoadFilterTable = FALSE;
        7:   66:    uint16 TableRegisterFlags = CFE_TBL_OPT_SNGL_BUFFER | CFE_TBL_OPT_LOAD_DUMP;
        -:   67:
        -:   68:    #if (DS_MAKE_TABLES_CRITICAL == 1)
        -:   69:    TableRegisterFlags |= CFE_TBL_OPT_CRITICAL;
        -:   70:    #endif
        -:   71:
        -:   72:    /*
        -:   73:    ** If registration fails for either table then the DS app will
        -:   74:    **   terminate immediately. Without valid table handles, the DS
        -:   75:    **   app will never be able to load table data.
        -:   76:    **
        -:   77:    ** However, as long as both tables were successfully registered,
        -:   78:    **   it doesn't matter that one or both table loads fail.  The
        -:   79:    **   DS app can still continue - or at least the DS app can limp
        -:   80:    **   along until an external influence (ground or RTS) can manage
        -:   81:    **   to get both tables loaded.
        -:   82:    */
        7:   83:    Result1 = CFE_TBL_Register(&DS_AppData.DestFileTblHandle, DS_DESTINATION_TBL_NAME,
        -:   84:                                sizeof (DS_DestFileTable_t), TableRegisterFlags,
        -:   85:                               (CFE_TBL_CallbackFuncPtr_t) DS_TableVerifyDestFile);
        -:   86:
        7:   87:    if (Result1 == CFE_TBL_INFO_RECOVERED_TBL)
        -:   88:    {
        -:   89:        /*
        -:   90:        ** cFE registered the table and restored the table data
        -:   91:        */
        2:   92:        NeedToLoadDestTable = FALSE;
        -:   93:
        2:   94:        CFE_EVS_SendEvent(DS_INIT_TBL_CDS_EID, CFE_EVS_DEBUG,
        -:   95:                         "Destination File Table data restored from CDS");
        -:   96:        /*
        -:   97:        ** This is not an error so clear the result value for later tests
        -:   98:        */
        2:   99:        Result1 = CFE_SUCCESS;
        -:  100:    }
        5:  101:    else if (Result1 == CFE_SUCCESS)
        -:  102:    {
        -:  103:        /*
        -:  104:        ** cFE registered the table - we need to load the table data
        -:  105:        */
        4:  106:        NeedToLoadDestTable = TRUE;
        -:  107:    }
        -:  108:    else
        -:  109:    {
        -:  110:        /*
        -:  111:        ** cFE did not register the table - we cannot continue
        -:  112:        */ 
        1:  113:        CFE_EVS_SendEvent(DS_INIT_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  114:                         "Unable to register Destination File Table: Error = 0x%08X",
        -:  115:                          Result1);
        -:  116:    }
        -:  117:
        7:  118:    if (Result1 == CFE_SUCCESS)
        -:  119:    {
        6:  120:        Result1 = CFE_TBL_Register(&DS_AppData.FilterTblHandle, DS_FILTER_TBL_NAME,
        -:  121:                                    sizeof (DS_FilterTable_t), TableRegisterFlags,
        -:  122:                                   (CFE_TBL_CallbackFuncPtr_t) DS_TableVerifyFilter);
        -:  123:
        6:  124:        if (Result1 == CFE_TBL_INFO_RECOVERED_TBL)
        -:  125:        {
        -:  126:            /*
        -:  127:            ** cFE registered the table and restored the table data
        -:  128:            */
        2:  129:            NeedToLoadFilterTable = FALSE;
        -:  130:
        2:  131:            CFE_EVS_SendEvent(DS_INIT_TBL_CDS_EID, CFE_EVS_DEBUG,
        -:  132:                             "Filter Table data restored from CDS");
        -:  133:            /*
        -:  134:            ** This is not an error so clear the result value for later tests
        -:  135:            */
        2:  136:            Result1 = CFE_SUCCESS;
        -:  137:        }
        4:  138:        else if (Result1 == CFE_SUCCESS)
        -:  139:        {
        -:  140:            /*
        -:  141:            ** cFE registered the table - we need to load the table data
        -:  142:            */
        3:  143:            NeedToLoadFilterTable = TRUE;
        -:  144:        }
        -:  145:        else
        -:  146:        {
        -:  147:            /*
        -:  148:            ** cFE did not register the table - we cannot continue
        -:  149:            */ 
        1:  150:            CFE_EVS_SendEvent(DS_INIT_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  151:                             "Unable to register Filter Table: Error = 0x%08X",
        -:  152:                              Result1);
        -:  153:        }
        -:  154:    }
        -:  155:
        -:  156:    /*
        -:  157:    ** Now load the tables - but only if the registration succeeded
        -:  158:    **   and the table data has not already been restored from the
        -:  159:    **   Critical Data Store.
        -:  160:    */
        7:  161:    if (Result1 == CFE_SUCCESS)
        -:  162:    {
        5:  163:        if (NeedToLoadDestTable)
        -:  164:        {
        3:  165:            Result2 = CFE_TBL_Load(DS_AppData.DestFileTblHandle,
        -:  166:                                   CFE_TBL_SRC_FILE, DS_DEF_DEST_FILENAME);
        -:  167:
        3:  168:            if (Result2 != CFE_SUCCESS)
        -:  169:            {
        3:  170:                CFE_EVS_SendEvent(DS_INIT_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  171:                                 "Unable to load default Destination File Table: Filename = %s, Error = 0x%08X",
        -:  172:                                  DS_DEF_DEST_FILENAME, Result2);
        -:  173:            }
        -:  174:        }
        -:  175:
        5:  176:        if (NeedToLoadFilterTable)
        -:  177:        {
        3:  178:            Result2 = CFE_TBL_Load(DS_AppData.FilterTblHandle,
        -:  179:                                   CFE_TBL_SRC_FILE, DS_DEF_FILTER_FILENAME);
        -:  180:
        3:  181:            if (Result2 != CFE_SUCCESS)
        -:  182:            {
        3:  183:                CFE_EVS_SendEvent(DS_INIT_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  184:                                 "Unable to load default Filter Table: Filename = %s, Error = 0x%08X",
        -:  185:                                  DS_DEF_FILTER_FILENAME, Result2);
        -:  186:            }
        -:  187:        }
        -:  188:
        -:  189:        /*
        -:  190:        ** Get initial table data pointers...
        -:  191:        */
        5:  192:        DS_TableManageDestFile();
        5:  193:        DS_TableManageFilter();
        -:  194:    }
        -:  195:
        7:  196:    return(Result1);
        -:  197:
        -:  198:} /* End of DS_TableInit() */
        -:  199:
        -:  200:
        -:  201:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  202:/*                                                                 */
        -:  203:/* DS_TableManageDestFile() - manage table data updates            */
        -:  204:/*                                                                 */
        -:  205:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  206:
        -:  207:void DS_TableManageDestFile(void)
function DS_TableManageDestFile called 12 returned 100% blocks executed 93%
       12:  208:{
       12:  209:    int32 i, Result;
        -:  210:
        -:  211:    /*
        -:  212:    ** Pointer will be NULL until first successful table load...
        -:  213:    */
       12:  214:    if (DS_AppData.DestFileTblPtr == (DS_DestFileTable_t *) NULL)
        -:  215:    {
        -:  216:        /*
        -:  217:        ** Still waiting for the first table load...
        -:  218:        */
        5:  219:        CFE_TBL_ReleaseAddress(DS_AppData.DestFileTblHandle);
        5:  220:        CFE_TBL_Manage(DS_AppData.DestFileTblHandle);
        5:  221:        Result = CFE_TBL_GetAddress((void *)&DS_AppData.DestFileTblPtr,
        -:  222:                                             DS_AppData.DestFileTblHandle);
        -:  223:
        5:  224:        if (Result == CFE_TBL_INFO_UPDATED)
        -:  225:        {
        -:  226:            /*
        -:  227:            ** Got a pointer to initial table data...
        -:  228:            */
        2:  229:            DS_AppData.DestTblLoadCounter++;
        -:  230:
        -:  231:            /*
        -:  232:            ** Keep local copies of table values that software will modify...
        -:  233:            */
       34:  234:            for (i = 0; i < DS_DEST_FILE_CNT; i++)
        -:  235:            {
       32:  236:                DS_AppData.FileStatus[i].FileState = DS_AppData.DestFileTblPtr->File[i].EnableState;
       32:  237:                DS_AppData.FileStatus[i].FileCount = DS_AppData.DestFileTblPtr->File[i].SequenceCount;
        -:  238:            }
        -:  239:
        -:  240:            /*
        -:  241:            ** Store local values in the Critical Data Store (CDS)...
        -:  242:            */
        2:  243:            DS_TableUpdateCDS();
        -:  244:        }
        3:  245:        else if (Result == CFE_TBL_ERR_NEVER_LOADED)
        -:  246:        {
        -:  247:            /*
        -:  248:            ** Still waiting for the first table load...
        -:  249:            */
        3:  250:            DS_AppData.DestTblErrCounter++;
        -:  251:
        -:  252:            /*
        -:  253:            ** Make sure we don't try to use the empty table buffer...
        -:  254:            */
        3:  255:            DS_AppData.DestFileTblPtr = (DS_DestFileTable_t *) NULL;
        -:  256:        }
        -:  257:    }
        -:  258:    else
        -:  259:    {
        -:  260:        /*
        -:  261:        ** Already have initial table data...
        -:  262:        */
        7:  263:        Result = CFE_TBL_GetStatus(DS_AppData.DestFileTblHandle);
        -:  264:
        7:  265:        if (Result == CFE_TBL_INFO_DUMP_PENDING)
        -:  266:        {
        -:  267:            /*
        -:  268:            ** Dump the current table data...
        -:  269:            */
    #####:  270:            CFE_TBL_DumpToBuffer(DS_AppData.DestFileTblHandle);       
        -:  271:        }
        7:  272:        else if (Result == CFE_TBL_INFO_VALIDATION_PENDING)
        -:  273:        {
        -:  274:            /*
        -:  275:            ** Validate the pending table data...
        -:  276:            */
        1:  277:            CFE_TBL_Validate(DS_AppData.DestFileTblHandle);
        -:  278:        }
        6:  279:        else if (Result == CFE_TBL_INFO_UPDATE_PENDING)
        -:  280:        {
        -:  281:            /*
        -:  282:            ** Update the current table with new data...
        -:  283:            */
        3:  284:            DS_AppData.DestTblLoadCounter++;
        -:  285:
        -:  286:            /*
        -:  287:            ** Allow cFE to update the table data...
        -:  288:            */
        3:  289:            CFE_TBL_ReleaseAddress(DS_AppData.DestFileTblHandle);
        3:  290:            CFE_TBL_Update(DS_AppData.DestFileTblHandle);
        3:  291:            CFE_TBL_GetAddress((void *)&DS_AppData.DestFileTblPtr,
        -:  292:                                        DS_AppData.DestFileTblHandle);
        -:  293:            /*
        -:  294:            ** Keep local copies of table values that software will modify...
        -:  295:            */
       51:  296:            for (i = 0; i < DS_DEST_FILE_CNT; i++)
        -:  297:            {
       48:  298:                DS_AppData.FileStatus[i].FileState = DS_AppData.DestFileTblPtr->File[i].EnableState;
       48:  299:                DS_AppData.FileStatus[i].FileCount = DS_AppData.DestFileTblPtr->File[i].SequenceCount;
        -:  300:            }
        -:  301:
        -:  302:            /*
        -:  303:            ** Store local values in the Critical Data Store (CDS)...
        -:  304:            */
        3:  305:            DS_TableUpdateCDS();
        -:  306:        }
        -:  307:    }
        -:  308:
       12:  309:    return;
        -:  310:
        -:  311:} /* End of DS_TableManageDestFile() */
        -:  312:
        -:  313:
        -:  314:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  315:/*                                                                 */
        -:  316:/* DS_TableManageFilter() - manage table data updates              */
        -:  317:/*                                                                 */
        -:  318:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  319:
        -:  320:void DS_TableManageFilter(void)
function DS_TableManageFilter called 12 returned 100% blocks executed 91%
       12:  321:{
       12:  322:    int32 Result;
        -:  323:
        -:  324:    /*
        -:  325:    ** Pointer will be NULL until first successful filter table load...
        -:  326:    */
       12:  327:    if (DS_AppData.FilterTblPtr == (DS_FilterTable_t *) NULL)
        -:  328:    {
        -:  329:        /*
        -:  330:        ** Still waiting for the first filter table load...
        -:  331:        */
        5:  332:        CFE_TBL_ReleaseAddress(DS_AppData.FilterTblHandle);
        5:  333:        CFE_TBL_Manage(DS_AppData.FilterTblHandle);
        5:  334:        Result = CFE_TBL_GetAddress((void *)&DS_AppData.FilterTblPtr,
        -:  335:                                             DS_AppData.FilterTblHandle);
        -:  336:
        5:  337:        if (Result == CFE_TBL_INFO_UPDATED)
        -:  338:        {
        -:  339:            /*
        -:  340:            ** Got a pointer to initial filter table data...
        -:  341:            */
        2:  342:            DS_AppData.FilterTblLoadCounter++;
        -:  343:
        -:  344:            /*
        -:  345:            ** Subscribe to the packets in the new filter table...
        -:  346:            */
        2:  347:            DS_TableSubscribe();
        -:  348:        }
        3:  349:        else if (Result == CFE_TBL_ERR_NEVER_LOADED)
        -:  350:        {
        -:  351:            /*
        -:  352:            ** Still waiting for the first filter table load...
        -:  353:            */
        3:  354:            DS_AppData.FilterTblErrCounter++;
        -:  355:
        -:  356:            /*
        -:  357:            ** Make sure we don't try to use the empty table buffer...
        -:  358:            */
        3:  359:            DS_AppData.FilterTblPtr = (DS_FilterTable_t *) NULL;
        -:  360:        }
        -:  361:    }
        -:  362:    else
        -:  363:    {
        -:  364:        /*
        -:  365:        ** Already have initial filter table data...
        -:  366:        */
        7:  367:        Result = CFE_TBL_GetStatus(DS_AppData.FilterTblHandle);
        -:  368:
        7:  369:        if (Result == CFE_TBL_INFO_DUMP_PENDING)
        -:  370:        {
        -:  371:            /*
        -:  372:            ** Dump the current filter table data...
        -:  373:            */
    #####:  374:            CFE_TBL_DumpToBuffer(DS_AppData.FilterTblHandle);       
        -:  375:        }
        7:  376:        else if (Result == CFE_TBL_INFO_VALIDATION_PENDING)
        -:  377:        {
        -:  378:            /*
        -:  379:            ** Validate the pending filter table data...
        -:  380:            */
        1:  381:            CFE_TBL_Validate(DS_AppData.FilterTblHandle);
        -:  382:        }
        6:  383:        else if (Result == CFE_TBL_INFO_UPDATE_PENDING)
        -:  384:        {
        -:  385:            /*
        -:  386:            ** Update the current filter table with new data...
        -:  387:            */
        3:  388:            DS_AppData.FilterTblLoadCounter++;
        -:  389:
        -:  390:            /*
        -:  391:            ** Un-subscribe to the packets in the old filter table...
        -:  392:            */
        3:  393:            DS_TableUnsubscribe();
        -:  394:
        -:  395:            /*
        -:  396:            ** Allow cFE to update the filter table data...
        -:  397:            */
        3:  398:            CFE_TBL_ReleaseAddress(DS_AppData.FilterTblHandle);
        3:  399:            CFE_TBL_Update(DS_AppData.FilterTblHandle);
        3:  400:            CFE_TBL_GetAddress((void *)&DS_AppData.FilterTblPtr,
        -:  401:                                        DS_AppData.FilterTblHandle);
        -:  402:            /*
        -:  403:            ** Subscribe to the packets in the new filter table...
        -:  404:            */
        3:  405:            DS_TableSubscribe();
        -:  406:        }
        -:  407:    }
        -:  408:
       12:  409:    return;
        -:  410:
        -:  411:} /* End of DS_TableManageFilter() */
        -:  412:
        -:  413:
        -:  414:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  415:/*                                                                 */
        -:  416:/* DS_TableVerifyDestFile() - validate table data                  */
        -:  417:/*                                                                 */
        -:  418:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  419:
        -:  420:int32 DS_TableVerifyDestFile(void *TableData)
function DS_TableVerifyDestFile called 3 returned 100% blocks executed 100%
        3:  421:{
        3:  422:    DS_DestFileTable_t *DestFileTable = (DS_DestFileTable_t *) TableData;
        3:  423:    int32 Result = CFE_SUCCESS;
        3:  424:    int32 i;
        -:  425:
        3:  426:    int32 CountGood   = 0;
        3:  427:    int32 CountBad    = 0;
        3:  428:    int32 CountUnused = 0;
        -:  429:
        -:  430:    /*
        -:  431:    ** Perform the following "per table" validation:
        -:  432:    **
        -:  433:    **   Descriptor = zero terminated text string (optional)
        -:  434:    */
        3:  435:    if (CFS_VerifyString(DestFileTable->Descriptor, DS_DESCRIPTOR_BUFSIZE,
        -:  436:                         DS_STRING_OPTIONAL, DS_DESCRIPTIVE_TEXT) == FALSE)
        -:  437:    {
        1:  438:        CFE_EVS_SendEvent(DS_FIL_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  439:                         "Destination file table verify err: invalid descriptor text");
        -:  440:
        1:  441:        CountBad++;
        1:  442:        Result = DS_TABLE_VERIFY_ERR;
        -:  443:    }
        -:  444:    else
        -:  445:    {
        2:  446:        CountGood++;
        -:  447:    }
        -:  448:
        -:  449:    /*
        -:  450:    ** Each entry in table will be unused, good or bad
        -:  451:    */
       51:  452:    for (i = 0; i < DS_DEST_FILE_CNT; i++)
        -:  453:    {
       48:  454:        if (DS_TableEntryUnused(&DestFileTable->File[i], sizeof(DS_DestFileEntry_t)) == TRUE)
        -:  455:        {
       37:  456:            CountUnused++;
        -:  457:        }
       11:  458:        else if (DS_TableVerifyDestFileEntry(&DestFileTable->File[i], (uint8) i, CountBad) == TRUE)
        -:  459:        {
        9:  460:            CountGood++;
        -:  461:        }
        -:  462:        else
        -:  463:        {
        2:  464:            CountBad++;
        2:  465:            Result = DS_TABLE_VERIFY_ERR;
        -:  466:        }
        -:  467:    }
        -:  468:
        -:  469:    /*
        -:  470:    ** Note that totals include each table entry plus the descriptor
        -:  471:    */
        3:  472:    CFE_EVS_SendEvent(DS_FIL_TBL_EID, CFE_EVS_DEBUG,
        -:  473:                     "Destination file table verify results: good = %d, bad = %d, unused = %d",
        -:  474:                      CountGood, CountBad, CountUnused);
        -:  475:
        3:  476:    return(Result);
        -:  477:
        -:  478:} /* End of DS_TableVerifyDestFile() */
        -:  479:
        -:  480:
        -:  481:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  482:/*                                                                 */
        -:  483:/* DS_TableVerifyDestFileEntry() - verify dest table entry         */
        -:  484:/*                                                                 */
        -:  485:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  486:
        -:  487:boolean DS_TableVerifyDestFileEntry(DS_DestFileEntry_t *DestFileEntry,
        -:  488:                                    uint8 TableIndex, int32 ErrorCount)
function DS_TableVerifyDestFileEntry called 20 returned 100% blocks executed 100%
       20:  489:{
       20:  490:    char *CommonErrorText = "Destination file table verify err:";
       20:  491:    boolean Result = TRUE;
        -:  492:
        -:  493:    /*
        -:  494:    ** Perform the following "per table entry" validation:
        -:  495:    **
        -:  496:    **   Pathname  = zero terminated text string (required)
        -:  497:    **   Basename  = zero terminated text string (optional)
        -:  498:    **   Extension = zero terminated text string (optional)
        -:  499:    **
        -:  500:    **  FileNameType = DS_BY_COUNT or DS_BY_TIME
        -:  501:    **  EnableState  = DS_ENABLED or DS_DISABLED
        -:  502:    **
        -:  503:    **  MaxFileSize   = cannot be less than DS_FILE_MIN_SIZE_LIMIT
        -:  504:    **  MaxFileAge    = cannot be less than DS_FILE_MIN_AGE_LIMIT
        -:  505:    **  SequenceCount = may be zero, cannot exceed DS_MAX_SEQUENCE_COUNT
        -:  506:    */
       20:  507:    if (CFS_VerifyString(DestFileEntry->Pathname, DS_PATHNAME_BUFSIZE,
        -:  508:                         DS_STRING_REQUIRED, DS_FILENAME_TEXT) == FALSE)
        -:  509:    {
        1:  510:        if (ErrorCount == 0)
        -:  511:        {
        1:  512:            CFE_EVS_SendEvent(DS_FIL_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  513:                             "%s index = %d, invalid pathname text",
        -:  514:                              CommonErrorText, TableIndex);
        -:  515:        }
        1:  516:        Result = FALSE;
        -:  517:    }
       19:  518:    else if (CFS_VerifyString(DestFileEntry->Basename, DS_BASENAME_BUFSIZE,
        -:  519:                              DS_STRING_OPTIONAL, DS_FILENAME_TEXT) == FALSE)
        -:  520:    {
        1:  521:        if (ErrorCount == 0)
        -:  522:        {
        1:  523:            CFE_EVS_SendEvent(DS_FIL_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  524:                             "%s index = %d, invalid basename text",
        -:  525:                              CommonErrorText, TableIndex);
        -:  526:        }
        1:  527:        Result = FALSE;
        -:  528:    }
       18:  529:    else if (CFS_VerifyString(DestFileEntry->Extension, DS_EXTENSION_BUFSIZE,
        -:  530:                              DS_STRING_OPTIONAL, DS_FILENAME_TEXT) == FALSE)
        -:  531:    {
        1:  532:        if (ErrorCount == 0)
        -:  533:        {
        1:  534:            CFE_EVS_SendEvent(DS_FIL_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  535:                             "%s index = %d, invalid extension text",
        -:  536:                              CommonErrorText, TableIndex);
        -:  537:        }
        1:  538:        Result = FALSE;
        -:  539:    }
       17:  540:    else if (DS_TableVerifyType(DestFileEntry->FileNameType) == FALSE)
        -:  541:    {
        3:  542:        if (ErrorCount == 0)
        -:  543:        {
        2:  544:            CFE_EVS_SendEvent(DS_FIL_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  545:                             "%s index = %d, filename type = %d",
        -:  546:                              CommonErrorText, TableIndex, DestFileEntry->FileNameType);
        -:  547:        }
        3:  548:        Result = FALSE;
        -:  549:    }
       14:  550:    else if (DS_TableVerifyState(DestFileEntry->EnableState) == FALSE)
        -:  551:    {
        1:  552:        if (ErrorCount == 0)
        -:  553:        {
        1:  554:            CFE_EVS_SendEvent(DS_FIL_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  555:                             "%s index = %d, file enable state = %d",
        -:  556:                              CommonErrorText, TableIndex, DestFileEntry->EnableState);
        -:  557:        }
        1:  558:        Result = FALSE;
        -:  559:    }
       13:  560:    else if (DS_TableVerifySize(DestFileEntry->MaxFileSize) == FALSE)
        -:  561:    {
        1:  562:        if (ErrorCount == 0)
        -:  563:        {
        1:  564:            CFE_EVS_SendEvent(DS_FIL_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  565:                             "%s index = %d, max file size = %d",
        -:  566:                              CommonErrorText, TableIndex, DestFileEntry->MaxFileSize);
        -:  567:        }
        1:  568:        Result = FALSE;
        -:  569:    }
       12:  570:    else if (DS_TableVerifyAge(DestFileEntry->MaxFileAge) == FALSE)
        -:  571:    {
        1:  572:        if (ErrorCount == 0)
        -:  573:        {
        1:  574:            CFE_EVS_SendEvent(DS_FIL_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  575:                             "%s index = %d, max file age = %d",
        -:  576:                              CommonErrorText, TableIndex, DestFileEntry->MaxFileAge);
        -:  577:        }
        1:  578:        Result = FALSE;
        -:  579:    }
       11:  580:    else if (DS_TableVerifyCount(DestFileEntry->SequenceCount) == FALSE)
        -:  581:    {
        1:  582:        if (ErrorCount == 0)
        -:  583:        {
        1:  584:            CFE_EVS_SendEvent(DS_FIL_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  585:                             "%s index = %d, sequence count = %d",
        -:  586:                              CommonErrorText, TableIndex, DestFileEntry->SequenceCount);
        -:  587:        }
        1:  588:        Result = FALSE;
        -:  589:    }
        -:  590:
       20:  591:    return(Result);
        -:  592:
        -:  593:} /* End of DS_TableVerifyDestFileEntry() */
        -:  594:
        -:  595:
        -:  596:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  597:/*                                                                 */
        -:  598:/* DS_TableVerifyFilter() - validate table data                    */
        -:  599:/*                                                                 */
        -:  600:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  601:
        -:  602:int32 DS_TableVerifyFilter(void *TableData)
function DS_TableVerifyFilter called 3 returned 100% blocks executed 100%
        3:  603:{
        3:  604:    DS_FilterTable_t *FilterTable = (DS_FilterTable_t *) TableData;
        3:  605:    int32 Result = CFE_SUCCESS;
        3:  606:    int32 i;
        -:  607:
        3:  608:    int32 CountGood   = 0;
        3:  609:    int32 CountBad    = 0;
        3:  610:    int32 CountUnused = 0;
        -:  611:
        -:  612:    /*
        -:  613:    ** Perform the following validation:
        -:  614:    **
        -:  615:    **   Descriptor = zero terminated text string (may be empty)
        -:  616:    **
        -:  617:    **   MessageID = unlimited, zero means unused
        -:  618:    */
        3:  619:    if (CFS_VerifyString(FilterTable->Descriptor, DS_DESCRIPTOR_BUFSIZE,
        -:  620:                         DS_STRING_OPTIONAL, DS_DESCRIPTIVE_TEXT) == FALSE)
        -:  621:    {
        1:  622:        CFE_EVS_SendEvent(DS_FLT_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  623:                         "Filter table verify err: invalid descriptor text");
        -:  624:
        1:  625:        CountBad++;
        1:  626:        Result = DS_TABLE_VERIFY_ERR;
        -:  627:    }
        -:  628:    else
        -:  629:    {
        2:  630:        CountGood++;
        -:  631:    }
        -:  632:
        -:  633:    /*
        -:  634:    ** Each entry in table will be unused, good or bad
        -:  635:    */
      771:  636:    for (i = 0; i < DS_PACKETS_IN_FILTER_TABLE; i++)
        -:  637:    {
      768:  638:        if (FilterTable->Packet[i].MessageID == DS_UNUSED)
        -:  639:        {
      747:  640:            CountUnused++;
        -:  641:        }
       21:  642:        else if (DS_TableVerifyFilterEntry(&FilterTable->Packet[i], (uint8) i, CountBad) == TRUE)
        -:  643:        {
       19:  644:            CountGood++;
        -:  645:        }
        -:  646:        else
        -:  647:        {
        2:  648:            CountBad++;
        2:  649:            Result = DS_TABLE_VERIFY_ERR;
        -:  650:        }
        -:  651:    }
        -:  652:
        -:  653:    /*
        -:  654:    ** Note that totals include each table entry plus the descriptor
        -:  655:    */
        3:  656:    CFE_EVS_SendEvent(DS_FLT_TBL_EID, CFE_EVS_DEBUG,
        -:  657:                     "Filter table verify results: good = %d, bad = %d, unused = %d",
        -:  658:                      CountGood, CountBad, CountUnused);
        -:  659:
        3:  660:    return(Result);
        -:  661:
        -:  662:} /* End of DS_TableVerifyFilter() */
        -:  663:
        -:  664:
        -:  665:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  666:/*                                                                 */
        -:  667:/* DS_TableVerifyFilterEntry() - verify filter table entry         */
        -:  668:/*                                                                 */
        -:  669:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  670:
        -:  671:boolean DS_TableVerifyFilterEntry(DS_PacketEntry_t *PacketEntry,
        -:  672:                                  int32 TableIndex, int32 ErrorCount)
function DS_TableVerifyFilterEntry called 27 returned 100% blocks executed 100%
       27:  673:{
       27:  674:    char *CommonErrorText = "Filter table verify err:";
       27:  675:    DS_FilterParms_t *FilterParms;
       27:  676:    boolean Result = TRUE;
       27:  677:    int32 i;
        -:  678:
        -:  679:    /*
        -:  680:    ** Each packet filter table entry has multiple filters per packet
        -:  681:    **
        -:  682:    ** Perform the following validation (per filter):
        -:  683:    **
        -:  684:    **   FileTableIndex = must be less than DS_DEST_FILE_CNT
        -:  685:    **   FilterType = must be DS_BY_COUNT or DS_BY_TIME
        -:  686:    **
        -:  687:    **   Algorithm_N = cannot exceed Algorithm_X, zero means filter ALL
        -:  688:    **   Algorithm_X = unlimited
        -:  689:    **   Algorithm_O = must be less than Algorithm_X
        -:  690:    **
        -:  691:    **   Note: unused filters (all zero's) are valid
        -:  692:    */
      120:  693:    for (i = 0; (i < DS_FILTERS_PER_PACKET) && (Result == TRUE); i++)
        -:  694:    {
       93:  695:        FilterParms = &PacketEntry->Filter[i];
        -:  696:
       93:  697:        if (DS_TableEntryUnused(FilterParms, sizeof(DS_FilterParms_t)) == FALSE)
        -:  698:        {
        -:  699:            /*
        -:  700:            ** If any filter field is non-zero then all filter fields must be valid
        -:  701:            */
       36:  702:            if (DS_TableVerifyFileIndex((uint32) FilterParms->FileTableIndex) == FALSE)
        -:  703:            {
        3:  704:                if (ErrorCount == 0)
        -:  705:                {
        2:  706:                    CFE_EVS_SendEvent(DS_FLT_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  707:                                     "%s MID = 0x%04X, index = %d, filter = %d, file table index = %d",
        -:  708:                                      CommonErrorText, PacketEntry->MessageID,
        -:  709:                                      TableIndex, i, FilterParms->FileTableIndex);
        -:  710:                }
        3:  711:                Result = FALSE;
        -:  712:            }
       33:  713:            else if (DS_TableVerifyType((uint16) FilterParms->FilterType) == FALSE)
        -:  714:            {
        1:  715:                if (ErrorCount == 0)
        -:  716:                {
        1:  717:                    CFE_EVS_SendEvent(DS_FLT_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  718:                                     "%s MID = 0x%04X, index = %d, filter = %d, filter type = %d",
        -:  719:                                      CommonErrorText, PacketEntry->MessageID,
        -:  720:                                      TableIndex, i, FilterParms->FilterType);
        -:  721:                }
        1:  722:                Result = FALSE;
        -:  723:            }
       32:  724:            else if (DS_TableVerifyParms(FilterParms->Algorithm_N,
        -:  725:                                         FilterParms->Algorithm_X,
        -:  726:                                         FilterParms->Algorithm_O) == FALSE)
        -:  727:            {
        1:  728:                if (ErrorCount == 0)
        -:  729:                {
        1:  730:                    CFE_EVS_SendEvent(DS_FLT_TBL_ERR_EID, CFE_EVS_ERROR,
        -:  731:                                     "%s MID = 0x%04X, index = %d, filter = %d, filter parms N = %d, X = %d, O = %d",
        -:  732:                                      CommonErrorText, PacketEntry->MessageID, TableIndex, i,
        -:  733:                                      FilterParms->Algorithm_N,
        -:  734:                                      FilterParms->Algorithm_X,
        -:  735:                                      FilterParms->Algorithm_O);
        -:  736:                }
        1:  737:                Result = FALSE;
        -:  738:            }
        -:  739:        }
        -:  740:    }
        -:  741:
       27:  742:    return(Result);
        -:  743:
        -:  744:} /* End of DS_TableVerifyFilterEntry() */
        -:  745:
        -:  746:
        -:  747:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  748:/*                                                                 */
        -:  749:/* DS_TableEntryUnused() - find unused table entries               */
        -:  750:/*                                                                 */
        -:  751:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  752:
        -:  753:boolean DS_TableEntryUnused(void *TableEntry, int32 BufferSize)
function DS_TableEntryUnused called 143 returned 100% blocks executed 100%
      143:  754:{
      143:  755:    char *Buffer = (char *) TableEntry;
      143:  756:    boolean Result = TRUE;
      143:  757:    int32 i;
        -:  758:
     6258:  759:    for (i = 0; i < BufferSize; i++)
        -:  760:    {
     6163:  761:        if (Buffer[i] != DS_UNUSED)
        -:  762:        {
       48:  763:            Result = FALSE;
       48:  764:            break;
        -:  765:        }
        -:  766:    }
        -:  767:
      143:  768:    return(Result);
        -:  769:
        -:  770:} /* End of DS_TableEntryUnused() */
        -:  771:
        -:  772:
        -:  773:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  774:/*                                                                 */
        -:  775:/* DS_TableVerifyFileIndex() - verify dest file index              */
        -:  776:/*                                                                 */
        -:  777:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  778:
        -:  779:boolean DS_TableVerifyFileIndex(uint16 FileTableIndex)
function DS_TableVerifyFileIndex called 103 returned 100% blocks executed 100%
      103:  780:{
      103:  781:    boolean Result = TRUE;
        -:  782:
      103:  783:    if (FileTableIndex >= DS_DEST_FILE_CNT)
        -:  784:    {
       24:  785:        Result = FALSE;
        -:  786:    }
        -:  787:
      103:  788:    return(Result);
        -:  789:
        -:  790:} /* End of DS_TableVerifyFileIndex() */
        -:  791:
        -:  792:
        -:  793:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  794:/*                                                                 */
        -:  795:/* DS_TableVerifyParms() - verify algorithm parameters             */
        -:  796:/*                                                                 */
        -:  797:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  798:
        -:  799:boolean DS_TableVerifyParms(uint16 Algorithm_N, uint16 Algorithm_X, uint16 Algorithm_O)
function DS_TableVerifyParms called 43 returned 100% blocks executed 100%
       43:  800:{
       43:  801:    boolean Result = TRUE;
        -:  802:
        -:  803:    /*
        -:  804:    ** Unused entries (all zero's) are valid
        -:  805:    */
       43:  806:    if ((Algorithm_N != 0) || (Algorithm_N != 0) || (Algorithm_N != 0))
        -:  807:    {
       41:  808:        if (Algorithm_N > Algorithm_X)
        -:  809:        {
        -:  810:            /*
        -:  811:            ** "pass this many" cannot exceed "out of this many"
        -:  812:            */
        3:  813:            Result = FALSE;
        -:  814:        }
       38:  815:        else if (Algorithm_O >= Algorithm_X)
        -:  816:        {
        -:  817:            /*
        -:  818:            ** "at this offset" must be less than "out of this many"
        -:  819:            */
        2:  820:            Result = FALSE;
        -:  821:        }
        -:  822:    }
        -:  823:
       43:  824:    return(Result);
        -:  825:
        -:  826:} /* End of DS_TableVerifyParms() */
        -:  827:
        -:  828:
        -:  829:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  830:/*                                                                 */
        -:  831:/* DS_TableVerifyType() - verify filter or filename type           */
        -:  832:/*                                                                 */
        -:  833:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  834:
        -:  835:boolean DS_TableVerifyType(uint16 TimeVsCount)
function DS_TableVerifyType called 62 returned 100% blocks executed 100%
       62:  836:{
       62:  837:    boolean Result = TRUE;
        -:  838:
       62:  839:    if ((TimeVsCount != DS_BY_COUNT) && (TimeVsCount != DS_BY_TIME))
        -:  840:    {
        9:  841:        Result = FALSE;
        -:  842:    }
        -:  843:
       62:  844:    return(Result);
        -:  845:
        -:  846:} /* End of DS_TableVerifyType() */
        -:  847:
        -:  848:
        -:  849:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  850:/*                                                                 */
        -:  851:/* DS_TableVerifyState() - verify file ena/dis state               */
        -:  852:/*                                                                 */
        -:  853:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  854:
        -:  855:boolean DS_TableVerifyState(uint16 EnableState)
function DS_TableVerifyState called 30 returned 100% blocks executed 100%
       30:  856:{
       30:  857:    boolean Result = TRUE;
        -:  858:
       30:  859:    if ((EnableState != DS_ENABLED) && (EnableState != DS_DISABLED))
        -:  860:    {
        5:  861:        Result = FALSE;
        -:  862:    }
        -:  863:
       30:  864:    return(Result);
        -:  865:
        -:  866:} /* End of DS_TableVerifyState() */
        -:  867:
        -:  868:
        -:  869:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  870:/*                                                                 */
        -:  871:/* DS_TableVerifySize() - verify file size limit                   */
        -:  872:/*                                                                 */
        -:  873:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  874:
        -:  875:boolean DS_TableVerifySize(uint32 MaxFileSize)
function DS_TableVerifySize called 18 returned 100% blocks executed 100%
       18:  876:{
       18:  877:    boolean Result = TRUE;
        -:  878:
       18:  879:    if (MaxFileSize < DS_FILE_MIN_SIZE_LIMIT)
        -:  880:    {
        3:  881:        Result = FALSE;
        -:  882:    }
        -:  883:
       18:  884:    return(Result);
        -:  885:
        -:  886:} /* End of DS_TableVerifySize() */
        -:  887:
        -:  888:
        -:  889:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  890:/*                                                                 */
        -:  891:/* DS_TableVerifyAge() - verify file age limit                     */
        -:  892:/*                                                                 */
        -:  893:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  894:
        -:  895:boolean DS_TableVerifyAge(uint32 MaxFileAge)
function DS_TableVerifyAge called 17 returned 100% blocks executed 100%
       17:  896:{
       17:  897:    boolean Result = TRUE;
        -:  898:
       17:  899:    if (MaxFileAge < DS_FILE_MIN_AGE_LIMIT)
        -:  900:    {
        3:  901:        Result = FALSE;
        -:  902:    }
        -:  903:
       17:  904:    return(Result);
        -:  905:
        -:  906:} /* End of DS_TableVerifyAge() */
        -:  907:
        -:  908:
        -:  909:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  910:/*                                                                 */
        -:  911:/* DS_TableVerifyCount() - verify sequence count                   */
        -:  912:/*                                                                 */
        -:  913:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  914:
        -:  915:boolean DS_TableVerifyCount(uint32 SequenceCount)
function DS_TableVerifyCount called 16 returned 100% blocks executed 100%
       16:  916:{
       16:  917:    boolean Result = TRUE;
        -:  918:
       16:  919:    if (SequenceCount > DS_MAX_SEQUENCE_COUNT)
        -:  920:    {
        3:  921:        Result = FALSE;
        -:  922:    }
        -:  923:
       16:  924:    return(Result);
        -:  925:
        -:  926:} /* End of DS_TableVerifyCount() */
        -:  927:
        -:  928:
        -:  929:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  930:/*                                                                 */
        -:  931:/* DS_TableSubscribe() - process new filter table                  */
        -:  932:/*                                                                 */
        -:  933:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  934:
        -:  935:void DS_TableSubscribe(void)
function DS_TableSubscribe called 6 returned 100% blocks executed 100%
        6:  936:{
        6:  937:    DS_PacketEntry_t *FilterPackets;
        6:  938:    CFE_SB_MsgId_t MessageID;
        6:  939:    int32 i;
        -:  940:
        6:  941:    FilterPackets = DS_AppData.FilterTblPtr->Packet;
        -:  942:
        -:  943:    /*
        -:  944:    ** Check each entry in "new" packet filter table...
        -:  945:    */
     1542:  946:    for (i = 0; i < DS_PACKETS_IN_FILTER_TABLE; i++)
        -:  947:    {
     1536:  948:        MessageID = FilterPackets[i].MessageID;
        -:  949:
        -:  950:        /*
        -:  951:        ** Already subscribe to DS command packets...
        -:  952:        */
     1536:  953:        if ((MessageID != DS_UNUSED) &&
        -:  954:            (MessageID != DS_CMD_MID) &&
        -:  955:            (MessageID != DS_SEND_HK_MID))
        -:  956:        {
       16:  957:            CFE_SB_Subscribe(MessageID, DS_AppData.InputPipe);
        -:  958:        }
        -:  959:    }
        -:  960:
        6:  961:    return;
        -:  962:
        -:  963:} /* End of DS_TableSubscribe() */
        -:  964:
        -:  965:
        -:  966:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  967:/*                                                                 */
        -:  968:/* DS_TableUnsubscribe() - process old filter table                */
        -:  969:/*                                                                 */
        -:  970:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  971:
        -:  972:void DS_TableUnsubscribe(void)
function DS_TableUnsubscribe called 4 returned 100% blocks executed 100%
        4:  973:{
        4:  974:    DS_PacketEntry_t *FilterPackets;
        4:  975:    CFE_SB_MsgId_t MessageID;
        4:  976:    int32 i;
        -:  977:
        4:  978:    FilterPackets = DS_AppData.FilterTblPtr->Packet;
        -:  979:
        -:  980:    /*
        -:  981:    ** Check each entry in "old" packet filter table...
        -:  982:    */
     1028:  983:    for (i = 0; i < DS_PACKETS_IN_FILTER_TABLE; i++)
        -:  984:    {
     1024:  985:        MessageID = FilterPackets[i].MessageID;
        -:  986:
        -:  987:        /*
        -:  988:        ** Do not un-subscribe to unused or DS command packets...
        -:  989:        */
     1024:  990:        if ((MessageID != DS_UNUSED) &&
        -:  991:            (MessageID != DS_CMD_MID) &&
        -:  992:            (MessageID != DS_SEND_HK_MID))
        -:  993:        {
        1:  994:            CFE_SB_Unsubscribe(MessageID, DS_AppData.InputPipe);
        -:  995:        }
        -:  996:    }
        -:  997:
        4:  998:    return;
        -:  999:
        -: 1000:} /* End of DS_TableUnsubscribe() */
        -: 1001:
        -: 1002:
        -: 1003:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1004:/*                                                                 */
        -: 1005:/* DS_TableFindMsgID() - get filter table index for MID            */
        -: 1006:/*                                                                 */
        -: 1007:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1008:
        -: 1009:int32 DS_TableFindMsgID(CFE_SB_MsgId_t MessageID)
function DS_TableFindMsgID called 16 returned 100% blocks executed 100%
       16: 1010:{
       16: 1011:    DS_PacketEntry_t *FilterPackets;
       16: 1012:    int32 FilterTableIndex = DS_INDEX_NONE;
       16: 1013:    int32 i;
        -: 1014:
       16: 1015:    FilterPackets = DS_AppData.FilterTblPtr->Packet;
        -: 1016:
        -: 1017:    /*
        -: 1018:    ** Check each entry in packet filter table...
        -: 1019:    */
     3140: 1020:    for (i = 0; i < DS_PACKETS_IN_FILTER_TABLE; i++)
        -: 1021:    {
     3132: 1022:        if (FilterPackets[i].MessageID == MessageID)
        -: 1023:        {
        -: 1024:            /*
        -: 1025:            ** Found entry for this messageID...
        -: 1026:            */
        8: 1027:            FilterTableIndex = i;
        8: 1028:            break;
        -: 1029:        }
        -: 1030:    }
        -: 1031:
       16: 1032:    return(FilterTableIndex);
        -: 1033:
        -: 1034:} /* End of DS_TableFindMsgID() */
        -: 1035:
        -: 1036:
        -: 1037:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1038:/*                                                                 */
        -: 1039:/* DS_TableCreateCDS() - create DS storage area in CDS             */
        -: 1040:/*                                                                 */
        -: 1041:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1042:
        -: 1043:int32 DS_TableCreateCDS(void)
function DS_TableCreateCDS called 3 returned 100% blocks executed 100%
        3: 1044:{
        3: 1045:    uint32 DataStoreBuffer[DS_DEST_FILE_CNT];
        3: 1046:    int32 Result;
        3: 1047:    int32 i;
        -: 1048:
        -: 1049:    /*
        -: 1050:    ** Request for CDS area from cFE Executive Services...
        -: 1051:    */
        3: 1052:    Result = CFE_ES_RegisterCDS(&DS_AppData.DataStoreHandle,
        -: 1053:                                 sizeof(DataStoreBuffer), DS_CDS_NAME);
        -: 1054:
        3: 1055:    if (Result == CFE_SUCCESS)
        -: 1056:    {
        -: 1057:        /*
        -: 1058:        ** New CDS area - initialize the CDS data...
        -: 1059:        */
       17: 1060:        for (i = 0; i < DS_DEST_FILE_CNT; i++)
        -: 1061:        {
       16: 1062:            DataStoreBuffer[i] = DS_AppData.FileStatus[i].FileCount;
        -: 1063:        }
        -: 1064:
        1: 1065:        Result = CFE_ES_CopyToCDS(DS_AppData.DataStoreHandle, DataStoreBuffer);
        -: 1066:    }
        2: 1067:    else if (Result == CFE_ES_CDS_ALREADY_EXISTS)
        -: 1068:    {
        -: 1069:        /*
        -: 1070:        ** Pre-existing CDS area - update local status data...
        -: 1071:        */
        1: 1072:        Result = CFE_ES_RestoreFromCDS(DataStoreBuffer, DS_AppData.DataStoreHandle);
        -: 1073:
        1: 1074:        if (Result == CFE_SUCCESS)
        -: 1075:        {
       17: 1076:            for (i = 0; i < DS_DEST_FILE_CNT; i++)
        -: 1077:            {
       16: 1078:                DS_AppData.FileStatus[i].FileCount = DataStoreBuffer[i];
        -: 1079:            }
        -: 1080:        }
        -: 1081:    }
        -: 1082:
        3: 1083:    if (Result != CFE_SUCCESS)
        -: 1084:    {
        -: 1085:        /*
        -: 1086:        ** CDS is broken - prevent further errors...
        -: 1087:        */
        1: 1088:        DS_AppData.DataStoreHandle = 0;
        -: 1089:
        1: 1090:        CFE_EVS_SendEvent(DS_INIT_CDS_ERR_EID, CFE_EVS_ERROR,
        -: 1091:                         "Critical Data Store access error = 0x%08X", Result);
        -: 1092:        /*
        -: 1093:        ** CDS errors are not fatal - DS can still run...
        -: 1094:        */
        1: 1095:        Result = CFE_SUCCESS;
        -: 1096:    }
        -: 1097:
        3: 1098:    return(Result);
        -: 1099:
        -: 1100:} /* End of DS_TableCreateCDS() */
        -: 1101:
        -: 1102:
        -: 1103:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1104:/*                                                                 */
        -: 1105:/* DS_TableUpdateCDS() - update DS storage area in CDS             */
        -: 1106:/*                                                                 */
        -: 1107:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1108:
        -: 1109:void DS_TableUpdateCDS(void)
function DS_TableUpdateCDS called 10 returned 100% blocks executed 100%
       10: 1110:{
       10: 1111:    uint32 DataStoreBuffer[DS_DEST_FILE_CNT];
       10: 1112:    int32 Result;
       10: 1113:    int32 i;
        -: 1114:
        -: 1115:    /*
        -: 1116:    ** Handle is non-zero when CDS is active...
        -: 1117:    */
       10: 1118:    if (DS_AppData.DataStoreHandle != 0)
        -: 1119:    {
        -: 1120:        /*
        -: 1121:        ** Copy current sequence count values to simple data array...
        -: 1122:        */
      102: 1123:        for (i = 0; i < DS_DEST_FILE_CNT; i++)
        -: 1124:        {
       96: 1125:            DataStoreBuffer[i] = DS_AppData.FileStatus[i].FileCount;
        -: 1126:        }
        -: 1127:
        -: 1128:        /*
        -: 1129:        ** Update CDS with current sequence count values...
        -: 1130:        */
        6: 1131:        Result = CFE_ES_CopyToCDS(DS_AppData.DataStoreHandle, DataStoreBuffer);
        -: 1132:
        6: 1133:        if (Result != CFE_SUCCESS)
        -: 1134:        {
        1: 1135:            CFE_EVS_SendEvent(DS_INIT_CDS_ERR_EID, CFE_EVS_ERROR,
        -: 1136:                             "Critical Data Store access error = 0x%08X", Result);
        -: 1137:            /*
        -: 1138:            ** CDS is broken - prevent further errors...
        -: 1139:            */
        1: 1140:            DS_AppData.DataStoreHandle = 0;
        -: 1141:        }
        -: 1142:    }
        -: 1143:
       10: 1144:    return;
        -: 1145:
        -: 1146:} /* End of DS_TableUpdateCDS() */
        -: 1147:
        -: 1148:
        -: 1149:/************************/
        -: 1150:/*  End of File Comment */
        -: 1151:/************************/
