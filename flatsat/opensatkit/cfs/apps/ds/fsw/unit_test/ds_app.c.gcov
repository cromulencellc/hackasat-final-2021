        -:    0:Source:../src/ds_app.c
        -:    0:Graph:ds_app.gcno
        -:    0:Data:ds_app.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************************************
        -:    2:** File:
        -:    3:**   $Id: ds_app.c.gcov 1.1 2009/12/07 13:43:51EST lwalling Exp  $
        -:    4:**
        -:    5:** Purpose:
        -:    6:**  The CFS Data Storage (DS) Application file containing the application
        -:    7:**  initialization routines, the main routine and the command interface.
        -:    8:**
        -:    9:** Notes:
        -:   10:**
        -:   11:** $Log: ds_app.c.gcov  $
        -:   11:** Revision 1.1 2009/12/07 13:43:51EST lwalling 
        -:   11:** Initial revision
        -:   11:** Member added to project c:/MKSDATA/MKS-REPOSITORY/CFS-REPOSITORY/ds/fsw/unit_test/project.pj
        -:   12:** Revision 1.10 2009/08/31 16:47:47EDT lwalling 
        -:   13:** Remove references to DS_1HZ_MID and process file age tests during housekeeping request
        -:   14:** Revision 1.9 2009/08/28 16:47:56EDT lwalling 
        -:   15:** Add support for storing sequence counts in CDS
        -:   16:** Revision 1.8 2009/08/27 16:32:35EDT lwalling 
        -:   17:** Updates from source code review
        -:   18:** Revision 1.7 2009/06/12 11:55:39EDT lwalling 
        -:   19:** Moved function prototypes to header file, moved file age test function to file specific source module.
        -:   20:** Revision 1.6 2009/05/27 16:34:25EDT lwalling 
        -:   21:** Doxygen updates for ds_app.c and ds_app.h
        -:   22:** Revision 1.5 2009/05/26 14:21:05EDT lwalling 
        -:   23:** Initial version of DS application
        -:   24:** Revision 1.4 2008/12/17 15:34:18EST rmcgraw 
        -:   25:** DCR4669:2 Added utility files
        -:   26:** Revision 1.3 2008/12/02 14:39:18EST rmcgraw 
        -:   27:** DCR4669:1 Changed size param in tbl reg call for filter table
        -:   28:** Revision 1.2 2008/11/25 15:34:53EST rmcgraw 
        -:   29:** DCR4669:1 Fixed unresolved symbols
        -:   30:** Revision 1.1 2008/11/25 11:36:24EST rmcgraw 
        -:   31:** Initial revision - pre code review, first compiled version
        -:   32:** Member added to CFS project
        -:   33:**
        -:   34:*************************************************************************/
        -:   35:
        -:   36:#include "cfe.h"
        -:   37:
        -:   38:#include "ds_perfids.h"
        -:   39:#include "ds_msgids.h"
        -:   40:
        -:   41:#include "ds_platform_cfg.h"
        -:   42:#include "ds_verify.h"
        -:   43:
        -:   44:#include "ds_appdefs.h"
        -:   45:
        -:   46:#include "ds_msg.h"
        -:   47:#include "ds_app.h"
        -:   48:#include "ds_cmds.h"
        -:   49:#include "ds_file.h"
        -:   50:#include "ds_table.h"
        -:   51:#include "ds_events.h"
        -:   52:#include "ds_msgdefs.h"
        -:   53:#include "ds_version.h"
        -:   54:
        -:   55:#include "string.h"
        -:   56:
        -:   57:
        -:   58:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   59:/*                                                                 */
        -:   60:/* DS_AppData -- application global data structure                 */
        -:   61:/*                                                                 */
        -:   62:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   63:
        -:   64:DS_AppData_t DS_AppData;
        -:   65:
        -:   66:
        -:   67:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   68:/*                                                                 */
        -:   69:/* DS_AppMain() -- application entry point and main process loop   */
        -:   70:/*                                                                 */
        -:   71:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   72:
        -:   73:void DS_AppMain(void)
function DS_AppMain called 2 returned 50% blocks executed 100%
        2:   74:{
        2:   75:    CFE_SB_MsgPtr_t MessagePtr;
        2:   76:    int32 Result;
        2:   77:    uint32 RunStatus = CFE_ES_APP_RUN;
        -:   78:
        -:   79:    /*
        -:   80:    ** Performance Log (start time counter)...
        -:   81:    */
        2:   82:    CFE_ES_PerfLogEntry(DS_APPMAIN_PERF_ID);
        -:   83:
        -:   84:    /*
        -:   85:    ** Register application...
        -:   86:    */
        2:   87:    Result = CFE_ES_RegisterApp();
        -:   88:
        -:   89:    /*
        -:   90:    ** Perform application specific initialization...
        -:   91:    */
        2:   92:    if (Result == CFE_SUCCESS)
        -:   93:    {
        1:   94:        Result = DS_AppInitialize();
        -:   95:    }
        -:   96:
        -:   97:    /*
        -:   98:    ** Check for start-up error...
        -:   99:    */
        2:  100:    if (Result != CFE_SUCCESS)
        -:  101:    {
        -:  102:        /*
        -:  103:        ** Set request to terminate main loop...
        -:  104:        */
        1:  105:        RunStatus = CFE_ES_APP_ERROR;
        -:  106:    }
        -:  107:
        -:  108:    /*
        -:  109:    ** Main process loop...
        -:  110:    */
       10:  111:    while (CFE_ES_RunLoop(&RunStatus))
        -:  112:    {
        -:  113:        /*
        -:  114:        ** Performance Log (stop time counter)...
        -:  115:        */
        9:  116:        CFE_ES_PerfLogExit(DS_APPMAIN_PERF_ID);
        -:  117:
        -:  118:        /*
        -:  119:        ** Wait for next Software Bus message...
        -:  120:        */
        9:  121:        Result = CFE_SB_RcvMsg(&MessagePtr, DS_AppData.InputPipe, CFE_SB_PEND_FOREVER);
        -:  122:
        -:  123:        /*
        -:  124:        ** Performance Log (start time counter)...
        -:  125:        */
        8:  126:        CFE_ES_PerfLogEntry(DS_APPMAIN_PERF_ID);
        -:  127:
        -:  128:        /*
        -:  129:        ** Process Software Bus messages...
        -:  130:        */
        8:  131:        if (Result == CFE_SUCCESS)
        -:  132:        {
        4:  133:            DS_AppProcessMsg(MessagePtr);
        -:  134:        }
        -:  135:        else
        -:  136:        {
        -:  137:            /*
        -:  138:            ** Set request to terminate main loop...
        -:  139:            */
        4:  140:            RunStatus = CFE_ES_APP_ERROR;
        -:  141:        }
        -:  142:
        -:  143:        /*
        -:  144:        ** Note: If there were some reason to exit normally
        -:  145:        **       (without error) then we would set
        -:  146:        **       RunStatus = CFE_ES_APP_EXIT
        -:  147:        */
        -:  148:    }
        -:  149:
        -:  150:    /*
        -:  151:    ** Check for "fatal" process error...
        -:  152:    */
        1:  153:    if (Result != CFE_SUCCESS)
        -:  154:    {
        -:  155:        /*
        -:  156:        ** Send an event describing the reason for the termination...
        -:  157:        */
        1:  158:        CFE_EVS_SendEvent(DS_EXIT_ERR_EID, CFE_EVS_CRITICAL,
        -:  159:                         "Application terminating, err = 0x%08X", Result);
        -:  160:
        -:  161:        /*
        -:  162:        ** In case cFE Event Services is not working...
        -:  163:        */
        1:  164:        CFE_ES_WriteToSysLog("DS application terminating, err = 0x%08X\n", Result);
        -:  165:    }
        -:  166:
        -:  167:    /*
        -:  168:    ** Performance Log (stop time counter)...
        -:  169:    */
        1:  170:    CFE_ES_PerfLogExit(DS_APPMAIN_PERF_ID);
        -:  171:
        -:  172:    /*
        -:  173:    ** Let cFE kill the application (and any child tasks)...
        -:  174:    */
        1:  175:    CFE_ES_ExitApp(RunStatus);
        -:  176:
        -:  177:} /* End of DS_AppMain() */
        -:  178:
        -:  179:
        -:  180:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  181:/*                                                                 */
        -:  182:/* DS_AppInitialize() -- application initialization                */
        -:  183:/*                                                                 */
        -:  184:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  185:
        -:  186:int32 DS_AppInitialize(void)
function DS_AppInitialize called 7 returned 100% blocks executed 100%
        7:  187:{
        7:  188:    int32 Result = CFE_SUCCESS;
        7:  189:    int32 i;
        -:  190:
        -:  191:    /*
        -:  192:    ** Initialize global data structure...
        -:  193:    */
        7:  194:    CFE_PSP_MemSet(&DS_AppData, 0, sizeof(DS_AppData_t));
        -:  195:
        7:  196:    DS_AppData.AppEnableState = DS_DEF_ENABLE_STATE;
        -:  197:
        -:  198:    /*
        -:  199:    ** Mark files as closed (cFE uses zero as a valid file handle)...
        -:  200:    */
      119:  201:    for (i = 0; i < DS_DEST_FILE_CNT; i++)
        -:  202:    {
      112:  203:        DS_AppData.FileStatus[i].FileHandle = DS_CLOSED_FILE_HANDLE;
        -:  204:    }
        -:  205:
        -:  206:    /*
        -:  207:    ** Initialize interface to cFE Event Services...
        -:  208:    */
        7:  209:    if (Result == CFE_SUCCESS)
        -:  210:    {
        7:  211:        Result = CFE_EVS_Register(NULL, 0, 0);
        -:  212:
        7:  213:        if (Result != CFE_SUCCESS)
        -:  214:        {
        1:  215:            CFE_EVS_SendEvent(DS_INIT_ERR_EID, CFE_EVS_ERROR,
        -:  216:               "Unable to register for EVS services, err = 0x%08X", Result);
        -:  217:        }
        -:  218:    }
        -:  219:
        -:  220:    /*
        -:  221:    ** Create application Software Bus message pipe...
        -:  222:    */
        7:  223:    if (Result == CFE_SUCCESS)
        -:  224:    {
        6:  225:        Result = CFE_SB_CreatePipe(&DS_AppData.InputPipe,
        -:  226:                                    DS_APP_PIPE_DEPTH, DS_APP_PIPE_NAME);
        6:  227:        if (Result != CFE_SUCCESS)
        -:  228:        {
        1:  229:            CFE_EVS_SendEvent(DS_INIT_ERR_EID, CFE_EVS_ERROR,
        -:  230:               "Unable to create input pipe, err = 0x%08X", Result);
        -:  231:        }
        -:  232:    }
        -:  233:
        -:  234:    /*
        -:  235:    ** Subscribe to application housekeeping request command...
        -:  236:    */
        7:  237:    if (Result == CFE_SUCCESS)
        -:  238:    {
        5:  239:        Result = CFE_SB_Subscribe(DS_SEND_HK_MID, DS_AppData.InputPipe);
        -:  240:
        5:  241:        if (Result != CFE_SUCCESS)
        -:  242:        {
        1:  243:            CFE_EVS_SendEvent(DS_INIT_ERR_EID, CFE_EVS_ERROR,
        -:  244:               "Unable to subscribe to HK request, err = 0x%08X", Result);
        -:  245:        }
        -:  246:    }
        -:  247:
        -:  248:    /*
        -:  249:    ** Subscribe to application commands...
        -:  250:    */
        7:  251:    if (Result == CFE_SUCCESS)
        -:  252:    {
        4:  253:        Result = CFE_SB_Subscribe(DS_CMD_MID, DS_AppData.InputPipe);
        -:  254:
        4:  255:        if (Result != CFE_SUCCESS)
        -:  256:        {
        1:  257:            CFE_EVS_SendEvent(DS_INIT_ERR_EID, CFE_EVS_ERROR,
        -:  258:               "Unable to subscribe to DS commands, err = 0x%08X", Result);
        -:  259:        }
        -:  260:    }
        -:  261:
        -:  262:    /*
        -:  263:    ** Initialize application tables...
        -:  264:    */
        7:  265:    if (Result == CFE_SUCCESS)
        -:  266:    {
        3:  267:        Result = DS_TableInit();
        -:  268:    }
        -:  269:
        -:  270:    /*
        -:  271:    ** Initialize access to Critical Data Store (CDS)...
        -:  272:    */
        7:  273:    if (Result == CFE_SUCCESS)
        -:  274:    {
        3:  275:        Result = DS_TableCreateCDS();
        -:  276:    }
        -:  277:
        -:  278:    /*
        -:  279:    ** Generate application startup event message...
        -:  280:    */
        7:  281:    if (Result == CFE_SUCCESS)
        -:  282:    {
        3:  283:        CFE_EVS_SendEvent(DS_INIT_EID, CFE_EVS_INFORMATION,
        -:  284:                         "Application initialized, version %d.%d.%d.%d, data at 0x%08X",
        -:  285:                          DS_MAJOR_VERSION, DS_MINOR_VERSION,
        -:  286:                          DS_REVISION, DS_MISSION_REV, (uint32) &DS_AppData);
        -:  287:    }
        -:  288:
        7:  289:    return(Result);
        -:  290:
        -:  291:} /* End of DS_AppInitialize() */
        -:  292:
        -:  293:
        -:  294:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  295:/*                                                                 */
        -:  296:/* DS_AppProcessMsg() -- process Software Bus messages             */
        -:  297:/*                                                                 */
        -:  298:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  299:
        -:  300:void DS_AppProcessMsg(CFE_SB_MsgPtr_t MessagePtr)
function DS_AppProcessMsg called 8 returned 100% blocks executed 100%
        8:  301:{
        8:  302:    CFE_SB_MsgId_t MessageID = CFE_SB_GetMsgId(MessagePtr);
        -:  303:
        8:  304:    switch (MessageID)
        -:  305:    {
        -:  306:        /*
        -:  307:        ** DS application commands...
        -:  308:        */
        -:  309:        case DS_CMD_MID:
        2:  310:            DS_AppProcessCmd(MessagePtr);
        2:  311:            break;
        -:  312:
        -:  313:        /*
        -:  314:        ** DS housekeeping request command...
        -:  315:        */
        -:  316:        case DS_SEND_HK_MID:
        4:  317:            DS_AppProcessHK();
        -:  318:            break;
        -:  319:
        -:  320:        /*
        -:  321:        ** Unknown message ID's (must be something to store)...
        -:  322:        */
        -:  323:        default:
        8:  324:            break;
        -:  325:    }
        -:  326:
        -:  327:    /*
        -:  328:    ** Storing packets here, instead of in the default case above,
        -:  329:    **   allows DS to also store DS command packets.  However,
        -:  330:    **   every time DS receives a packet, a process counter will
        -:  331:    **   increment - and this may be confusing when DS is not
        -:  332:    **   receiving any packets other than periodic DS commands...
        -:  333:    */
        8:  334:    if (DS_AppData.AppEnableState == DS_DISABLED)
        -:  335:    {
        -:  336:        /*
        -:  337:        ** Application must be enabled in order to store data...
        -:  338:        */
        2:  339:        DS_AppData.DisabledPktCounter++;
        -:  340:    }
        6:  341:    else if ((DS_AppData.FilterTblPtr == (DS_FilterTable_t *) NULL) ||
        -:  342:             (DS_AppData.DestFileTblPtr == (DS_DestFileTable_t *) NULL))
        -:  343:    {
        -:  344:        /*
        -:  345:        ** Must have both tables loaded in order to store data...
        -:  346:        */
        1:  347:        DS_AppData.IgnoredPktCounter++;
        -:  348:    }
        -:  349:    else
        -:  350:    {
        -:  351:        /*
        -:  352:        ** Store packet (if permitted by filter table)...
        -:  353:        */
        5:  354:        DS_FileStorePacket(MessageID, MessagePtr);
        -:  355:
        -:  356:        /*
        -:  357:        ** One of the following counters will increment...
        -:  358:        **   (FilteredPktCounter or PassedPktCounter)
        -:  359:        */
        -:  360:    }
        -:  361:
        8:  362:    return;
        -:  363:
        -:  364:} /* End of DS_AppProcessMsg() */
        -:  365:
        -:  366:
        -:  367:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  368:/*                                                                 */
        -:  369:/* DS_AppProcessCmd() -- process application commands              */
        -:  370:/*                                                                 */
        -:  371:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  372:
        -:  373:void DS_AppProcessCmd(CFE_SB_MsgPtr_t MessagePtr)
function DS_AppProcessCmd called 18 returned 100% blocks executed 100%
       18:  374:{
       18:  375:    uint16 CommandCode  = CFE_SB_GetCmdCode(MessagePtr);
        -:  376:
       18:  377:    switch (CommandCode)
        -:  378:    {
        -:  379:        /*
        -:  380:        ** Do nothing command (aliveness test)...
        -:  381:        */
        -:  382:        case DS_NOOP_CC:
        3:  383:            DS_CmdNoop(MessagePtr);
        3:  384:            break;
        -:  385:
        -:  386:        /*
        -:  387:        ** Set housekeeping telemetry counters to zero...
        -:  388:        */
        -:  389:        case DS_RESET_CC:
        1:  390:            DS_CmdReset(MessagePtr);
        1:  391:            break;
        -:  392:
        -:  393:        /*
        -:  394:        ** Set DS application enable/disable state...
        -:  395:        */
        -:  396:        case DS_SET_APP_STATE_CC:
        1:  397:            DS_CmdSetAppState(MessagePtr);
        1:  398:            break;
        -:  399:
        -:  400:        /*
        -:  401:        ** Set packet filter file index...
        -:  402:        */
        -:  403:        case DS_SET_FILTER_FILE_CC:
        1:  404:            DS_CmdSetFilterFile(MessagePtr);
        1:  405:            break;
        -:  406:
        -:  407:        /*
        -:  408:        ** Set packet filter type (time vs count)...
        -:  409:        */
        -:  410:        case DS_SET_FILTER_TYPE_CC:
        1:  411:            DS_CmdSetFilterType(MessagePtr);
        1:  412:            break;
        -:  413:
        -:  414:        /*
        -:  415:        ** Set packet filter algorithm parameters...
        -:  416:        */
        -:  417:        case DS_SET_FILTER_PARMS_CC:
        1:  418:            DS_CmdSetFilterParms(MessagePtr);
        1:  419:            break;
        -:  420:
        -:  421:        /*
        -:  422:        ** Set destination file filename type (time vs count)...
        -:  423:        */
        -:  424:        case DS_SET_DEST_TYPE_CC:
        1:  425:            DS_CmdSetDestType(MessagePtr);
        1:  426:            break;
        -:  427:
        -:  428:        /*
        -:  429:        ** Set destination file enable/disable state...
        -:  430:        */
        -:  431:        case DS_SET_DEST_STATE_CC:
        1:  432:            DS_CmdSetDestState(MessagePtr);
        1:  433:            break;
        -:  434:
        -:  435:        /*
        -:  436:        ** Set destination file path portion of filename...
        -:  437:        */
        -:  438:        case DS_SET_DEST_PATH_CC:
        1:  439:            DS_CmdSetDestPath(MessagePtr);
        1:  440:            break;
        -:  441:
        -:  442:        /*
        -:  443:        ** Set destination file base portion of filename...
        -:  444:        */
        -:  445:        case DS_SET_DEST_BASE_CC:
        1:  446:            DS_CmdSetDestBase(MessagePtr);
        1:  447:            break;
        -:  448:
        -:  449:        /*
        -:  450:        ** Set destination file extension portion of filename...
        -:  451:        */
        -:  452:        case DS_SET_DEST_EXT_CC:
        1:  453:            DS_CmdSetDestExt(MessagePtr);
        1:  454:            break;
        -:  455:
        -:  456:        /*
        -:  457:        ** Set destination file maximum size limit...
        -:  458:        */
        -:  459:        case DS_SET_DEST_SIZE_CC:
        1:  460:            DS_CmdSetDestSize(MessagePtr);
        1:  461:            break;
        -:  462:
        -:  463:        /*
        -:  464:        ** Set destination file maximum age limit...
        -:  465:        */
        -:  466:        case DS_SET_DEST_AGE_CC:
        1:  467:            DS_CmdSetDestAge(MessagePtr);
        1:  468:            break;
        -:  469:
        -:  470:        /*
        -:  471:        ** Set destination file sequence count portion of filename...
        -:  472:        */
        -:  473:        case DS_SET_DEST_COUNT_CC:
        1:  474:            DS_CmdSetDestCount(MessagePtr);
        1:  475:            break;
        -:  476:
        -:  477:        /*
        -:  478:        ** Close destination file (next packet will re-open)...
        -:  479:        */
        -:  480:        case DS_CLOSE_FILE_CC:
        1:  481:            DS_CmdCloseFile(MessagePtr);
        1:  482:            break;
        -:  483:
        -:  484:        /*
        -:  485:        ** DS application command with unknown command code...
        -:  486:        */
        -:  487:        default:
        1:  488:            CFE_EVS_SendEvent(DS_CMD_CODE_ERR_EID, CFE_EVS_ERROR,
        -:  489:                             "Invalid command code: MID = 0x%04X, CC = %d",
        -:  490:                              DS_CMD_MID, CommandCode);
        -:  491:
        1:  492:            DS_AppData.CmdRejectedCounter++;
       18:  493:            break;
        -:  494:    }
        -:  495:
       18:  496:    return;
        -:  497:
        -:  498:} /* End of DS_AppProcessCmd() */
        -:  499:
        -:  500:
        -:  501:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  502:/*                                                                 */
        -:  503:/* DS_AppProcessHK() -- process hk request command                 */
        -:  504:/*                                                                 */
        -:  505:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  506:
        -:  507:void DS_AppProcessHK(void)
function DS_AppProcessHK called 6 returned 100% blocks executed 100%
        6:  508:{
        6:  509:    DS_HkPacket_t HkPacket;
        6:  510:    uint32 i;
        -:  511:
        -:  512:    /*
        -:  513:    ** Initialize housekeeping packet...
        -:  514:    */
        6:  515:    CFE_SB_InitMsg(&HkPacket, DS_HK_TLM_MID, sizeof(DS_HkPacket_t), TRUE);
        -:  516:
        -:  517:    /*
        -:  518:    ** Process data storage file age limits...
        -:  519:    */
        6:  520:    DS_FileTestAge(DS_SECS_PER_HK_CYCLE);
        -:  521:
        -:  522:    /*
        -:  523:    ** Take this opportunity to check for table updates...
        -:  524:    */
        6:  525:    DS_TableManageDestFile();
        6:  526:    DS_TableManageFilter();
        -:  527:
        -:  528:    /*
        -:  529:    ** Copy application command counters to housekeeping telemetry packet...
        -:  530:    */
        6:  531:    HkPacket.CmdAcceptedCounter = DS_AppData.CmdAcceptedCounter;
        6:  532:    HkPacket.CmdRejectedCounter = DS_AppData.CmdRejectedCounter;
        -:  533:
        -:  534:    /*
        -:  535:    ** Copy packet storage counters to housekeeping telemetry packet...
        -:  536:    */
        6:  537:    HkPacket.DisabledPktCounter = DS_AppData.DisabledPktCounter;
        6:  538:    HkPacket.IgnoredPktCounter  = DS_AppData.IgnoredPktCounter;
        6:  539:    HkPacket.FilteredPktCounter = DS_AppData.FilteredPktCounter;
        6:  540:    HkPacket.PassedPktCounter   = DS_AppData.PassedPktCounter;
        -:  541:
        -:  542:    /*
        -:  543:    ** Copy file I/O counters to housekeeping telemetry packet...
        -:  544:    */
        6:  545:    HkPacket.FileWriteCounter     = DS_AppData.FileWriteCounter;
        6:  546:    HkPacket.FileWriteErrCounter  = DS_AppData.FileWriteErrCounter;
        6:  547:    HkPacket.FileUpdateCounter    = DS_AppData.FileUpdateCounter;
        6:  548:    HkPacket.FileUpdateErrCounter = DS_AppData.FileUpdateErrCounter;
        -:  549:
        -:  550:    /*
        -:  551:    ** Copy configuration table counters to housekeeping telemetry packet...
        -:  552:    */
        6:  553:    HkPacket.DestTblLoadCounter   = DS_AppData.DestTblLoadCounter;
        6:  554:    HkPacket.DestTblErrCounter    = DS_AppData.DestTblErrCounter;
        6:  555:    HkPacket.FilterTblLoadCounter = DS_AppData.FilterTblLoadCounter;
        6:  556:    HkPacket.FilterTblErrCounter  = DS_AppData.FilterTblErrCounter;
        -:  557:
        -:  558:    /*
        -:  559:    ** Copy app enable/disable state to housekeeping telemetry packet...
        -:  560:    */
        6:  561:    HkPacket.AppEnableState = DS_AppData.AppEnableState;
        -:  562:
        -:  563:    /*
        -:  564:    ** Process array of destination file housekeeping data...
        -:  565:    */
      102:  566:    for (i = 0; i < DS_DEST_FILE_CNT; i++)
        -:  567:    {
        -:  568:        /*
        -:  569:        ** Copy file age and size data to housekeeping telemetry packet...
        -:  570:        */
       96:  571:        HkPacket.HkFileStatus[i].FileAge  = DS_AppData.FileStatus[i].FileAge;
       96:  572:        HkPacket.HkFileStatus[i].FileSize = DS_AppData.FileStatus[i].FileSize;
        -:  573:
        -:  574:        /*
        -:  575:        ** Compute file growth rate from number of bytes since last HK request...
        -:  576:        */
       96:  577:        HkPacket.HkFileStatus[i].FileRate = DS_AppData.FileStatus[i].FileGrowth / DS_SECS_PER_HK_CYCLE;
       96:  578:        DS_AppData.FileStatus[i].FileGrowth = 0;
        -:  579:
        -:  580:        /*
        -:  581:        ** Set file enable/disable state in housekeeping telemetry packet...
        -:  582:        */
       96:  583:        if (DS_AppData.DestFileTblPtr == (DS_DestFileTable_t *) NULL)
        -:  584:        {
       16:  585:            HkPacket.HkFileStatus[i].EnableState = DS_DISABLED;
        -:  586:        }
        -:  587:        else
        -:  588:        {
       80:  589:            HkPacket.HkFileStatus[i].EnableState = DS_AppData.FileStatus[i].FileState;
        -:  590:        }
        -:  591:
        -:  592:        /*
        -:  593:        ** Set file open/closed state in housekeeping telemetry packet...
        -:  594:        */
       96:  595:        if (DS_AppData.FileStatus[i].FileHandle == DS_CLOSED_FILE_HANDLE)
        -:  596:        {
       94:  597:            HkPacket.HkFileStatus[i].OpenState = DS_CLOSED;
        -:  598:        }
        -:  599:        else
        -:  600:        {
        2:  601:            HkPacket.HkFileStatus[i].OpenState = DS_OPEN;
        -:  602:
        -:  603:            /*
        -:  604:            ** Copy filename into housekeeping telemetry packet...
        -:  605:            */
        2:  606:            strcpy(HkPacket.HkFileStatus[i].FileName, DS_AppData.FileStatus[i].FileName);
        -:  607:        }
        -:  608:    }
        -:  609:
        -:  610:    /*
        -:  611:    ** Timestamp and send housekeeping telemetry packet...
        -:  612:    */
        6:  613:    CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &HkPacket);
        6:  614:    CFE_SB_SendMsg((CFE_SB_Msg_t *) &HkPacket);
        -:  615:
        -:  616:    return;
        -:  617:
        -:  618:} /* End of DS_AppProcessHK() */
        -:  619:
        -:  620:
        -:  621:/************************/
        -:  622:/*  End of File Comment */
        -:  623:/************************/
